// Code generated by ent, DO NOT EDIT.

package ent

import (
	"plms-backend/ent/class"
	"plms-backend/ent/class_lab_status"
	"plms-backend/ent/class_user_role"
	"plms-backend/ent/course"
	"plms-backend/ent/post"
	"plms-backend/ent/predicate"
	"plms-backend/ent/user"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ClassUpdate is the builder for updating Class entities.
type ClassUpdate struct {
	config
	hooks    []Hook
	mutation *ClassMutation
}

// Where appends a list predicates to the ClassUpdate builder.
func (cu *ClassUpdate) Where(ps ...predicate.Class) *ClassUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetOwnerID sets the "owner_id" field.
func (cu *ClassUpdate) SetOwnerID(i int) *ClassUpdate {
	cu.mutation.SetOwnerID(i)
	return cu
}

// SetCourseID sets the "course_id" field.
func (cu *ClassUpdate) SetCourseID(i int) *ClassUpdate {
	cu.mutation.SetCourseID(i)
	return cu
}

// SetName sets the "name" field.
func (cu *ClassUpdate) SetName(s string) *ClassUpdate {
	cu.mutation.SetName(s)
	return cu
}

// SetDescription sets the "description" field.
func (cu *ClassUpdate) SetDescription(s string) *ClassUpdate {
	cu.mutation.SetDescription(s)
	return cu
}

// SetDefaultLang sets the "default_lang" field.
func (cu *ClassUpdate) SetDefaultLang(cl class.DefaultLang) *ClassUpdate {
	cu.mutation.SetDefaultLang(cl)
	return cu
}

// SetDotw sets the "dotw" field.
func (cu *ClassUpdate) SetDotw(c class.Dotw) *ClassUpdate {
	cu.mutation.SetDotw(c)
	return cu
}

// SetStartTime sets the "start_time" field.
func (cu *ClassUpdate) SetStartTime(t time.Time) *ClassUpdate {
	cu.mutation.SetStartTime(t)
	return cu
}

// SetEndTime sets the "end_time" field.
func (cu *ClassUpdate) SetEndTime(t time.Time) *ClassUpdate {
	cu.mutation.SetEndTime(t)
	return cu
}

// SetCreatedAt sets the "created_at" field.
func (cu *ClassUpdate) SetCreatedAt(t time.Time) *ClassUpdate {
	cu.mutation.SetCreatedAt(t)
	return cu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cu *ClassUpdate) SetNillableCreatedAt(t *time.Time) *ClassUpdate {
	if t != nil {
		cu.SetCreatedAt(*t)
	}
	return cu
}

// SetUpdatedAt sets the "updated_at" field.
func (cu *ClassUpdate) SetUpdatedAt(t time.Time) *ClassUpdate {
	cu.mutation.SetUpdatedAt(t)
	return cu
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (cu *ClassUpdate) SetNillableUpdatedAt(t *time.Time) *ClassUpdate {
	if t != nil {
		cu.SetUpdatedAt(*t)
	}
	return cu
}

// SetOwner sets the "owner" edge to the User entity.
func (cu *ClassUpdate) SetOwner(u *User) *ClassUpdate {
	return cu.SetOwnerID(u.ID)
}

// SetCourse sets the "course" edge to the Course entity.
func (cu *ClassUpdate) SetCourse(c *Course) *ClassUpdate {
	return cu.SetCourseID(c.ID)
}

// AddMemberIDs adds the "members" edge to the Class_User_Role entity by IDs.
func (cu *ClassUpdate) AddMemberIDs(ids ...int) *ClassUpdate {
	cu.mutation.AddMemberIDs(ids...)
	return cu
}

// AddMembers adds the "members" edges to the Class_User_Role entity.
func (cu *ClassUpdate) AddMembers(c ...*Class_User_Role) *ClassUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cu.AddMemberIDs(ids...)
}

// AddPostIDs adds the "posts" edge to the Post entity by IDs.
func (cu *ClassUpdate) AddPostIDs(ids ...int) *ClassUpdate {
	cu.mutation.AddPostIDs(ids...)
	return cu
}

// AddPosts adds the "posts" edges to the Post entity.
func (cu *ClassUpdate) AddPosts(p ...*Post) *ClassUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return cu.AddPostIDs(ids...)
}

// AddClassLabStatusIDs adds the "class_lab_statuses" edge to the Class_Lab_Status entity by IDs.
func (cu *ClassUpdate) AddClassLabStatusIDs(ids ...int) *ClassUpdate {
	cu.mutation.AddClassLabStatusIDs(ids...)
	return cu
}

// AddClassLabStatuses adds the "class_lab_statuses" edges to the Class_Lab_Status entity.
func (cu *ClassUpdate) AddClassLabStatuses(c ...*Class_Lab_Status) *ClassUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cu.AddClassLabStatusIDs(ids...)
}

// Mutation returns the ClassMutation object of the builder.
func (cu *ClassUpdate) Mutation() *ClassMutation {
	return cu.mutation
}

// ClearOwner clears the "owner" edge to the User entity.
func (cu *ClassUpdate) ClearOwner() *ClassUpdate {
	cu.mutation.ClearOwner()
	return cu
}

// ClearCourse clears the "course" edge to the Course entity.
func (cu *ClassUpdate) ClearCourse() *ClassUpdate {
	cu.mutation.ClearCourse()
	return cu
}

// ClearMembers clears all "members" edges to the Class_User_Role entity.
func (cu *ClassUpdate) ClearMembers() *ClassUpdate {
	cu.mutation.ClearMembers()
	return cu
}

// RemoveMemberIDs removes the "members" edge to Class_User_Role entities by IDs.
func (cu *ClassUpdate) RemoveMemberIDs(ids ...int) *ClassUpdate {
	cu.mutation.RemoveMemberIDs(ids...)
	return cu
}

// RemoveMembers removes "members" edges to Class_User_Role entities.
func (cu *ClassUpdate) RemoveMembers(c ...*Class_User_Role) *ClassUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cu.RemoveMemberIDs(ids...)
}

// ClearPosts clears all "posts" edges to the Post entity.
func (cu *ClassUpdate) ClearPosts() *ClassUpdate {
	cu.mutation.ClearPosts()
	return cu
}

// RemovePostIDs removes the "posts" edge to Post entities by IDs.
func (cu *ClassUpdate) RemovePostIDs(ids ...int) *ClassUpdate {
	cu.mutation.RemovePostIDs(ids...)
	return cu
}

// RemovePosts removes "posts" edges to Post entities.
func (cu *ClassUpdate) RemovePosts(p ...*Post) *ClassUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return cu.RemovePostIDs(ids...)
}

// ClearClassLabStatuses clears all "class_lab_statuses" edges to the Class_Lab_Status entity.
func (cu *ClassUpdate) ClearClassLabStatuses() *ClassUpdate {
	cu.mutation.ClearClassLabStatuses()
	return cu
}

// RemoveClassLabStatusIDs removes the "class_lab_statuses" edge to Class_Lab_Status entities by IDs.
func (cu *ClassUpdate) RemoveClassLabStatusIDs(ids ...int) *ClassUpdate {
	cu.mutation.RemoveClassLabStatusIDs(ids...)
	return cu
}

// RemoveClassLabStatuses removes "class_lab_statuses" edges to Class_Lab_Status entities.
func (cu *ClassUpdate) RemoveClassLabStatuses(c ...*Class_Lab_Status) *ClassUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cu.RemoveClassLabStatusIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *ClassUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, cu.sqlSave, cu.mutation, cu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cu *ClassUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *ClassUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *ClassUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cu *ClassUpdate) check() error {
	if v, ok := cu.mutation.Name(); ok {
		if err := class.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Class.name": %w`, err)}
		}
	}
	if v, ok := cu.mutation.DefaultLang(); ok {
		if err := class.DefaultLangValidator(v); err != nil {
			return &ValidationError{Name: "default_lang", err: fmt.Errorf(`ent: validator failed for field "Class.default_lang": %w`, err)}
		}
	}
	if v, ok := cu.mutation.Dotw(); ok {
		if err := class.DotwValidator(v); err != nil {
			return &ValidationError{Name: "dotw", err: fmt.Errorf(`ent: validator failed for field "Class.dotw": %w`, err)}
		}
	}
	if _, ok := cu.mutation.OwnerID(); cu.mutation.OwnerCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Class.owner"`)
	}
	if _, ok := cu.mutation.CourseID(); cu.mutation.CourseCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Class.course"`)
	}
	return nil
}

func (cu *ClassUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := cu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(class.Table, class.Columns, sqlgraph.NewFieldSpec(class.FieldID, field.TypeInt))
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.Name(); ok {
		_spec.SetField(class.FieldName, field.TypeString, value)
	}
	if value, ok := cu.mutation.Description(); ok {
		_spec.SetField(class.FieldDescription, field.TypeString, value)
	}
	if value, ok := cu.mutation.DefaultLang(); ok {
		_spec.SetField(class.FieldDefaultLang, field.TypeEnum, value)
	}
	if value, ok := cu.mutation.Dotw(); ok {
		_spec.SetField(class.FieldDotw, field.TypeEnum, value)
	}
	if value, ok := cu.mutation.StartTime(); ok {
		_spec.SetField(class.FieldStartTime, field.TypeTime, value)
	}
	if value, ok := cu.mutation.EndTime(); ok {
		_spec.SetField(class.FieldEndTime, field.TypeTime, value)
	}
	if value, ok := cu.mutation.CreatedAt(); ok {
		_spec.SetField(class.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := cu.mutation.UpdatedAt(); ok {
		_spec.SetField(class.FieldUpdatedAt, field.TypeTime, value)
	}
	if cu.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   class.OwnerTable,
			Columns: []string{class.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   class.OwnerTable,
			Columns: []string{class.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.CourseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   class.CourseTable,
			Columns: []string{class.CourseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(course.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.CourseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   class.CourseTable,
			Columns: []string{class.CourseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(course.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.MembersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   class.MembersTable,
			Columns: []string{class.MembersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(class_user_role.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedMembersIDs(); len(nodes) > 0 && !cu.mutation.MembersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   class.MembersTable,
			Columns: []string{class.MembersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(class_user_role.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.MembersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   class.MembersTable,
			Columns: []string{class.MembersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(class_user_role.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.PostsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   class.PostsTable,
			Columns: []string{class.PostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedPostsIDs(); len(nodes) > 0 && !cu.mutation.PostsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   class.PostsTable,
			Columns: []string{class.PostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.PostsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   class.PostsTable,
			Columns: []string{class.PostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.ClassLabStatusesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   class.ClassLabStatusesTable,
			Columns: []string{class.ClassLabStatusesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(class_lab_status.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedClassLabStatusesIDs(); len(nodes) > 0 && !cu.mutation.ClassLabStatusesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   class.ClassLabStatusesTable,
			Columns: []string{class.ClassLabStatusesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(class_lab_status.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.ClassLabStatusesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   class.ClassLabStatusesTable,
			Columns: []string{class.ClassLabStatusesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(class_lab_status.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{class.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cu.mutation.done = true
	return n, nil
}

// ClassUpdateOne is the builder for updating a single Class entity.
type ClassUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ClassMutation
}

// SetOwnerID sets the "owner_id" field.
func (cuo *ClassUpdateOne) SetOwnerID(i int) *ClassUpdateOne {
	cuo.mutation.SetOwnerID(i)
	return cuo
}

// SetCourseID sets the "course_id" field.
func (cuo *ClassUpdateOne) SetCourseID(i int) *ClassUpdateOne {
	cuo.mutation.SetCourseID(i)
	return cuo
}

// SetName sets the "name" field.
func (cuo *ClassUpdateOne) SetName(s string) *ClassUpdateOne {
	cuo.mutation.SetName(s)
	return cuo
}

// SetDescription sets the "description" field.
func (cuo *ClassUpdateOne) SetDescription(s string) *ClassUpdateOne {
	cuo.mutation.SetDescription(s)
	return cuo
}

// SetDefaultLang sets the "default_lang" field.
func (cuo *ClassUpdateOne) SetDefaultLang(cl class.DefaultLang) *ClassUpdateOne {
	cuo.mutation.SetDefaultLang(cl)
	return cuo
}

// SetDotw sets the "dotw" field.
func (cuo *ClassUpdateOne) SetDotw(c class.Dotw) *ClassUpdateOne {
	cuo.mutation.SetDotw(c)
	return cuo
}

// SetStartTime sets the "start_time" field.
func (cuo *ClassUpdateOne) SetStartTime(t time.Time) *ClassUpdateOne {
	cuo.mutation.SetStartTime(t)
	return cuo
}

// SetEndTime sets the "end_time" field.
func (cuo *ClassUpdateOne) SetEndTime(t time.Time) *ClassUpdateOne {
	cuo.mutation.SetEndTime(t)
	return cuo
}

// SetCreatedAt sets the "created_at" field.
func (cuo *ClassUpdateOne) SetCreatedAt(t time.Time) *ClassUpdateOne {
	cuo.mutation.SetCreatedAt(t)
	return cuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cuo *ClassUpdateOne) SetNillableCreatedAt(t *time.Time) *ClassUpdateOne {
	if t != nil {
		cuo.SetCreatedAt(*t)
	}
	return cuo
}

// SetUpdatedAt sets the "updated_at" field.
func (cuo *ClassUpdateOne) SetUpdatedAt(t time.Time) *ClassUpdateOne {
	cuo.mutation.SetUpdatedAt(t)
	return cuo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (cuo *ClassUpdateOne) SetNillableUpdatedAt(t *time.Time) *ClassUpdateOne {
	if t != nil {
		cuo.SetUpdatedAt(*t)
	}
	return cuo
}

// SetOwner sets the "owner" edge to the User entity.
func (cuo *ClassUpdateOne) SetOwner(u *User) *ClassUpdateOne {
	return cuo.SetOwnerID(u.ID)
}

// SetCourse sets the "course" edge to the Course entity.
func (cuo *ClassUpdateOne) SetCourse(c *Course) *ClassUpdateOne {
	return cuo.SetCourseID(c.ID)
}

// AddMemberIDs adds the "members" edge to the Class_User_Role entity by IDs.
func (cuo *ClassUpdateOne) AddMemberIDs(ids ...int) *ClassUpdateOne {
	cuo.mutation.AddMemberIDs(ids...)
	return cuo
}

// AddMembers adds the "members" edges to the Class_User_Role entity.
func (cuo *ClassUpdateOne) AddMembers(c ...*Class_User_Role) *ClassUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cuo.AddMemberIDs(ids...)
}

// AddPostIDs adds the "posts" edge to the Post entity by IDs.
func (cuo *ClassUpdateOne) AddPostIDs(ids ...int) *ClassUpdateOne {
	cuo.mutation.AddPostIDs(ids...)
	return cuo
}

// AddPosts adds the "posts" edges to the Post entity.
func (cuo *ClassUpdateOne) AddPosts(p ...*Post) *ClassUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return cuo.AddPostIDs(ids...)
}

// AddClassLabStatusIDs adds the "class_lab_statuses" edge to the Class_Lab_Status entity by IDs.
func (cuo *ClassUpdateOne) AddClassLabStatusIDs(ids ...int) *ClassUpdateOne {
	cuo.mutation.AddClassLabStatusIDs(ids...)
	return cuo
}

// AddClassLabStatuses adds the "class_lab_statuses" edges to the Class_Lab_Status entity.
func (cuo *ClassUpdateOne) AddClassLabStatuses(c ...*Class_Lab_Status) *ClassUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cuo.AddClassLabStatusIDs(ids...)
}

// Mutation returns the ClassMutation object of the builder.
func (cuo *ClassUpdateOne) Mutation() *ClassMutation {
	return cuo.mutation
}

// ClearOwner clears the "owner" edge to the User entity.
func (cuo *ClassUpdateOne) ClearOwner() *ClassUpdateOne {
	cuo.mutation.ClearOwner()
	return cuo
}

// ClearCourse clears the "course" edge to the Course entity.
func (cuo *ClassUpdateOne) ClearCourse() *ClassUpdateOne {
	cuo.mutation.ClearCourse()
	return cuo
}

// ClearMembers clears all "members" edges to the Class_User_Role entity.
func (cuo *ClassUpdateOne) ClearMembers() *ClassUpdateOne {
	cuo.mutation.ClearMembers()
	return cuo
}

// RemoveMemberIDs removes the "members" edge to Class_User_Role entities by IDs.
func (cuo *ClassUpdateOne) RemoveMemberIDs(ids ...int) *ClassUpdateOne {
	cuo.mutation.RemoveMemberIDs(ids...)
	return cuo
}

// RemoveMembers removes "members" edges to Class_User_Role entities.
func (cuo *ClassUpdateOne) RemoveMembers(c ...*Class_User_Role) *ClassUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cuo.RemoveMemberIDs(ids...)
}

// ClearPosts clears all "posts" edges to the Post entity.
func (cuo *ClassUpdateOne) ClearPosts() *ClassUpdateOne {
	cuo.mutation.ClearPosts()
	return cuo
}

// RemovePostIDs removes the "posts" edge to Post entities by IDs.
func (cuo *ClassUpdateOne) RemovePostIDs(ids ...int) *ClassUpdateOne {
	cuo.mutation.RemovePostIDs(ids...)
	return cuo
}

// RemovePosts removes "posts" edges to Post entities.
func (cuo *ClassUpdateOne) RemovePosts(p ...*Post) *ClassUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return cuo.RemovePostIDs(ids...)
}

// ClearClassLabStatuses clears all "class_lab_statuses" edges to the Class_Lab_Status entity.
func (cuo *ClassUpdateOne) ClearClassLabStatuses() *ClassUpdateOne {
	cuo.mutation.ClearClassLabStatuses()
	return cuo
}

// RemoveClassLabStatusIDs removes the "class_lab_statuses" edge to Class_Lab_Status entities by IDs.
func (cuo *ClassUpdateOne) RemoveClassLabStatusIDs(ids ...int) *ClassUpdateOne {
	cuo.mutation.RemoveClassLabStatusIDs(ids...)
	return cuo
}

// RemoveClassLabStatuses removes "class_lab_statuses" edges to Class_Lab_Status entities.
func (cuo *ClassUpdateOne) RemoveClassLabStatuses(c ...*Class_Lab_Status) *ClassUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cuo.RemoveClassLabStatusIDs(ids...)
}

// Where appends a list predicates to the ClassUpdate builder.
func (cuo *ClassUpdateOne) Where(ps ...predicate.Class) *ClassUpdateOne {
	cuo.mutation.Where(ps...)
	return cuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *ClassUpdateOne) Select(field string, fields ...string) *ClassUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Class entity.
func (cuo *ClassUpdateOne) Save(ctx context.Context) (*Class, error) {
	return withHooks(ctx, cuo.sqlSave, cuo.mutation, cuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *ClassUpdateOne) SaveX(ctx context.Context) *Class {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *ClassUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *ClassUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cuo *ClassUpdateOne) check() error {
	if v, ok := cuo.mutation.Name(); ok {
		if err := class.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Class.name": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.DefaultLang(); ok {
		if err := class.DefaultLangValidator(v); err != nil {
			return &ValidationError{Name: "default_lang", err: fmt.Errorf(`ent: validator failed for field "Class.default_lang": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.Dotw(); ok {
		if err := class.DotwValidator(v); err != nil {
			return &ValidationError{Name: "dotw", err: fmt.Errorf(`ent: validator failed for field "Class.dotw": %w`, err)}
		}
	}
	if _, ok := cuo.mutation.OwnerID(); cuo.mutation.OwnerCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Class.owner"`)
	}
	if _, ok := cuo.mutation.CourseID(); cuo.mutation.CourseCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Class.course"`)
	}
	return nil
}

func (cuo *ClassUpdateOne) sqlSave(ctx context.Context) (_node *Class, err error) {
	if err := cuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(class.Table, class.Columns, sqlgraph.NewFieldSpec(class.FieldID, field.TypeInt))
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Class.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, class.FieldID)
		for _, f := range fields {
			if !class.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != class.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.Name(); ok {
		_spec.SetField(class.FieldName, field.TypeString, value)
	}
	if value, ok := cuo.mutation.Description(); ok {
		_spec.SetField(class.FieldDescription, field.TypeString, value)
	}
	if value, ok := cuo.mutation.DefaultLang(); ok {
		_spec.SetField(class.FieldDefaultLang, field.TypeEnum, value)
	}
	if value, ok := cuo.mutation.Dotw(); ok {
		_spec.SetField(class.FieldDotw, field.TypeEnum, value)
	}
	if value, ok := cuo.mutation.StartTime(); ok {
		_spec.SetField(class.FieldStartTime, field.TypeTime, value)
	}
	if value, ok := cuo.mutation.EndTime(); ok {
		_spec.SetField(class.FieldEndTime, field.TypeTime, value)
	}
	if value, ok := cuo.mutation.CreatedAt(); ok {
		_spec.SetField(class.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := cuo.mutation.UpdatedAt(); ok {
		_spec.SetField(class.FieldUpdatedAt, field.TypeTime, value)
	}
	if cuo.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   class.OwnerTable,
			Columns: []string{class.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   class.OwnerTable,
			Columns: []string{class.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.CourseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   class.CourseTable,
			Columns: []string{class.CourseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(course.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.CourseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   class.CourseTable,
			Columns: []string{class.CourseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(course.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.MembersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   class.MembersTable,
			Columns: []string{class.MembersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(class_user_role.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedMembersIDs(); len(nodes) > 0 && !cuo.mutation.MembersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   class.MembersTable,
			Columns: []string{class.MembersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(class_user_role.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.MembersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   class.MembersTable,
			Columns: []string{class.MembersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(class_user_role.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.PostsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   class.PostsTable,
			Columns: []string{class.PostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedPostsIDs(); len(nodes) > 0 && !cuo.mutation.PostsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   class.PostsTable,
			Columns: []string{class.PostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.PostsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   class.PostsTable,
			Columns: []string{class.PostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.ClassLabStatusesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   class.ClassLabStatusesTable,
			Columns: []string{class.ClassLabStatusesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(class_lab_status.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedClassLabStatusesIDs(); len(nodes) > 0 && !cuo.mutation.ClassLabStatusesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   class.ClassLabStatusesTable,
			Columns: []string{class.ClassLabStatusesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(class_lab_status.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.ClassLabStatusesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   class.ClassLabStatusesTable,
			Columns: []string{class.ClassLabStatusesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(class_lab_status.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Class{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{class.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cuo.mutation.done = true
	return _node, nil
}
