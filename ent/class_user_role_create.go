// Code generated by ent, DO NOT EDIT.

package ent

import (
	"plms-backend/ent/class"
	"plms-backend/ent/class_user_role"
	"plms-backend/ent/user"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ClassUserRoleCreate is the builder for creating a Class_User_Role entity.
type ClassUserRoleCreate struct {
	config
	mutation *ClassUserRoleMutation
	hooks    []Hook
}

// SetUserID sets the "user_id" field.
func (curc *ClassUserRoleCreate) SetUserID(i int) *ClassUserRoleCreate {
	curc.mutation.SetUserID(i)
	return curc
}

// SetClassID sets the "class_id" field.
func (curc *ClassUserRoleCreate) SetClassID(i int) *ClassUserRoleCreate {
	curc.mutation.SetClassID(i)
	return curc
}

// SetRole sets the "role" field.
func (curc *ClassUserRoleCreate) SetRole(cur class_user_role.Role) *ClassUserRoleCreate {
	curc.mutation.SetRole(cur)
	return curc
}

// SetUser sets the "user" edge to the User entity.
func (curc *ClassUserRoleCreate) SetUser(u *User) *ClassUserRoleCreate {
	return curc.SetUserID(u.ID)
}

// SetClass sets the "class" edge to the Class entity.
func (curc *ClassUserRoleCreate) SetClass(c *Class) *ClassUserRoleCreate {
	return curc.SetClassID(c.ID)
}

// Mutation returns the ClassUserRoleMutation object of the builder.
func (curc *ClassUserRoleCreate) Mutation() *ClassUserRoleMutation {
	return curc.mutation
}

// Save creates the Class_User_Role in the database.
func (curc *ClassUserRoleCreate) Save(ctx context.Context) (*Class_User_Role, error) {
	return withHooks(ctx, curc.sqlSave, curc.mutation, curc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (curc *ClassUserRoleCreate) SaveX(ctx context.Context) *Class_User_Role {
	v, err := curc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (curc *ClassUserRoleCreate) Exec(ctx context.Context) error {
	_, err := curc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (curc *ClassUserRoleCreate) ExecX(ctx context.Context) {
	if err := curc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (curc *ClassUserRoleCreate) check() error {
	if _, ok := curc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "Class_User_Role.user_id"`)}
	}
	if _, ok := curc.mutation.ClassID(); !ok {
		return &ValidationError{Name: "class_id", err: errors.New(`ent: missing required field "Class_User_Role.class_id"`)}
	}
	if _, ok := curc.mutation.Role(); !ok {
		return &ValidationError{Name: "role", err: errors.New(`ent: missing required field "Class_User_Role.role"`)}
	}
	if v, ok := curc.mutation.Role(); ok {
		if err := class_user_role.RoleValidator(v); err != nil {
			return &ValidationError{Name: "role", err: fmt.Errorf(`ent: validator failed for field "Class_User_Role.role": %w`, err)}
		}
	}
	if _, ok := curc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user", err: errors.New(`ent: missing required edge "Class_User_Role.user"`)}
	}
	if _, ok := curc.mutation.ClassID(); !ok {
		return &ValidationError{Name: "class", err: errors.New(`ent: missing required edge "Class_User_Role.class"`)}
	}
	return nil
}

func (curc *ClassUserRoleCreate) sqlSave(ctx context.Context) (*Class_User_Role, error) {
	if err := curc.check(); err != nil {
		return nil, err
	}
	_node, _spec := curc.createSpec()
	if err := sqlgraph.CreateNode(ctx, curc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	curc.mutation.id = &_node.ID
	curc.mutation.done = true
	return _node, nil
}

func (curc *ClassUserRoleCreate) createSpec() (*Class_User_Role, *sqlgraph.CreateSpec) {
	var (
		_node = &Class_User_Role{config: curc.config}
		_spec = sqlgraph.NewCreateSpec(class_user_role.Table, sqlgraph.NewFieldSpec(class_user_role.FieldID, field.TypeInt))
	)
	if value, ok := curc.mutation.Role(); ok {
		_spec.SetField(class_user_role.FieldRole, field.TypeEnum, value)
		_node.Role = value
	}
	if nodes := curc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   class_user_role.UserTable,
			Columns: []string{class_user_role.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := curc.mutation.ClassIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   class_user_role.ClassTable,
			Columns: []string{class_user_role.ClassColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(class.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ClassID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ClassUserRoleCreateBulk is the builder for creating many Class_User_Role entities in bulk.
type ClassUserRoleCreateBulk struct {
	config
	builders []*ClassUserRoleCreate
}

// Save creates the Class_User_Role entities in the database.
func (curcb *ClassUserRoleCreateBulk) Save(ctx context.Context) ([]*Class_User_Role, error) {
	specs := make([]*sqlgraph.CreateSpec, len(curcb.builders))
	nodes := make([]*Class_User_Role, len(curcb.builders))
	mutators := make([]Mutator, len(curcb.builders))
	for i := range curcb.builders {
		func(i int, root context.Context) {
			builder := curcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ClassUserRoleMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, curcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, curcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, curcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (curcb *ClassUserRoleCreateBulk) SaveX(ctx context.Context) []*Class_User_Role {
	v, err := curcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (curcb *ClassUserRoleCreateBulk) Exec(ctx context.Context) error {
	_, err := curcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (curcb *ClassUserRoleCreateBulk) ExecX(ctx context.Context) {
	if err := curcb.Exec(ctx); err != nil {
		panic(err)
	}
}
