// Code generated by ent, DO NOT EDIT.

package ent

import (
	"plms-backend/ent/class"
	"plms-backend/ent/class_user_role"
	"plms-backend/ent/predicate"
	"plms-backend/ent/user"
	"context"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ClassUserRoleQuery is the builder for querying Class_User_Role entities.
type ClassUserRoleQuery struct {
	config
	ctx        *QueryContext
	order      []class_user_role.OrderOption
	inters     []Interceptor
	predicates []predicate.Class_User_Role
	withUser   *UserQuery
	withClass  *ClassQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the ClassUserRoleQuery builder.
func (curq *ClassUserRoleQuery) Where(ps ...predicate.Class_User_Role) *ClassUserRoleQuery {
	curq.predicates = append(curq.predicates, ps...)
	return curq
}

// Limit the number of records to be returned by this query.
func (curq *ClassUserRoleQuery) Limit(limit int) *ClassUserRoleQuery {
	curq.ctx.Limit = &limit
	return curq
}

// Offset to start from.
func (curq *ClassUserRoleQuery) Offset(offset int) *ClassUserRoleQuery {
	curq.ctx.Offset = &offset
	return curq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (curq *ClassUserRoleQuery) Unique(unique bool) *ClassUserRoleQuery {
	curq.ctx.Unique = &unique
	return curq
}

// Order specifies how the records should be ordered.
func (curq *ClassUserRoleQuery) Order(o ...class_user_role.OrderOption) *ClassUserRoleQuery {
	curq.order = append(curq.order, o...)
	return curq
}

// QueryUser chains the current query on the "user" edge.
func (curq *ClassUserRoleQuery) QueryUser() *UserQuery {
	query := (&UserClient{config: curq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := curq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := curq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(class_user_role.Table, class_user_role.FieldID, selector),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, class_user_role.UserTable, class_user_role.UserColumn),
		)
		fromU = sqlgraph.SetNeighbors(curq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryClass chains the current query on the "class" edge.
func (curq *ClassUserRoleQuery) QueryClass() *ClassQuery {
	query := (&ClassClient{config: curq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := curq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := curq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(class_user_role.Table, class_user_role.FieldID, selector),
			sqlgraph.To(class.Table, class.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, class_user_role.ClassTable, class_user_role.ClassColumn),
		)
		fromU = sqlgraph.SetNeighbors(curq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first Class_User_Role entity from the query.
// Returns a *NotFoundError when no Class_User_Role was found.
func (curq *ClassUserRoleQuery) First(ctx context.Context) (*Class_User_Role, error) {
	nodes, err := curq.Limit(1).All(setContextOp(ctx, curq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{class_user_role.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (curq *ClassUserRoleQuery) FirstX(ctx context.Context) *Class_User_Role {
	node, err := curq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first Class_User_Role ID from the query.
// Returns a *NotFoundError when no Class_User_Role ID was found.
func (curq *ClassUserRoleQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = curq.Limit(1).IDs(setContextOp(ctx, curq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{class_user_role.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (curq *ClassUserRoleQuery) FirstIDX(ctx context.Context) int {
	id, err := curq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single Class_User_Role entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one Class_User_Role entity is found.
// Returns a *NotFoundError when no Class_User_Role entities are found.
func (curq *ClassUserRoleQuery) Only(ctx context.Context) (*Class_User_Role, error) {
	nodes, err := curq.Limit(2).All(setContextOp(ctx, curq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{class_user_role.Label}
	default:
		return nil, &NotSingularError{class_user_role.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (curq *ClassUserRoleQuery) OnlyX(ctx context.Context) *Class_User_Role {
	node, err := curq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only Class_User_Role ID in the query.
// Returns a *NotSingularError when more than one Class_User_Role ID is found.
// Returns a *NotFoundError when no entities are found.
func (curq *ClassUserRoleQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = curq.Limit(2).IDs(setContextOp(ctx, curq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{class_user_role.Label}
	default:
		err = &NotSingularError{class_user_role.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (curq *ClassUserRoleQuery) OnlyIDX(ctx context.Context) int {
	id, err := curq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of Class_User_Roles.
func (curq *ClassUserRoleQuery) All(ctx context.Context) ([]*Class_User_Role, error) {
	ctx = setContextOp(ctx, curq.ctx, "All")
	if err := curq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*Class_User_Role, *ClassUserRoleQuery]()
	return withInterceptors[[]*Class_User_Role](ctx, curq, qr, curq.inters)
}

// AllX is like All, but panics if an error occurs.
func (curq *ClassUserRoleQuery) AllX(ctx context.Context) []*Class_User_Role {
	nodes, err := curq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of Class_User_Role IDs.
func (curq *ClassUserRoleQuery) IDs(ctx context.Context) (ids []int, err error) {
	if curq.ctx.Unique == nil && curq.path != nil {
		curq.Unique(true)
	}
	ctx = setContextOp(ctx, curq.ctx, "IDs")
	if err = curq.Select(class_user_role.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (curq *ClassUserRoleQuery) IDsX(ctx context.Context) []int {
	ids, err := curq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (curq *ClassUserRoleQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, curq.ctx, "Count")
	if err := curq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, curq, querierCount[*ClassUserRoleQuery](), curq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (curq *ClassUserRoleQuery) CountX(ctx context.Context) int {
	count, err := curq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (curq *ClassUserRoleQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, curq.ctx, "Exist")
	switch _, err := curq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (curq *ClassUserRoleQuery) ExistX(ctx context.Context) bool {
	exist, err := curq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the ClassUserRoleQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (curq *ClassUserRoleQuery) Clone() *ClassUserRoleQuery {
	if curq == nil {
		return nil
	}
	return &ClassUserRoleQuery{
		config:     curq.config,
		ctx:        curq.ctx.Clone(),
		order:      append([]class_user_role.OrderOption{}, curq.order...),
		inters:     append([]Interceptor{}, curq.inters...),
		predicates: append([]predicate.Class_User_Role{}, curq.predicates...),
		withUser:   curq.withUser.Clone(),
		withClass:  curq.withClass.Clone(),
		// clone intermediate query.
		sql:  curq.sql.Clone(),
		path: curq.path,
	}
}

// WithUser tells the query-builder to eager-load the nodes that are connected to
// the "user" edge. The optional arguments are used to configure the query builder of the edge.
func (curq *ClassUserRoleQuery) WithUser(opts ...func(*UserQuery)) *ClassUserRoleQuery {
	query := (&UserClient{config: curq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	curq.withUser = query
	return curq
}

// WithClass tells the query-builder to eager-load the nodes that are connected to
// the "class" edge. The optional arguments are used to configure the query builder of the edge.
func (curq *ClassUserRoleQuery) WithClass(opts ...func(*ClassQuery)) *ClassUserRoleQuery {
	query := (&ClassClient{config: curq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	curq.withClass = query
	return curq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		UserID int `json:"user_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.ClassUserRole.Query().
//		GroupBy(class_user_role.FieldUserID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (curq *ClassUserRoleQuery) GroupBy(field string, fields ...string) *ClassUserRoleGroupBy {
	curq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &ClassUserRoleGroupBy{build: curq}
	grbuild.flds = &curq.ctx.Fields
	grbuild.label = class_user_role.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		UserID int `json:"user_id,omitempty"`
//	}
//
//	client.ClassUserRole.Query().
//		Select(class_user_role.FieldUserID).
//		Scan(ctx, &v)
func (curq *ClassUserRoleQuery) Select(fields ...string) *ClassUserRoleSelect {
	curq.ctx.Fields = append(curq.ctx.Fields, fields...)
	sbuild := &ClassUserRoleSelect{ClassUserRoleQuery: curq}
	sbuild.label = class_user_role.Label
	sbuild.flds, sbuild.scan = &curq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a ClassUserRoleSelect configured with the given aggregations.
func (curq *ClassUserRoleQuery) Aggregate(fns ...AggregateFunc) *ClassUserRoleSelect {
	return curq.Select().Aggregate(fns...)
}

func (curq *ClassUserRoleQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range curq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, curq); err != nil {
				return err
			}
		}
	}
	for _, f := range curq.ctx.Fields {
		if !class_user_role.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if curq.path != nil {
		prev, err := curq.path(ctx)
		if err != nil {
			return err
		}
		curq.sql = prev
	}
	return nil
}

func (curq *ClassUserRoleQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*Class_User_Role, error) {
	var (
		nodes       = []*Class_User_Role{}
		_spec       = curq.querySpec()
		loadedTypes = [2]bool{
			curq.withUser != nil,
			curq.withClass != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*Class_User_Role).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &Class_User_Role{config: curq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, curq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := curq.withUser; query != nil {
		if err := curq.loadUser(ctx, query, nodes, nil,
			func(n *Class_User_Role, e *User) { n.Edges.User = e }); err != nil {
			return nil, err
		}
	}
	if query := curq.withClass; query != nil {
		if err := curq.loadClass(ctx, query, nodes, nil,
			func(n *Class_User_Role, e *Class) { n.Edges.Class = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (curq *ClassUserRoleQuery) loadUser(ctx context.Context, query *UserQuery, nodes []*Class_User_Role, init func(*Class_User_Role), assign func(*Class_User_Role, *User)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*Class_User_Role)
	for i := range nodes {
		fk := nodes[i].UserID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(user.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "user_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (curq *ClassUserRoleQuery) loadClass(ctx context.Context, query *ClassQuery, nodes []*Class_User_Role, init func(*Class_User_Role), assign func(*Class_User_Role, *Class)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*Class_User_Role)
	for i := range nodes {
		fk := nodes[i].ClassID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(class.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "class_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (curq *ClassUserRoleQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := curq.querySpec()
	_spec.Node.Columns = curq.ctx.Fields
	if len(curq.ctx.Fields) > 0 {
		_spec.Unique = curq.ctx.Unique != nil && *curq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, curq.driver, _spec)
}

func (curq *ClassUserRoleQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(class_user_role.Table, class_user_role.Columns, sqlgraph.NewFieldSpec(class_user_role.FieldID, field.TypeInt))
	_spec.From = curq.sql
	if unique := curq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if curq.path != nil {
		_spec.Unique = true
	}
	if fields := curq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, class_user_role.FieldID)
		for i := range fields {
			if fields[i] != class_user_role.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if curq.withUser != nil {
			_spec.Node.AddColumnOnce(class_user_role.FieldUserID)
		}
		if curq.withClass != nil {
			_spec.Node.AddColumnOnce(class_user_role.FieldClassID)
		}
	}
	if ps := curq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := curq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := curq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := curq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (curq *ClassUserRoleQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(curq.driver.Dialect())
	t1 := builder.Table(class_user_role.Table)
	columns := curq.ctx.Fields
	if len(columns) == 0 {
		columns = class_user_role.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if curq.sql != nil {
		selector = curq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if curq.ctx.Unique != nil && *curq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range curq.predicates {
		p(selector)
	}
	for _, p := range curq.order {
		p(selector)
	}
	if offset := curq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := curq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// ClassUserRoleGroupBy is the group-by builder for Class_User_Role entities.
type ClassUserRoleGroupBy struct {
	selector
	build *ClassUserRoleQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (curgb *ClassUserRoleGroupBy) Aggregate(fns ...AggregateFunc) *ClassUserRoleGroupBy {
	curgb.fns = append(curgb.fns, fns...)
	return curgb
}

// Scan applies the selector query and scans the result into the given value.
func (curgb *ClassUserRoleGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, curgb.build.ctx, "GroupBy")
	if err := curgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ClassUserRoleQuery, *ClassUserRoleGroupBy](ctx, curgb.build, curgb, curgb.build.inters, v)
}

func (curgb *ClassUserRoleGroupBy) sqlScan(ctx context.Context, root *ClassUserRoleQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(curgb.fns))
	for _, fn := range curgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*curgb.flds)+len(curgb.fns))
		for _, f := range *curgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*curgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := curgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// ClassUserRoleSelect is the builder for selecting fields of ClassUserRole entities.
type ClassUserRoleSelect struct {
	*ClassUserRoleQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (curs *ClassUserRoleSelect) Aggregate(fns ...AggregateFunc) *ClassUserRoleSelect {
	curs.fns = append(curs.fns, fns...)
	return curs
}

// Scan applies the selector query and scans the result into the given value.
func (curs *ClassUserRoleSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, curs.ctx, "Select")
	if err := curs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ClassUserRoleQuery, *ClassUserRoleSelect](ctx, curs.ClassUserRoleQuery, curs, curs.inters, v)
}

func (curs *ClassUserRoleSelect) sqlScan(ctx context.Context, root *ClassUserRoleQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(curs.fns))
	for _, fn := range curs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*curs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := curs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
