// Code generated by ent, DO NOT EDIT.

package class_lab_status

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the class_lab_status type in the database.
	Label = "class_lab_status"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCourseID holds the string denoting the course_id field in the database.
	FieldCourseID = "course_id"
	// FieldClassID holds the string denoting the class_id field in the database.
	FieldClassID = "class_id"
	// FieldLabID holds the string denoting the lab_id field in the database.
	FieldLabID = "lab_id"
	// FieldIsOpen holds the string denoting the is_open field in the database.
	FieldIsOpen = "is_open"
	// EdgeCourse holds the string denoting the course edge name in mutations.
	EdgeCourse = "course"
	// EdgeClass holds the string denoting the class edge name in mutations.
	EdgeClass = "class"
	// EdgeLab holds the string denoting the lab edge name in mutations.
	EdgeLab = "lab"
	// Table holds the table name of the class_lab_status in the database.
	Table = "class_lab_status"
	// CourseTable is the table that holds the course relation/edge.
	CourseTable = "class_lab_status"
	// CourseInverseTable is the table name for the Course entity.
	// It exists in this package in order to avoid circular dependency with the "course" package.
	CourseInverseTable = "courses"
	// CourseColumn is the table column denoting the course relation/edge.
	CourseColumn = "course_id"
	// ClassTable is the table that holds the class relation/edge.
	ClassTable = "class_lab_status"
	// ClassInverseTable is the table name for the Class entity.
	// It exists in this package in order to avoid circular dependency with the "class" package.
	ClassInverseTable = "classes"
	// ClassColumn is the table column denoting the class relation/edge.
	ClassColumn = "class_id"
	// LabTable is the table that holds the lab relation/edge.
	LabTable = "class_lab_status"
	// LabInverseTable is the table name for the Lab entity.
	// It exists in this package in order to avoid circular dependency with the "lab" package.
	LabInverseTable = "labs"
	// LabColumn is the table column denoting the lab relation/edge.
	LabColumn = "lab_id"
)

// Columns holds all SQL columns for class_lab_status fields.
var Columns = []string{
	FieldID,
	FieldCourseID,
	FieldClassID,
	FieldLabID,
	FieldIsOpen,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultIsOpen holds the default value on creation for the "is_open" field.
	DefaultIsOpen bool
)

// OrderOption defines the ordering options for the Class_Lab_Status queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCourseID orders the results by the course_id field.
func ByCourseID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCourseID, opts...).ToFunc()
}

// ByClassID orders the results by the class_id field.
func ByClassID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldClassID, opts...).ToFunc()
}

// ByLabID orders the results by the lab_id field.
func ByLabID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLabID, opts...).ToFunc()
}

// ByIsOpen orders the results by the is_open field.
func ByIsOpen(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsOpen, opts...).ToFunc()
}

// ByCourseField orders the results by course field.
func ByCourseField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCourseStep(), sql.OrderByField(field, opts...))
	}
}

// ByClassField orders the results by class field.
func ByClassField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newClassStep(), sql.OrderByField(field, opts...))
	}
}

// ByLabField orders the results by lab field.
func ByLabField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newLabStep(), sql.OrderByField(field, opts...))
	}
}
func newCourseStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CourseInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, CourseTable, CourseColumn),
	)
}
func newClassStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ClassInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ClassTable, ClassColumn),
	)
}
func newLabStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(LabInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, LabTable, LabColumn),
	)
}
