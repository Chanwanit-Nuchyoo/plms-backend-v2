// Code generated by ent, DO NOT EDIT.

package class_lab_status

import (
	"plms-backend/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Class_Lab_Status {
	return predicate.Class_Lab_Status(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Class_Lab_Status {
	return predicate.Class_Lab_Status(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Class_Lab_Status {
	return predicate.Class_Lab_Status(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Class_Lab_Status {
	return predicate.Class_Lab_Status(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Class_Lab_Status {
	return predicate.Class_Lab_Status(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Class_Lab_Status {
	return predicate.Class_Lab_Status(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Class_Lab_Status {
	return predicate.Class_Lab_Status(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Class_Lab_Status {
	return predicate.Class_Lab_Status(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Class_Lab_Status {
	return predicate.Class_Lab_Status(sql.FieldLTE(FieldID, id))
}

// CourseID applies equality check predicate on the "course_id" field. It's identical to CourseIDEQ.
func CourseID(v int) predicate.Class_Lab_Status {
	return predicate.Class_Lab_Status(sql.FieldEQ(FieldCourseID, v))
}

// ClassID applies equality check predicate on the "class_id" field. It's identical to ClassIDEQ.
func ClassID(v int) predicate.Class_Lab_Status {
	return predicate.Class_Lab_Status(sql.FieldEQ(FieldClassID, v))
}

// LabID applies equality check predicate on the "lab_id" field. It's identical to LabIDEQ.
func LabID(v int) predicate.Class_Lab_Status {
	return predicate.Class_Lab_Status(sql.FieldEQ(FieldLabID, v))
}

// IsOpen applies equality check predicate on the "is_open" field. It's identical to IsOpenEQ.
func IsOpen(v bool) predicate.Class_Lab_Status {
	return predicate.Class_Lab_Status(sql.FieldEQ(FieldIsOpen, v))
}

// CourseIDEQ applies the EQ predicate on the "course_id" field.
func CourseIDEQ(v int) predicate.Class_Lab_Status {
	return predicate.Class_Lab_Status(sql.FieldEQ(FieldCourseID, v))
}

// CourseIDNEQ applies the NEQ predicate on the "course_id" field.
func CourseIDNEQ(v int) predicate.Class_Lab_Status {
	return predicate.Class_Lab_Status(sql.FieldNEQ(FieldCourseID, v))
}

// CourseIDIn applies the In predicate on the "course_id" field.
func CourseIDIn(vs ...int) predicate.Class_Lab_Status {
	return predicate.Class_Lab_Status(sql.FieldIn(FieldCourseID, vs...))
}

// CourseIDNotIn applies the NotIn predicate on the "course_id" field.
func CourseIDNotIn(vs ...int) predicate.Class_Lab_Status {
	return predicate.Class_Lab_Status(sql.FieldNotIn(FieldCourseID, vs...))
}

// ClassIDEQ applies the EQ predicate on the "class_id" field.
func ClassIDEQ(v int) predicate.Class_Lab_Status {
	return predicate.Class_Lab_Status(sql.FieldEQ(FieldClassID, v))
}

// ClassIDNEQ applies the NEQ predicate on the "class_id" field.
func ClassIDNEQ(v int) predicate.Class_Lab_Status {
	return predicate.Class_Lab_Status(sql.FieldNEQ(FieldClassID, v))
}

// ClassIDIn applies the In predicate on the "class_id" field.
func ClassIDIn(vs ...int) predicate.Class_Lab_Status {
	return predicate.Class_Lab_Status(sql.FieldIn(FieldClassID, vs...))
}

// ClassIDNotIn applies the NotIn predicate on the "class_id" field.
func ClassIDNotIn(vs ...int) predicate.Class_Lab_Status {
	return predicate.Class_Lab_Status(sql.FieldNotIn(FieldClassID, vs...))
}

// LabIDEQ applies the EQ predicate on the "lab_id" field.
func LabIDEQ(v int) predicate.Class_Lab_Status {
	return predicate.Class_Lab_Status(sql.FieldEQ(FieldLabID, v))
}

// LabIDNEQ applies the NEQ predicate on the "lab_id" field.
func LabIDNEQ(v int) predicate.Class_Lab_Status {
	return predicate.Class_Lab_Status(sql.FieldNEQ(FieldLabID, v))
}

// LabIDIn applies the In predicate on the "lab_id" field.
func LabIDIn(vs ...int) predicate.Class_Lab_Status {
	return predicate.Class_Lab_Status(sql.FieldIn(FieldLabID, vs...))
}

// LabIDNotIn applies the NotIn predicate on the "lab_id" field.
func LabIDNotIn(vs ...int) predicate.Class_Lab_Status {
	return predicate.Class_Lab_Status(sql.FieldNotIn(FieldLabID, vs...))
}

// IsOpenEQ applies the EQ predicate on the "is_open" field.
func IsOpenEQ(v bool) predicate.Class_Lab_Status {
	return predicate.Class_Lab_Status(sql.FieldEQ(FieldIsOpen, v))
}

// IsOpenNEQ applies the NEQ predicate on the "is_open" field.
func IsOpenNEQ(v bool) predicate.Class_Lab_Status {
	return predicate.Class_Lab_Status(sql.FieldNEQ(FieldIsOpen, v))
}

// HasCourse applies the HasEdge predicate on the "course" edge.
func HasCourse() predicate.Class_Lab_Status {
	return predicate.Class_Lab_Status(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, CourseTable, CourseColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCourseWith applies the HasEdge predicate on the "course" edge with a given conditions (other predicates).
func HasCourseWith(preds ...predicate.Course) predicate.Class_Lab_Status {
	return predicate.Class_Lab_Status(func(s *sql.Selector) {
		step := newCourseStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasClass applies the HasEdge predicate on the "class" edge.
func HasClass() predicate.Class_Lab_Status {
	return predicate.Class_Lab_Status(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ClassTable, ClassColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasClassWith applies the HasEdge predicate on the "class" edge with a given conditions (other predicates).
func HasClassWith(preds ...predicate.Class) predicate.Class_Lab_Status {
	return predicate.Class_Lab_Status(func(s *sql.Selector) {
		step := newClassStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasLab applies the HasEdge predicate on the "lab" edge.
func HasLab() predicate.Class_Lab_Status {
	return predicate.Class_Lab_Status(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, LabTable, LabColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasLabWith applies the HasEdge predicate on the "lab" edge with a given conditions (other predicates).
func HasLabWith(preds ...predicate.Lab) predicate.Class_Lab_Status {
	return predicate.Class_Lab_Status(func(s *sql.Selector) {
		step := newLabStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Class_Lab_Status) predicate.Class_Lab_Status {
	return predicate.Class_Lab_Status(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Class_Lab_Status) predicate.Class_Lab_Status {
	return predicate.Class_Lab_Status(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Class_Lab_Status) predicate.Class_Lab_Status {
	return predicate.Class_Lab_Status(func(s *sql.Selector) {
		p(s.Not())
	})
}
