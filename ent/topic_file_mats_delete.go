// Code generated by ent, DO NOT EDIT.

package ent

import (
	"plms-backend/ent/predicate"
	"plms-backend/ent/topic_file_mats"
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TopicFileMatsDelete is the builder for deleting a Topic_File_Mats entity.
type TopicFileMatsDelete struct {
	config
	hooks    []Hook
	mutation *TopicFileMatsMutation
}

// Where appends a list predicates to the TopicFileMatsDelete builder.
func (tfmd *TopicFileMatsDelete) Where(ps ...predicate.Topic_File_Mats) *TopicFileMatsDelete {
	tfmd.mutation.Where(ps...)
	return tfmd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (tfmd *TopicFileMatsDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, tfmd.sqlExec, tfmd.mutation, tfmd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (tfmd *TopicFileMatsDelete) ExecX(ctx context.Context) int {
	n, err := tfmd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (tfmd *TopicFileMatsDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(topic_file_mats.Table, sqlgraph.NewFieldSpec(topic_file_mats.FieldID, field.TypeInt))
	if ps := tfmd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, tfmd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	tfmd.mutation.done = true
	return affected, err
}

// TopicFileMatsDeleteOne is the builder for deleting a single Topic_File_Mats entity.
type TopicFileMatsDeleteOne struct {
	tfmd *TopicFileMatsDelete
}

// Where appends a list predicates to the TopicFileMatsDelete builder.
func (tfmdo *TopicFileMatsDeleteOne) Where(ps ...predicate.Topic_File_Mats) *TopicFileMatsDeleteOne {
	tfmdo.tfmd.mutation.Where(ps...)
	return tfmdo
}

// Exec executes the deletion query.
func (tfmdo *TopicFileMatsDeleteOne) Exec(ctx context.Context) error {
	n, err := tfmdo.tfmd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{topic_file_mats.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (tfmdo *TopicFileMatsDeleteOne) ExecX(ctx context.Context) {
	if err := tfmdo.Exec(ctx); err != nil {
		panic(err)
	}
}
