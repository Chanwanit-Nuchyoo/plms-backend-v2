// Code generated by ent, DO NOT EDIT.

package ent

import (
	"plms-backend/ent/class"
	"plms-backend/ent/class_lab_status"
	"plms-backend/ent/course"
	"plms-backend/ent/lab"
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Class_Lab_Status is the model entity for the Class_Lab_Status schema.
type Class_Lab_Status struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CourseID holds the value of the "course_id" field.
	CourseID int `json:"course_id,omitempty"`
	// ClassID holds the value of the "class_id" field.
	ClassID int `json:"class_id,omitempty"`
	// LabID holds the value of the "lab_id" field.
	LabID int `json:"lab_id,omitempty"`
	// IsOpen holds the value of the "is_open" field.
	IsOpen bool `json:"is_open,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the Class_Lab_StatusQuery when eager-loading is set.
	Edges        Class_Lab_StatusEdges `json:"edges"`
	selectValues sql.SelectValues
}

// Class_Lab_StatusEdges holds the relations/edges for other nodes in the graph.
type Class_Lab_StatusEdges struct {
	// Course holds the value of the course edge.
	Course *Course `json:"course,omitempty"`
	// Class holds the value of the class edge.
	Class *Class `json:"class,omitempty"`
	// Lab holds the value of the lab edge.
	Lab *Lab `json:"lab,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// CourseOrErr returns the Course value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e Class_Lab_StatusEdges) CourseOrErr() (*Course, error) {
	if e.loadedTypes[0] {
		if e.Course == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: course.Label}
		}
		return e.Course, nil
	}
	return nil, &NotLoadedError{edge: "course"}
}

// ClassOrErr returns the Class value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e Class_Lab_StatusEdges) ClassOrErr() (*Class, error) {
	if e.loadedTypes[1] {
		if e.Class == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: class.Label}
		}
		return e.Class, nil
	}
	return nil, &NotLoadedError{edge: "class"}
}

// LabOrErr returns the Lab value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e Class_Lab_StatusEdges) LabOrErr() (*Lab, error) {
	if e.loadedTypes[2] {
		if e.Lab == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: lab.Label}
		}
		return e.Lab, nil
	}
	return nil, &NotLoadedError{edge: "lab"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Class_Lab_Status) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case class_lab_status.FieldIsOpen:
			values[i] = new(sql.NullBool)
		case class_lab_status.FieldID, class_lab_status.FieldCourseID, class_lab_status.FieldClassID, class_lab_status.FieldLabID:
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Class_Lab_Status fields.
func (cls *Class_Lab_Status) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case class_lab_status.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			cls.ID = int(value.Int64)
		case class_lab_status.FieldCourseID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field course_id", values[i])
			} else if value.Valid {
				cls.CourseID = int(value.Int64)
			}
		case class_lab_status.FieldClassID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field class_id", values[i])
			} else if value.Valid {
				cls.ClassID = int(value.Int64)
			}
		case class_lab_status.FieldLabID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field lab_id", values[i])
			} else if value.Valid {
				cls.LabID = int(value.Int64)
			}
		case class_lab_status.FieldIsOpen:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_open", values[i])
			} else if value.Valid {
				cls.IsOpen = value.Bool
			}
		default:
			cls.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Class_Lab_Status.
// This includes values selected through modifiers, order, etc.
func (cls *Class_Lab_Status) Value(name string) (ent.Value, error) {
	return cls.selectValues.Get(name)
}

// QueryCourse queries the "course" edge of the Class_Lab_Status entity.
func (cls *Class_Lab_Status) QueryCourse() *CourseQuery {
	return NewClassLabStatusClient(cls.config).QueryCourse(cls)
}

// QueryClass queries the "class" edge of the Class_Lab_Status entity.
func (cls *Class_Lab_Status) QueryClass() *ClassQuery {
	return NewClassLabStatusClient(cls.config).QueryClass(cls)
}

// QueryLab queries the "lab" edge of the Class_Lab_Status entity.
func (cls *Class_Lab_Status) QueryLab() *LabQuery {
	return NewClassLabStatusClient(cls.config).QueryLab(cls)
}

// Update returns a builder for updating this Class_Lab_Status.
// Note that you need to call Class_Lab_Status.Unwrap() before calling this method if this Class_Lab_Status
// was returned from a transaction, and the transaction was committed or rolled back.
func (cls *Class_Lab_Status) Update() *ClassLabStatusUpdateOne {
	return NewClassLabStatusClient(cls.config).UpdateOne(cls)
}

// Unwrap unwraps the Class_Lab_Status entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (cls *Class_Lab_Status) Unwrap() *Class_Lab_Status {
	_tx, ok := cls.config.driver.(*txDriver)
	if !ok {
		panic("ent: Class_Lab_Status is not a transactional entity")
	}
	cls.config.driver = _tx.drv
	return cls
}

// String implements the fmt.Stringer.
func (cls *Class_Lab_Status) String() string {
	var builder strings.Builder
	builder.WriteString("Class_Lab_Status(")
	builder.WriteString(fmt.Sprintf("id=%v, ", cls.ID))
	builder.WriteString("course_id=")
	builder.WriteString(fmt.Sprintf("%v", cls.CourseID))
	builder.WriteString(", ")
	builder.WriteString("class_id=")
	builder.WriteString(fmt.Sprintf("%v", cls.ClassID))
	builder.WriteString(", ")
	builder.WriteString("lab_id=")
	builder.WriteString(fmt.Sprintf("%v", cls.LabID))
	builder.WriteString(", ")
	builder.WriteString("is_open=")
	builder.WriteString(fmt.Sprintf("%v", cls.IsOpen))
	builder.WriteByte(')')
	return builder.String()
}

// Class_Lab_StatusSlice is a parsable slice of Class_Lab_Status.
type Class_Lab_StatusSlice []*Class_Lab_Status
