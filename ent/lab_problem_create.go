// Code generated by ent, DO NOT EDIT.

package ent

import (
	"plms-backend/ent/lab"
	"plms-backend/ent/lab_problem"
	"plms-backend/ent/testcase"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// LabProblemCreate is the builder for creating a Lab_Problem entity.
type LabProblemCreate struct {
	config
	mutation *LabProblemMutation
	hooks    []Hook
}

// SetLabID sets the "lab_id" field.
func (lpc *LabProblemCreate) SetLabID(i int) *LabProblemCreate {
	lpc.mutation.SetLabID(i)
	return lpc
}

// SetName sets the "name" field.
func (lpc *LabProblemCreate) SetName(s string) *LabProblemCreate {
	lpc.mutation.SetName(s)
	return lpc
}

// SetPrompt sets the "prompt" field.
func (lpc *LabProblemCreate) SetPrompt(s string) *LabProblemCreate {
	lpc.mutation.SetPrompt(s)
	return lpc
}

// SetFullScore sets the "full_score" field.
func (lpc *LabProblemCreate) SetFullScore(f float64) *LabProblemCreate {
	lpc.mutation.SetFullScore(f)
	return lpc
}

// SetNillableFullScore sets the "full_score" field if the given value is not nil.
func (lpc *LabProblemCreate) SetNillableFullScore(f *float64) *LabProblemCreate {
	if f != nil {
		lpc.SetFullScore(*f)
	}
	return lpc
}

// SetCreatedAt sets the "created_at" field.
func (lpc *LabProblemCreate) SetCreatedAt(t time.Time) *LabProblemCreate {
	lpc.mutation.SetCreatedAt(t)
	return lpc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (lpc *LabProblemCreate) SetNillableCreatedAt(t *time.Time) *LabProblemCreate {
	if t != nil {
		lpc.SetCreatedAt(*t)
	}
	return lpc
}

// SetUpdatedAt sets the "updated_at" field.
func (lpc *LabProblemCreate) SetUpdatedAt(t time.Time) *LabProblemCreate {
	lpc.mutation.SetUpdatedAt(t)
	return lpc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (lpc *LabProblemCreate) SetNillableUpdatedAt(t *time.Time) *LabProblemCreate {
	if t != nil {
		lpc.SetUpdatedAt(*t)
	}
	return lpc
}

// SetLab sets the "lab" edge to the Lab entity.
func (lpc *LabProblemCreate) SetLab(l *Lab) *LabProblemCreate {
	return lpc.SetLabID(l.ID)
}

// AddTestcaseIDs adds the "testcases" edge to the Testcase entity by IDs.
func (lpc *LabProblemCreate) AddTestcaseIDs(ids ...int) *LabProblemCreate {
	lpc.mutation.AddTestcaseIDs(ids...)
	return lpc
}

// AddTestcases adds the "testcases" edges to the Testcase entity.
func (lpc *LabProblemCreate) AddTestcases(t ...*Testcase) *LabProblemCreate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return lpc.AddTestcaseIDs(ids...)
}

// Mutation returns the LabProblemMutation object of the builder.
func (lpc *LabProblemCreate) Mutation() *LabProblemMutation {
	return lpc.mutation
}

// Save creates the Lab_Problem in the database.
func (lpc *LabProblemCreate) Save(ctx context.Context) (*Lab_Problem, error) {
	lpc.defaults()
	return withHooks(ctx, lpc.sqlSave, lpc.mutation, lpc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (lpc *LabProblemCreate) SaveX(ctx context.Context) *Lab_Problem {
	v, err := lpc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (lpc *LabProblemCreate) Exec(ctx context.Context) error {
	_, err := lpc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lpc *LabProblemCreate) ExecX(ctx context.Context) {
	if err := lpc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (lpc *LabProblemCreate) defaults() {
	if _, ok := lpc.mutation.CreatedAt(); !ok {
		v := lab_problem.DefaultCreatedAt
		lpc.mutation.SetCreatedAt(v)
	}
	if _, ok := lpc.mutation.UpdatedAt(); !ok {
		v := lab_problem.DefaultUpdatedAt
		lpc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (lpc *LabProblemCreate) check() error {
	if _, ok := lpc.mutation.LabID(); !ok {
		return &ValidationError{Name: "lab_id", err: errors.New(`ent: missing required field "Lab_Problem.lab_id"`)}
	}
	if _, ok := lpc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Lab_Problem.name"`)}
	}
	if v, ok := lpc.mutation.Name(); ok {
		if err := lab_problem.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Lab_Problem.name": %w`, err)}
		}
	}
	if _, ok := lpc.mutation.Prompt(); !ok {
		return &ValidationError{Name: "prompt", err: errors.New(`ent: missing required field "Lab_Problem.prompt"`)}
	}
	if v, ok := lpc.mutation.Prompt(); ok {
		if err := lab_problem.PromptValidator(v); err != nil {
			return &ValidationError{Name: "prompt", err: fmt.Errorf(`ent: validator failed for field "Lab_Problem.prompt": %w`, err)}
		}
	}
	if v, ok := lpc.mutation.FullScore(); ok {
		if err := lab_problem.FullScoreValidator(v); err != nil {
			return &ValidationError{Name: "full_score", err: fmt.Errorf(`ent: validator failed for field "Lab_Problem.full_score": %w`, err)}
		}
	}
	if _, ok := lpc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Lab_Problem.created_at"`)}
	}
	if _, ok := lpc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Lab_Problem.updated_at"`)}
	}
	if _, ok := lpc.mutation.LabID(); !ok {
		return &ValidationError{Name: "lab", err: errors.New(`ent: missing required edge "Lab_Problem.lab"`)}
	}
	return nil
}

func (lpc *LabProblemCreate) sqlSave(ctx context.Context) (*Lab_Problem, error) {
	if err := lpc.check(); err != nil {
		return nil, err
	}
	_node, _spec := lpc.createSpec()
	if err := sqlgraph.CreateNode(ctx, lpc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	lpc.mutation.id = &_node.ID
	lpc.mutation.done = true
	return _node, nil
}

func (lpc *LabProblemCreate) createSpec() (*Lab_Problem, *sqlgraph.CreateSpec) {
	var (
		_node = &Lab_Problem{config: lpc.config}
		_spec = sqlgraph.NewCreateSpec(lab_problem.Table, sqlgraph.NewFieldSpec(lab_problem.FieldID, field.TypeInt))
	)
	if value, ok := lpc.mutation.Name(); ok {
		_spec.SetField(lab_problem.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := lpc.mutation.Prompt(); ok {
		_spec.SetField(lab_problem.FieldPrompt, field.TypeString, value)
		_node.Prompt = value
	}
	if value, ok := lpc.mutation.FullScore(); ok {
		_spec.SetField(lab_problem.FieldFullScore, field.TypeFloat64, value)
		_node.FullScore = value
	}
	if value, ok := lpc.mutation.CreatedAt(); ok {
		_spec.SetField(lab_problem.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := lpc.mutation.UpdatedAt(); ok {
		_spec.SetField(lab_problem.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := lpc.mutation.LabIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   lab_problem.LabTable,
			Columns: []string{lab_problem.LabColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(lab.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.LabID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := lpc.mutation.TestcasesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   lab_problem.TestcasesTable,
			Columns: []string{lab_problem.TestcasesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(testcase.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// LabProblemCreateBulk is the builder for creating many Lab_Problem entities in bulk.
type LabProblemCreateBulk struct {
	config
	builders []*LabProblemCreate
}

// Save creates the Lab_Problem entities in the database.
func (lpcb *LabProblemCreateBulk) Save(ctx context.Context) ([]*Lab_Problem, error) {
	specs := make([]*sqlgraph.CreateSpec, len(lpcb.builders))
	nodes := make([]*Lab_Problem, len(lpcb.builders))
	mutators := make([]Mutator, len(lpcb.builders))
	for i := range lpcb.builders {
		func(i int, root context.Context) {
			builder := lpcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*LabProblemMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, lpcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, lpcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, lpcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (lpcb *LabProblemCreateBulk) SaveX(ctx context.Context) []*Lab_Problem {
	v, err := lpcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (lpcb *LabProblemCreateBulk) Exec(ctx context.Context) error {
	_, err := lpcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lpcb *LabProblemCreateBulk) ExecX(ctx context.Context) {
	if err := lpcb.Exec(ctx); err != nil {
		panic(err)
	}
}
