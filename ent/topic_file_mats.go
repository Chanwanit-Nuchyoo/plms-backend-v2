// Code generated by ent, DO NOT EDIT.

package ent

import (
	"plms-backend/ent/topic"
	"plms-backend/ent/topic_file_mats"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Topic_File_Mats is the model entity for the Topic_File_Mats schema.
type Topic_File_Mats struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// TopicID holds the value of the "topic_id" field.
	TopicID int `json:"topic_id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// FilePath holds the value of the "file_path" field.
	FilePath string `json:"file_path,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the Topic_File_MatsQuery when eager-loading is set.
	Edges        Topic_File_MatsEdges `json:"edges"`
	selectValues sql.SelectValues
}

// Topic_File_MatsEdges holds the relations/edges for other nodes in the graph.
type Topic_File_MatsEdges struct {
	// Topic holds the value of the topic edge.
	Topic *Topic `json:"topic,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// TopicOrErr returns the Topic value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e Topic_File_MatsEdges) TopicOrErr() (*Topic, error) {
	if e.loadedTypes[0] {
		if e.Topic == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: topic.Label}
		}
		return e.Topic, nil
	}
	return nil, &NotLoadedError{edge: "topic"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Topic_File_Mats) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case topic_file_mats.FieldID, topic_file_mats.FieldTopicID:
			values[i] = new(sql.NullInt64)
		case topic_file_mats.FieldName, topic_file_mats.FieldFilePath:
			values[i] = new(sql.NullString)
		case topic_file_mats.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Topic_File_Mats fields.
func (tfm *Topic_File_Mats) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case topic_file_mats.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			tfm.ID = int(value.Int64)
		case topic_file_mats.FieldTopicID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field topic_id", values[i])
			} else if value.Valid {
				tfm.TopicID = int(value.Int64)
			}
		case topic_file_mats.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				tfm.Name = value.String
			}
		case topic_file_mats.FieldFilePath:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field file_path", values[i])
			} else if value.Valid {
				tfm.FilePath = value.String
			}
		case topic_file_mats.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				tfm.CreatedAt = value.Time
			}
		default:
			tfm.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Topic_File_Mats.
// This includes values selected through modifiers, order, etc.
func (tfm *Topic_File_Mats) Value(name string) (ent.Value, error) {
	return tfm.selectValues.Get(name)
}

// QueryTopic queries the "topic" edge of the Topic_File_Mats entity.
func (tfm *Topic_File_Mats) QueryTopic() *TopicQuery {
	return NewTopicFileMatsClient(tfm.config).QueryTopic(tfm)
}

// Update returns a builder for updating this Topic_File_Mats.
// Note that you need to call Topic_File_Mats.Unwrap() before calling this method if this Topic_File_Mats
// was returned from a transaction, and the transaction was committed or rolled back.
func (tfm *Topic_File_Mats) Update() *TopicFileMatsUpdateOne {
	return NewTopicFileMatsClient(tfm.config).UpdateOne(tfm)
}

// Unwrap unwraps the Topic_File_Mats entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (tfm *Topic_File_Mats) Unwrap() *Topic_File_Mats {
	_tx, ok := tfm.config.driver.(*txDriver)
	if !ok {
		panic("ent: Topic_File_Mats is not a transactional entity")
	}
	tfm.config.driver = _tx.drv
	return tfm
}

// String implements the fmt.Stringer.
func (tfm *Topic_File_Mats) String() string {
	var builder strings.Builder
	builder.WriteString("Topic_File_Mats(")
	builder.WriteString(fmt.Sprintf("id=%v, ", tfm.ID))
	builder.WriteString("topic_id=")
	builder.WriteString(fmt.Sprintf("%v", tfm.TopicID))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(tfm.Name)
	builder.WriteString(", ")
	builder.WriteString("file_path=")
	builder.WriteString(tfm.FilePath)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(tfm.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Topic_File_MatsSlice is a parsable slice of Topic_File_Mats.
type Topic_File_MatsSlice []*Topic_File_Mats
