// Code generated by ent, DO NOT EDIT.

package ent

import (
	"plms-backend/ent/class"
	"plms-backend/ent/class_user_role"
	"plms-backend/ent/course"
	"plms-backend/ent/lab_problem_submission"
	"plms-backend/ent/post"
	"plms-backend/ent/predicate"
	"plms-backend/ent/user"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserUpdate is the builder for updating User entities.
type UserUpdate struct {
	config
	hooks    []Hook
	mutation *UserMutation
}

// Where appends a list predicates to the UserUpdate builder.
func (uu *UserUpdate) Where(ps ...predicate.User) *UserUpdate {
	uu.mutation.Where(ps...)
	return uu
}

// SetUsername sets the "username" field.
func (uu *UserUpdate) SetUsername(s string) *UserUpdate {
	uu.mutation.SetUsername(s)
	return uu
}

// SetEmail sets the "email" field.
func (uu *UserUpdate) SetEmail(s string) *UserUpdate {
	uu.mutation.SetEmail(s)
	return uu
}

// SetPassword sets the "password" field.
func (uu *UserUpdate) SetPassword(s string) *UserUpdate {
	uu.mutation.SetPassword(s)
	return uu
}

// SetName sets the "name" field.
func (uu *UserUpdate) SetName(s string) *UserUpdate {
	uu.mutation.SetName(s)
	return uu
}

// SetImagePath sets the "image_path" field.
func (uu *UserUpdate) SetImagePath(s string) *UserUpdate {
	uu.mutation.SetImagePath(s)
	return uu
}

// SetNillableImagePath sets the "image_path" field if the given value is not nil.
func (uu *UserUpdate) SetNillableImagePath(s *string) *UserUpdate {
	if s != nil {
		uu.SetImagePath(*s)
	}
	return uu
}

// ClearImagePath clears the value of the "image_path" field.
func (uu *UserUpdate) ClearImagePath() *UserUpdate {
	uu.mutation.ClearImagePath()
	return uu
}

// SetLastOnline sets the "last_online" field.
func (uu *UserUpdate) SetLastOnline(t time.Time) *UserUpdate {
	uu.mutation.SetLastOnline(t)
	return uu
}

// SetNillableLastOnline sets the "last_online" field if the given value is not nil.
func (uu *UserUpdate) SetNillableLastOnline(t *time.Time) *UserUpdate {
	if t != nil {
		uu.SetLastOnline(*t)
	}
	return uu
}

// ClearLastOnline clears the value of the "last_online" field.
func (uu *UserUpdate) ClearLastOnline() *UserUpdate {
	uu.mutation.ClearLastOnline()
	return uu
}

// SetCreatedAt sets the "created_at" field.
func (uu *UserUpdate) SetCreatedAt(t time.Time) *UserUpdate {
	uu.mutation.SetCreatedAt(t)
	return uu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (uu *UserUpdate) SetNillableCreatedAt(t *time.Time) *UserUpdate {
	if t != nil {
		uu.SetCreatedAt(*t)
	}
	return uu
}

// ClearCreatedAt clears the value of the "created_at" field.
func (uu *UserUpdate) ClearCreatedAt() *UserUpdate {
	uu.mutation.ClearCreatedAt()
	return uu
}

// SetUpdatedAt sets the "updated_at" field.
func (uu *UserUpdate) SetUpdatedAt(t time.Time) *UserUpdate {
	uu.mutation.SetUpdatedAt(t)
	return uu
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (uu *UserUpdate) SetNillableUpdatedAt(t *time.Time) *UserUpdate {
	if t != nil {
		uu.SetUpdatedAt(*t)
	}
	return uu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (uu *UserUpdate) ClearUpdatedAt() *UserUpdate {
	uu.mutation.ClearUpdatedAt()
	return uu
}

// SetIsAdmin sets the "is_admin" field.
func (uu *UserUpdate) SetIsAdmin(b bool) *UserUpdate {
	uu.mutation.SetIsAdmin(b)
	return uu
}

// SetNillableIsAdmin sets the "is_admin" field if the given value is not nil.
func (uu *UserUpdate) SetNillableIsAdmin(b *bool) *UserUpdate {
	if b != nil {
		uu.SetIsAdmin(*b)
	}
	return uu
}

// AddCourseIDs adds the "courses" edge to the Course entity by IDs.
func (uu *UserUpdate) AddCourseIDs(ids ...int) *UserUpdate {
	uu.mutation.AddCourseIDs(ids...)
	return uu
}

// AddCourses adds the "courses" edges to the Course entity.
func (uu *UserUpdate) AddCourses(c ...*Course) *UserUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return uu.AddCourseIDs(ids...)
}

// AddOwnedClassIDs adds the "owned_classes" edge to the Class entity by IDs.
func (uu *UserUpdate) AddOwnedClassIDs(ids ...int) *UserUpdate {
	uu.mutation.AddOwnedClassIDs(ids...)
	return uu
}

// AddOwnedClasses adds the "owned_classes" edges to the Class entity.
func (uu *UserUpdate) AddOwnedClasses(c ...*Class) *UserUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return uu.AddOwnedClassIDs(ids...)
}

// AddJoinedClassIDs adds the "joined_classes" edge to the Class_User_Role entity by IDs.
func (uu *UserUpdate) AddJoinedClassIDs(ids ...int) *UserUpdate {
	uu.mutation.AddJoinedClassIDs(ids...)
	return uu
}

// AddJoinedClasses adds the "joined_classes" edges to the Class_User_Role entity.
func (uu *UserUpdate) AddJoinedClasses(c ...*Class_User_Role) *UserUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return uu.AddJoinedClassIDs(ids...)
}

// AddOwnedPostIDs adds the "owned_posts" edge to the Post entity by IDs.
func (uu *UserUpdate) AddOwnedPostIDs(ids ...int) *UserUpdate {
	uu.mutation.AddOwnedPostIDs(ids...)
	return uu
}

// AddOwnedPosts adds the "owned_posts" edges to the Post entity.
func (uu *UserUpdate) AddOwnedPosts(p ...*Post) *UserUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return uu.AddOwnedPostIDs(ids...)
}

// AddLabProblemSubmissionIDs adds the "lab_problem_submissions" edge to the Lab_Problem_Submission entity by IDs.
func (uu *UserUpdate) AddLabProblemSubmissionIDs(ids ...int) *UserUpdate {
	uu.mutation.AddLabProblemSubmissionIDs(ids...)
	return uu
}

// AddLabProblemSubmissions adds the "lab_problem_submissions" edges to the Lab_Problem_Submission entity.
func (uu *UserUpdate) AddLabProblemSubmissions(l ...*Lab_Problem_Submission) *UserUpdate {
	ids := make([]int, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return uu.AddLabProblemSubmissionIDs(ids...)
}

// Mutation returns the UserMutation object of the builder.
func (uu *UserUpdate) Mutation() *UserMutation {
	return uu.mutation
}

// ClearCourses clears all "courses" edges to the Course entity.
func (uu *UserUpdate) ClearCourses() *UserUpdate {
	uu.mutation.ClearCourses()
	return uu
}

// RemoveCourseIDs removes the "courses" edge to Course entities by IDs.
func (uu *UserUpdate) RemoveCourseIDs(ids ...int) *UserUpdate {
	uu.mutation.RemoveCourseIDs(ids...)
	return uu
}

// RemoveCourses removes "courses" edges to Course entities.
func (uu *UserUpdate) RemoveCourses(c ...*Course) *UserUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return uu.RemoveCourseIDs(ids...)
}

// ClearOwnedClasses clears all "owned_classes" edges to the Class entity.
func (uu *UserUpdate) ClearOwnedClasses() *UserUpdate {
	uu.mutation.ClearOwnedClasses()
	return uu
}

// RemoveOwnedClassIDs removes the "owned_classes" edge to Class entities by IDs.
func (uu *UserUpdate) RemoveOwnedClassIDs(ids ...int) *UserUpdate {
	uu.mutation.RemoveOwnedClassIDs(ids...)
	return uu
}

// RemoveOwnedClasses removes "owned_classes" edges to Class entities.
func (uu *UserUpdate) RemoveOwnedClasses(c ...*Class) *UserUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return uu.RemoveOwnedClassIDs(ids...)
}

// ClearJoinedClasses clears all "joined_classes" edges to the Class_User_Role entity.
func (uu *UserUpdate) ClearJoinedClasses() *UserUpdate {
	uu.mutation.ClearJoinedClasses()
	return uu
}

// RemoveJoinedClassIDs removes the "joined_classes" edge to Class_User_Role entities by IDs.
func (uu *UserUpdate) RemoveJoinedClassIDs(ids ...int) *UserUpdate {
	uu.mutation.RemoveJoinedClassIDs(ids...)
	return uu
}

// RemoveJoinedClasses removes "joined_classes" edges to Class_User_Role entities.
func (uu *UserUpdate) RemoveJoinedClasses(c ...*Class_User_Role) *UserUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return uu.RemoveJoinedClassIDs(ids...)
}

// ClearOwnedPosts clears all "owned_posts" edges to the Post entity.
func (uu *UserUpdate) ClearOwnedPosts() *UserUpdate {
	uu.mutation.ClearOwnedPosts()
	return uu
}

// RemoveOwnedPostIDs removes the "owned_posts" edge to Post entities by IDs.
func (uu *UserUpdate) RemoveOwnedPostIDs(ids ...int) *UserUpdate {
	uu.mutation.RemoveOwnedPostIDs(ids...)
	return uu
}

// RemoveOwnedPosts removes "owned_posts" edges to Post entities.
func (uu *UserUpdate) RemoveOwnedPosts(p ...*Post) *UserUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return uu.RemoveOwnedPostIDs(ids...)
}

// ClearLabProblemSubmissions clears all "lab_problem_submissions" edges to the Lab_Problem_Submission entity.
func (uu *UserUpdate) ClearLabProblemSubmissions() *UserUpdate {
	uu.mutation.ClearLabProblemSubmissions()
	return uu
}

// RemoveLabProblemSubmissionIDs removes the "lab_problem_submissions" edge to Lab_Problem_Submission entities by IDs.
func (uu *UserUpdate) RemoveLabProblemSubmissionIDs(ids ...int) *UserUpdate {
	uu.mutation.RemoveLabProblemSubmissionIDs(ids...)
	return uu
}

// RemoveLabProblemSubmissions removes "lab_problem_submissions" edges to Lab_Problem_Submission entities.
func (uu *UserUpdate) RemoveLabProblemSubmissions(l ...*Lab_Problem_Submission) *UserUpdate {
	ids := make([]int, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return uu.RemoveLabProblemSubmissionIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (uu *UserUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, uu.sqlSave, uu.mutation, uu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uu *UserUpdate) SaveX(ctx context.Context) int {
	affected, err := uu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (uu *UserUpdate) Exec(ctx context.Context) error {
	_, err := uu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uu *UserUpdate) ExecX(ctx context.Context) {
	if err := uu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uu *UserUpdate) check() error {
	if v, ok := uu.mutation.Username(); ok {
		if err := user.UsernameValidator(v); err != nil {
			return &ValidationError{Name: "username", err: fmt.Errorf(`ent: validator failed for field "User.username": %w`, err)}
		}
	}
	if v, ok := uu.mutation.Password(); ok {
		if err := user.PasswordValidator(v); err != nil {
			return &ValidationError{Name: "password", err: fmt.Errorf(`ent: validator failed for field "User.password": %w`, err)}
		}
	}
	if v, ok := uu.mutation.Name(); ok {
		if err := user.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "User.name": %w`, err)}
		}
	}
	return nil
}

func (uu *UserUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := uu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(user.Table, user.Columns, sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt))
	if ps := uu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uu.mutation.Username(); ok {
		_spec.SetField(user.FieldUsername, field.TypeString, value)
	}
	if value, ok := uu.mutation.Email(); ok {
		_spec.SetField(user.FieldEmail, field.TypeString, value)
	}
	if value, ok := uu.mutation.Password(); ok {
		_spec.SetField(user.FieldPassword, field.TypeString, value)
	}
	if value, ok := uu.mutation.Name(); ok {
		_spec.SetField(user.FieldName, field.TypeString, value)
	}
	if value, ok := uu.mutation.ImagePath(); ok {
		_spec.SetField(user.FieldImagePath, field.TypeString, value)
	}
	if uu.mutation.ImagePathCleared() {
		_spec.ClearField(user.FieldImagePath, field.TypeString)
	}
	if value, ok := uu.mutation.LastOnline(); ok {
		_spec.SetField(user.FieldLastOnline, field.TypeTime, value)
	}
	if uu.mutation.LastOnlineCleared() {
		_spec.ClearField(user.FieldLastOnline, field.TypeTime)
	}
	if value, ok := uu.mutation.CreatedAt(); ok {
		_spec.SetField(user.FieldCreatedAt, field.TypeTime, value)
	}
	if uu.mutation.CreatedAtCleared() {
		_spec.ClearField(user.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := uu.mutation.UpdatedAt(); ok {
		_spec.SetField(user.FieldUpdatedAt, field.TypeTime, value)
	}
	if uu.mutation.UpdatedAtCleared() {
		_spec.ClearField(user.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := uu.mutation.IsAdmin(); ok {
		_spec.SetField(user.FieldIsAdmin, field.TypeBool, value)
	}
	if uu.mutation.CoursesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CoursesTable,
			Columns: []string{user.CoursesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(course.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedCoursesIDs(); len(nodes) > 0 && !uu.mutation.CoursesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CoursesTable,
			Columns: []string{user.CoursesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(course.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.CoursesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CoursesTable,
			Columns: []string{user.CoursesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(course.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.OwnedClassesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.OwnedClassesTable,
			Columns: []string{user.OwnedClassesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(class.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedOwnedClassesIDs(); len(nodes) > 0 && !uu.mutation.OwnedClassesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.OwnedClassesTable,
			Columns: []string{user.OwnedClassesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(class.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.OwnedClassesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.OwnedClassesTable,
			Columns: []string{user.OwnedClassesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(class.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.JoinedClassesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.JoinedClassesTable,
			Columns: []string{user.JoinedClassesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(class_user_role.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedJoinedClassesIDs(); len(nodes) > 0 && !uu.mutation.JoinedClassesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.JoinedClassesTable,
			Columns: []string{user.JoinedClassesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(class_user_role.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.JoinedClassesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.JoinedClassesTable,
			Columns: []string{user.JoinedClassesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(class_user_role.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.OwnedPostsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.OwnedPostsTable,
			Columns: []string{user.OwnedPostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedOwnedPostsIDs(); len(nodes) > 0 && !uu.mutation.OwnedPostsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.OwnedPostsTable,
			Columns: []string{user.OwnedPostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.OwnedPostsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.OwnedPostsTable,
			Columns: []string{user.OwnedPostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.LabProblemSubmissionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.LabProblemSubmissionsTable,
			Columns: []string{user.LabProblemSubmissionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(lab_problem_submission.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedLabProblemSubmissionsIDs(); len(nodes) > 0 && !uu.mutation.LabProblemSubmissionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.LabProblemSubmissionsTable,
			Columns: []string{user.LabProblemSubmissionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(lab_problem_submission.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.LabProblemSubmissionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.LabProblemSubmissionsTable,
			Columns: []string{user.LabProblemSubmissionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(lab_problem_submission.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, uu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	uu.mutation.done = true
	return n, nil
}

// UserUpdateOne is the builder for updating a single User entity.
type UserUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserMutation
}

// SetUsername sets the "username" field.
func (uuo *UserUpdateOne) SetUsername(s string) *UserUpdateOne {
	uuo.mutation.SetUsername(s)
	return uuo
}

// SetEmail sets the "email" field.
func (uuo *UserUpdateOne) SetEmail(s string) *UserUpdateOne {
	uuo.mutation.SetEmail(s)
	return uuo
}

// SetPassword sets the "password" field.
func (uuo *UserUpdateOne) SetPassword(s string) *UserUpdateOne {
	uuo.mutation.SetPassword(s)
	return uuo
}

// SetName sets the "name" field.
func (uuo *UserUpdateOne) SetName(s string) *UserUpdateOne {
	uuo.mutation.SetName(s)
	return uuo
}

// SetImagePath sets the "image_path" field.
func (uuo *UserUpdateOne) SetImagePath(s string) *UserUpdateOne {
	uuo.mutation.SetImagePath(s)
	return uuo
}

// SetNillableImagePath sets the "image_path" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableImagePath(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetImagePath(*s)
	}
	return uuo
}

// ClearImagePath clears the value of the "image_path" field.
func (uuo *UserUpdateOne) ClearImagePath() *UserUpdateOne {
	uuo.mutation.ClearImagePath()
	return uuo
}

// SetLastOnline sets the "last_online" field.
func (uuo *UserUpdateOne) SetLastOnline(t time.Time) *UserUpdateOne {
	uuo.mutation.SetLastOnline(t)
	return uuo
}

// SetNillableLastOnline sets the "last_online" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableLastOnline(t *time.Time) *UserUpdateOne {
	if t != nil {
		uuo.SetLastOnline(*t)
	}
	return uuo
}

// ClearLastOnline clears the value of the "last_online" field.
func (uuo *UserUpdateOne) ClearLastOnline() *UserUpdateOne {
	uuo.mutation.ClearLastOnline()
	return uuo
}

// SetCreatedAt sets the "created_at" field.
func (uuo *UserUpdateOne) SetCreatedAt(t time.Time) *UserUpdateOne {
	uuo.mutation.SetCreatedAt(t)
	return uuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableCreatedAt(t *time.Time) *UserUpdateOne {
	if t != nil {
		uuo.SetCreatedAt(*t)
	}
	return uuo
}

// ClearCreatedAt clears the value of the "created_at" field.
func (uuo *UserUpdateOne) ClearCreatedAt() *UserUpdateOne {
	uuo.mutation.ClearCreatedAt()
	return uuo
}

// SetUpdatedAt sets the "updated_at" field.
func (uuo *UserUpdateOne) SetUpdatedAt(t time.Time) *UserUpdateOne {
	uuo.mutation.SetUpdatedAt(t)
	return uuo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableUpdatedAt(t *time.Time) *UserUpdateOne {
	if t != nil {
		uuo.SetUpdatedAt(*t)
	}
	return uuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (uuo *UserUpdateOne) ClearUpdatedAt() *UserUpdateOne {
	uuo.mutation.ClearUpdatedAt()
	return uuo
}

// SetIsAdmin sets the "is_admin" field.
func (uuo *UserUpdateOne) SetIsAdmin(b bool) *UserUpdateOne {
	uuo.mutation.SetIsAdmin(b)
	return uuo
}

// SetNillableIsAdmin sets the "is_admin" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableIsAdmin(b *bool) *UserUpdateOne {
	if b != nil {
		uuo.SetIsAdmin(*b)
	}
	return uuo
}

// AddCourseIDs adds the "courses" edge to the Course entity by IDs.
func (uuo *UserUpdateOne) AddCourseIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.AddCourseIDs(ids...)
	return uuo
}

// AddCourses adds the "courses" edges to the Course entity.
func (uuo *UserUpdateOne) AddCourses(c ...*Course) *UserUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return uuo.AddCourseIDs(ids...)
}

// AddOwnedClassIDs adds the "owned_classes" edge to the Class entity by IDs.
func (uuo *UserUpdateOne) AddOwnedClassIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.AddOwnedClassIDs(ids...)
	return uuo
}

// AddOwnedClasses adds the "owned_classes" edges to the Class entity.
func (uuo *UserUpdateOne) AddOwnedClasses(c ...*Class) *UserUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return uuo.AddOwnedClassIDs(ids...)
}

// AddJoinedClassIDs adds the "joined_classes" edge to the Class_User_Role entity by IDs.
func (uuo *UserUpdateOne) AddJoinedClassIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.AddJoinedClassIDs(ids...)
	return uuo
}

// AddJoinedClasses adds the "joined_classes" edges to the Class_User_Role entity.
func (uuo *UserUpdateOne) AddJoinedClasses(c ...*Class_User_Role) *UserUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return uuo.AddJoinedClassIDs(ids...)
}

// AddOwnedPostIDs adds the "owned_posts" edge to the Post entity by IDs.
func (uuo *UserUpdateOne) AddOwnedPostIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.AddOwnedPostIDs(ids...)
	return uuo
}

// AddOwnedPosts adds the "owned_posts" edges to the Post entity.
func (uuo *UserUpdateOne) AddOwnedPosts(p ...*Post) *UserUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return uuo.AddOwnedPostIDs(ids...)
}

// AddLabProblemSubmissionIDs adds the "lab_problem_submissions" edge to the Lab_Problem_Submission entity by IDs.
func (uuo *UserUpdateOne) AddLabProblemSubmissionIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.AddLabProblemSubmissionIDs(ids...)
	return uuo
}

// AddLabProblemSubmissions adds the "lab_problem_submissions" edges to the Lab_Problem_Submission entity.
func (uuo *UserUpdateOne) AddLabProblemSubmissions(l ...*Lab_Problem_Submission) *UserUpdateOne {
	ids := make([]int, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return uuo.AddLabProblemSubmissionIDs(ids...)
}

// Mutation returns the UserMutation object of the builder.
func (uuo *UserUpdateOne) Mutation() *UserMutation {
	return uuo.mutation
}

// ClearCourses clears all "courses" edges to the Course entity.
func (uuo *UserUpdateOne) ClearCourses() *UserUpdateOne {
	uuo.mutation.ClearCourses()
	return uuo
}

// RemoveCourseIDs removes the "courses" edge to Course entities by IDs.
func (uuo *UserUpdateOne) RemoveCourseIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.RemoveCourseIDs(ids...)
	return uuo
}

// RemoveCourses removes "courses" edges to Course entities.
func (uuo *UserUpdateOne) RemoveCourses(c ...*Course) *UserUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return uuo.RemoveCourseIDs(ids...)
}

// ClearOwnedClasses clears all "owned_classes" edges to the Class entity.
func (uuo *UserUpdateOne) ClearOwnedClasses() *UserUpdateOne {
	uuo.mutation.ClearOwnedClasses()
	return uuo
}

// RemoveOwnedClassIDs removes the "owned_classes" edge to Class entities by IDs.
func (uuo *UserUpdateOne) RemoveOwnedClassIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.RemoveOwnedClassIDs(ids...)
	return uuo
}

// RemoveOwnedClasses removes "owned_classes" edges to Class entities.
func (uuo *UserUpdateOne) RemoveOwnedClasses(c ...*Class) *UserUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return uuo.RemoveOwnedClassIDs(ids...)
}

// ClearJoinedClasses clears all "joined_classes" edges to the Class_User_Role entity.
func (uuo *UserUpdateOne) ClearJoinedClasses() *UserUpdateOne {
	uuo.mutation.ClearJoinedClasses()
	return uuo
}

// RemoveJoinedClassIDs removes the "joined_classes" edge to Class_User_Role entities by IDs.
func (uuo *UserUpdateOne) RemoveJoinedClassIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.RemoveJoinedClassIDs(ids...)
	return uuo
}

// RemoveJoinedClasses removes "joined_classes" edges to Class_User_Role entities.
func (uuo *UserUpdateOne) RemoveJoinedClasses(c ...*Class_User_Role) *UserUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return uuo.RemoveJoinedClassIDs(ids...)
}

// ClearOwnedPosts clears all "owned_posts" edges to the Post entity.
func (uuo *UserUpdateOne) ClearOwnedPosts() *UserUpdateOne {
	uuo.mutation.ClearOwnedPosts()
	return uuo
}

// RemoveOwnedPostIDs removes the "owned_posts" edge to Post entities by IDs.
func (uuo *UserUpdateOne) RemoveOwnedPostIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.RemoveOwnedPostIDs(ids...)
	return uuo
}

// RemoveOwnedPosts removes "owned_posts" edges to Post entities.
func (uuo *UserUpdateOne) RemoveOwnedPosts(p ...*Post) *UserUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return uuo.RemoveOwnedPostIDs(ids...)
}

// ClearLabProblemSubmissions clears all "lab_problem_submissions" edges to the Lab_Problem_Submission entity.
func (uuo *UserUpdateOne) ClearLabProblemSubmissions() *UserUpdateOne {
	uuo.mutation.ClearLabProblemSubmissions()
	return uuo
}

// RemoveLabProblemSubmissionIDs removes the "lab_problem_submissions" edge to Lab_Problem_Submission entities by IDs.
func (uuo *UserUpdateOne) RemoveLabProblemSubmissionIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.RemoveLabProblemSubmissionIDs(ids...)
	return uuo
}

// RemoveLabProblemSubmissions removes "lab_problem_submissions" edges to Lab_Problem_Submission entities.
func (uuo *UserUpdateOne) RemoveLabProblemSubmissions(l ...*Lab_Problem_Submission) *UserUpdateOne {
	ids := make([]int, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return uuo.RemoveLabProblemSubmissionIDs(ids...)
}

// Where appends a list predicates to the UserUpdate builder.
func (uuo *UserUpdateOne) Where(ps ...predicate.User) *UserUpdateOne {
	uuo.mutation.Where(ps...)
	return uuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (uuo *UserUpdateOne) Select(field string, fields ...string) *UserUpdateOne {
	uuo.fields = append([]string{field}, fields...)
	return uuo
}

// Save executes the query and returns the updated User entity.
func (uuo *UserUpdateOne) Save(ctx context.Context) (*User, error) {
	return withHooks(ctx, uuo.sqlSave, uuo.mutation, uuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uuo *UserUpdateOne) SaveX(ctx context.Context) *User {
	node, err := uuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (uuo *UserUpdateOne) Exec(ctx context.Context) error {
	_, err := uuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uuo *UserUpdateOne) ExecX(ctx context.Context) {
	if err := uuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uuo *UserUpdateOne) check() error {
	if v, ok := uuo.mutation.Username(); ok {
		if err := user.UsernameValidator(v); err != nil {
			return &ValidationError{Name: "username", err: fmt.Errorf(`ent: validator failed for field "User.username": %w`, err)}
		}
	}
	if v, ok := uuo.mutation.Password(); ok {
		if err := user.PasswordValidator(v); err != nil {
			return &ValidationError{Name: "password", err: fmt.Errorf(`ent: validator failed for field "User.password": %w`, err)}
		}
	}
	if v, ok := uuo.mutation.Name(); ok {
		if err := user.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "User.name": %w`, err)}
		}
	}
	return nil
}

func (uuo *UserUpdateOne) sqlSave(ctx context.Context) (_node *User, err error) {
	if err := uuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(user.Table, user.Columns, sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt))
	id, ok := uuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "User.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := uuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, user.FieldID)
		for _, f := range fields {
			if !user.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != user.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := uuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uuo.mutation.Username(); ok {
		_spec.SetField(user.FieldUsername, field.TypeString, value)
	}
	if value, ok := uuo.mutation.Email(); ok {
		_spec.SetField(user.FieldEmail, field.TypeString, value)
	}
	if value, ok := uuo.mutation.Password(); ok {
		_spec.SetField(user.FieldPassword, field.TypeString, value)
	}
	if value, ok := uuo.mutation.Name(); ok {
		_spec.SetField(user.FieldName, field.TypeString, value)
	}
	if value, ok := uuo.mutation.ImagePath(); ok {
		_spec.SetField(user.FieldImagePath, field.TypeString, value)
	}
	if uuo.mutation.ImagePathCleared() {
		_spec.ClearField(user.FieldImagePath, field.TypeString)
	}
	if value, ok := uuo.mutation.LastOnline(); ok {
		_spec.SetField(user.FieldLastOnline, field.TypeTime, value)
	}
	if uuo.mutation.LastOnlineCleared() {
		_spec.ClearField(user.FieldLastOnline, field.TypeTime)
	}
	if value, ok := uuo.mutation.CreatedAt(); ok {
		_spec.SetField(user.FieldCreatedAt, field.TypeTime, value)
	}
	if uuo.mutation.CreatedAtCleared() {
		_spec.ClearField(user.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := uuo.mutation.UpdatedAt(); ok {
		_spec.SetField(user.FieldUpdatedAt, field.TypeTime, value)
	}
	if uuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(user.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := uuo.mutation.IsAdmin(); ok {
		_spec.SetField(user.FieldIsAdmin, field.TypeBool, value)
	}
	if uuo.mutation.CoursesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CoursesTable,
			Columns: []string{user.CoursesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(course.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedCoursesIDs(); len(nodes) > 0 && !uuo.mutation.CoursesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CoursesTable,
			Columns: []string{user.CoursesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(course.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.CoursesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CoursesTable,
			Columns: []string{user.CoursesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(course.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.OwnedClassesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.OwnedClassesTable,
			Columns: []string{user.OwnedClassesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(class.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedOwnedClassesIDs(); len(nodes) > 0 && !uuo.mutation.OwnedClassesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.OwnedClassesTable,
			Columns: []string{user.OwnedClassesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(class.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.OwnedClassesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.OwnedClassesTable,
			Columns: []string{user.OwnedClassesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(class.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.JoinedClassesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.JoinedClassesTable,
			Columns: []string{user.JoinedClassesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(class_user_role.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedJoinedClassesIDs(); len(nodes) > 0 && !uuo.mutation.JoinedClassesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.JoinedClassesTable,
			Columns: []string{user.JoinedClassesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(class_user_role.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.JoinedClassesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.JoinedClassesTable,
			Columns: []string{user.JoinedClassesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(class_user_role.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.OwnedPostsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.OwnedPostsTable,
			Columns: []string{user.OwnedPostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedOwnedPostsIDs(); len(nodes) > 0 && !uuo.mutation.OwnedPostsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.OwnedPostsTable,
			Columns: []string{user.OwnedPostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.OwnedPostsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.OwnedPostsTable,
			Columns: []string{user.OwnedPostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.LabProblemSubmissionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.LabProblemSubmissionsTable,
			Columns: []string{user.LabProblemSubmissionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(lab_problem_submission.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedLabProblemSubmissionsIDs(); len(nodes) > 0 && !uuo.mutation.LabProblemSubmissionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.LabProblemSubmissionsTable,
			Columns: []string{user.LabProblemSubmissionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(lab_problem_submission.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.LabProblemSubmissionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.LabProblemSubmissionsTable,
			Columns: []string{user.LabProblemSubmissionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(lab_problem_submission.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &User{config: uuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, uuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	uuo.mutation.done = true
	return _node, nil
}
