// Code generated by ent, DO NOT EDIT.

package ent

import (
	"plms-backend/ent/lab_problem"
	"plms-backend/ent/testcase"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Testcase is the model entity for the Testcase schema.
type Testcase struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// LabProblemID holds the value of the "lab_problem_id" field.
	LabProblemID int `json:"lab_problem_id,omitempty"`
	// Input holds the value of the "input" field.
	Input string `json:"input,omitempty"`
	// Output holds the value of the "output" field.
	Output string `json:"output,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TestcaseQuery when eager-loading is set.
	Edges        TestcaseEdges `json:"edges"`
	selectValues sql.SelectValues
}

// TestcaseEdges holds the relations/edges for other nodes in the graph.
type TestcaseEdges struct {
	// LabProblem holds the value of the lab_problem edge.
	LabProblem *Lab_Problem `json:"lab_problem,omitempty"`
	// TestcaseSubmissions holds the value of the testcase_submissions edge.
	TestcaseSubmissions []*Testcase_Submission `json:"testcase_submissions,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// LabProblemOrErr returns the LabProblem value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TestcaseEdges) LabProblemOrErr() (*Lab_Problem, error) {
	if e.loadedTypes[0] {
		if e.LabProblem == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: lab_problem.Label}
		}
		return e.LabProblem, nil
	}
	return nil, &NotLoadedError{edge: "lab_problem"}
}

// TestcaseSubmissionsOrErr returns the TestcaseSubmissions value or an error if the edge
// was not loaded in eager-loading.
func (e TestcaseEdges) TestcaseSubmissionsOrErr() ([]*Testcase_Submission, error) {
	if e.loadedTypes[1] {
		return e.TestcaseSubmissions, nil
	}
	return nil, &NotLoadedError{edge: "testcase_submissions"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Testcase) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case testcase.FieldID, testcase.FieldLabProblemID:
			values[i] = new(sql.NullInt64)
		case testcase.FieldInput, testcase.FieldOutput:
			values[i] = new(sql.NullString)
		case testcase.FieldCreatedAt, testcase.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Testcase fields.
func (t *Testcase) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case testcase.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			t.ID = int(value.Int64)
		case testcase.FieldLabProblemID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field lab_problem_id", values[i])
			} else if value.Valid {
				t.LabProblemID = int(value.Int64)
			}
		case testcase.FieldInput:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field input", values[i])
			} else if value.Valid {
				t.Input = value.String
			}
		case testcase.FieldOutput:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field output", values[i])
			} else if value.Valid {
				t.Output = value.String
			}
		case testcase.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				t.CreatedAt = value.Time
			}
		case testcase.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				t.UpdatedAt = value.Time
			}
		default:
			t.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Testcase.
// This includes values selected through modifiers, order, etc.
func (t *Testcase) Value(name string) (ent.Value, error) {
	return t.selectValues.Get(name)
}

// QueryLabProblem queries the "lab_problem" edge of the Testcase entity.
func (t *Testcase) QueryLabProblem() *LabProblemQuery {
	return NewTestcaseClient(t.config).QueryLabProblem(t)
}

// QueryTestcaseSubmissions queries the "testcase_submissions" edge of the Testcase entity.
func (t *Testcase) QueryTestcaseSubmissions() *TestcaseSubmissionQuery {
	return NewTestcaseClient(t.config).QueryTestcaseSubmissions(t)
}

// Update returns a builder for updating this Testcase.
// Note that you need to call Testcase.Unwrap() before calling this method if this Testcase
// was returned from a transaction, and the transaction was committed or rolled back.
func (t *Testcase) Update() *TestcaseUpdateOne {
	return NewTestcaseClient(t.config).UpdateOne(t)
}

// Unwrap unwraps the Testcase entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (t *Testcase) Unwrap() *Testcase {
	_tx, ok := t.config.driver.(*txDriver)
	if !ok {
		panic("ent: Testcase is not a transactional entity")
	}
	t.config.driver = _tx.drv
	return t
}

// String implements the fmt.Stringer.
func (t *Testcase) String() string {
	var builder strings.Builder
	builder.WriteString("Testcase(")
	builder.WriteString(fmt.Sprintf("id=%v, ", t.ID))
	builder.WriteString("lab_problem_id=")
	builder.WriteString(fmt.Sprintf("%v", t.LabProblemID))
	builder.WriteString(", ")
	builder.WriteString("input=")
	builder.WriteString(t.Input)
	builder.WriteString(", ")
	builder.WriteString("output=")
	builder.WriteString(t.Output)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(t.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(t.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Testcases is a parsable slice of Testcase.
type Testcases []*Testcase
