// Code generated by ent, DO NOT EDIT.

package user

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the user type in the database.
	Label = "user"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldUsername holds the string denoting the username field in the database.
	FieldUsername = "username"
	// FieldEmail holds the string denoting the email field in the database.
	FieldEmail = "email"
	// FieldPassword holds the string denoting the password field in the database.
	FieldPassword = "password"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldImagePath holds the string denoting the image_path field in the database.
	FieldImagePath = "image_path"
	// FieldLastOnline holds the string denoting the last_online field in the database.
	FieldLastOnline = "last_online"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldIsAdmin holds the string denoting the is_admin field in the database.
	FieldIsAdmin = "is_admin"
	// EdgeCourses holds the string denoting the courses edge name in mutations.
	EdgeCourses = "courses"
	// EdgeOwnedClasses holds the string denoting the owned_classes edge name in mutations.
	EdgeOwnedClasses = "owned_classes"
	// EdgeJoinedClasses holds the string denoting the joined_classes edge name in mutations.
	EdgeJoinedClasses = "joined_classes"
	// EdgeOwnedPosts holds the string denoting the owned_posts edge name in mutations.
	EdgeOwnedPosts = "owned_posts"
	// EdgeLabProblemSubmissions holds the string denoting the lab_problem_submissions edge name in mutations.
	EdgeLabProblemSubmissions = "lab_problem_submissions"
	// Table holds the table name of the user in the database.
	Table = "users"
	// CoursesTable is the table that holds the courses relation/edge.
	CoursesTable = "courses"
	// CoursesInverseTable is the table name for the Course entity.
	// It exists in this package in order to avoid circular dependency with the "course" package.
	CoursesInverseTable = "courses"
	// CoursesColumn is the table column denoting the courses relation/edge.
	CoursesColumn = "owner_id"
	// OwnedClassesTable is the table that holds the owned_classes relation/edge.
	OwnedClassesTable = "classes"
	// OwnedClassesInverseTable is the table name for the Class entity.
	// It exists in this package in order to avoid circular dependency with the "class" package.
	OwnedClassesInverseTable = "classes"
	// OwnedClassesColumn is the table column denoting the owned_classes relation/edge.
	OwnedClassesColumn = "owner_id"
	// JoinedClassesTable is the table that holds the joined_classes relation/edge.
	JoinedClassesTable = "class_user_roles"
	// JoinedClassesInverseTable is the table name for the Class_User_Role entity.
	// It exists in this package in order to avoid circular dependency with the "class_user_role" package.
	JoinedClassesInverseTable = "class_user_roles"
	// JoinedClassesColumn is the table column denoting the joined_classes relation/edge.
	JoinedClassesColumn = "user_id"
	// OwnedPostsTable is the table that holds the owned_posts relation/edge.
	OwnedPostsTable = "posts"
	// OwnedPostsInverseTable is the table name for the Post entity.
	// It exists in this package in order to avoid circular dependency with the "post" package.
	OwnedPostsInverseTable = "posts"
	// OwnedPostsColumn is the table column denoting the owned_posts relation/edge.
	OwnedPostsColumn = "author_id"
	// LabProblemSubmissionsTable is the table that holds the lab_problem_submissions relation/edge.
	LabProblemSubmissionsTable = "lab_problem_submissions"
	// LabProblemSubmissionsInverseTable is the table name for the Lab_Problem_Submission entity.
	// It exists in this package in order to avoid circular dependency with the "lab_problem_submission" package.
	LabProblemSubmissionsInverseTable = "lab_problem_submissions"
	// LabProblemSubmissionsColumn is the table column denoting the lab_problem_submissions relation/edge.
	LabProblemSubmissionsColumn = "owner_id"
)

// Columns holds all SQL columns for user fields.
var Columns = []string{
	FieldID,
	FieldUsername,
	FieldEmail,
	FieldPassword,
	FieldName,
	FieldImagePath,
	FieldLastOnline,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldIsAdmin,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// UsernameValidator is a validator for the "username" field. It is called by the builders before save.
	UsernameValidator func(string) error
	// PasswordValidator is a validator for the "password" field. It is called by the builders before save.
	PasswordValidator func(string) error
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt time.Time
	// DefaultIsAdmin holds the default value on creation for the "is_admin" field.
	DefaultIsAdmin bool
)

// OrderOption defines the ordering options for the User queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByUsername orders the results by the username field.
func ByUsername(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUsername, opts...).ToFunc()
}

// ByEmail orders the results by the email field.
func ByEmail(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmail, opts...).ToFunc()
}

// ByPassword orders the results by the password field.
func ByPassword(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPassword, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByImagePath orders the results by the image_path field.
func ByImagePath(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldImagePath, opts...).ToFunc()
}

// ByLastOnline orders the results by the last_online field.
func ByLastOnline(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLastOnline, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByIsAdmin orders the results by the is_admin field.
func ByIsAdmin(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsAdmin, opts...).ToFunc()
}

// ByCoursesCount orders the results by courses count.
func ByCoursesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newCoursesStep(), opts...)
	}
}

// ByCourses orders the results by courses terms.
func ByCourses(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCoursesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByOwnedClassesCount orders the results by owned_classes count.
func ByOwnedClassesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newOwnedClassesStep(), opts...)
	}
}

// ByOwnedClasses orders the results by owned_classes terms.
func ByOwnedClasses(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOwnedClassesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByJoinedClassesCount orders the results by joined_classes count.
func ByJoinedClassesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newJoinedClassesStep(), opts...)
	}
}

// ByJoinedClasses orders the results by joined_classes terms.
func ByJoinedClasses(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newJoinedClassesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByOwnedPostsCount orders the results by owned_posts count.
func ByOwnedPostsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newOwnedPostsStep(), opts...)
	}
}

// ByOwnedPosts orders the results by owned_posts terms.
func ByOwnedPosts(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOwnedPostsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByLabProblemSubmissionsCount orders the results by lab_problem_submissions count.
func ByLabProblemSubmissionsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newLabProblemSubmissionsStep(), opts...)
	}
}

// ByLabProblemSubmissions orders the results by lab_problem_submissions terms.
func ByLabProblemSubmissions(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newLabProblemSubmissionsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newCoursesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CoursesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, CoursesTable, CoursesColumn),
	)
}
func newOwnedClassesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OwnedClassesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, OwnedClassesTable, OwnedClassesColumn),
	)
}
func newJoinedClassesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(JoinedClassesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, JoinedClassesTable, JoinedClassesColumn),
	)
}
func newOwnedPostsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OwnedPostsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, OwnedPostsTable, OwnedPostsColumn),
	)
}
func newLabProblemSubmissionsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(LabProblemSubmissionsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, LabProblemSubmissionsTable, LabProblemSubmissionsColumn),
	)
}
