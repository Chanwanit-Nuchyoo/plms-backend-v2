// Code generated by ent, DO NOT EDIT.

package testcase

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the testcase type in the database.
	Label = "testcase"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldLabProblemID holds the string denoting the lab_problem_id field in the database.
	FieldLabProblemID = "lab_problem_id"
	// FieldInput holds the string denoting the input field in the database.
	FieldInput = "input"
	// FieldOutput holds the string denoting the output field in the database.
	FieldOutput = "output"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeLabProblem holds the string denoting the lab_problem edge name in mutations.
	EdgeLabProblem = "lab_problem"
	// EdgeTestcaseSubmissions holds the string denoting the testcase_submissions edge name in mutations.
	EdgeTestcaseSubmissions = "testcase_submissions"
	// Table holds the table name of the testcase in the database.
	Table = "testcases"
	// LabProblemTable is the table that holds the lab_problem relation/edge.
	LabProblemTable = "testcases"
	// LabProblemInverseTable is the table name for the Lab_Problem entity.
	// It exists in this package in order to avoid circular dependency with the "lab_problem" package.
	LabProblemInverseTable = "lab_problems"
	// LabProblemColumn is the table column denoting the lab_problem relation/edge.
	LabProblemColumn = "lab_problem_id"
	// TestcaseSubmissionsTable is the table that holds the testcase_submissions relation/edge.
	TestcaseSubmissionsTable = "testcase_submissions"
	// TestcaseSubmissionsInverseTable is the table name for the Testcase_Submission entity.
	// It exists in this package in order to avoid circular dependency with the "testcase_submission" package.
	TestcaseSubmissionsInverseTable = "testcase_submissions"
	// TestcaseSubmissionsColumn is the table column denoting the testcase_submissions relation/edge.
	TestcaseSubmissionsColumn = "testcase_id"
)

// Columns holds all SQL columns for testcase fields.
var Columns = []string{
	FieldID,
	FieldLabProblemID,
	FieldInput,
	FieldOutput,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt time.Time
)

// OrderOption defines the ordering options for the Testcase queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByLabProblemID orders the results by the lab_problem_id field.
func ByLabProblemID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLabProblemID, opts...).ToFunc()
}

// ByInput orders the results by the input field.
func ByInput(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldInput, opts...).ToFunc()
}

// ByOutput orders the results by the output field.
func ByOutput(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOutput, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByLabProblemField orders the results by lab_problem field.
func ByLabProblemField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newLabProblemStep(), sql.OrderByField(field, opts...))
	}
}

// ByTestcaseSubmissionsCount orders the results by testcase_submissions count.
func ByTestcaseSubmissionsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newTestcaseSubmissionsStep(), opts...)
	}
}

// ByTestcaseSubmissions orders the results by testcase_submissions terms.
func ByTestcaseSubmissions(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTestcaseSubmissionsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newLabProblemStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(LabProblemInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, LabProblemTable, LabProblemColumn),
	)
}
func newTestcaseSubmissionsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TestcaseSubmissionsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, TestcaseSubmissionsTable, TestcaseSubmissionsColumn),
	)
}
