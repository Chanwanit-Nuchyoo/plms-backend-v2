// Code generated by ent, DO NOT EDIT.

package testcase

import (
	"plms-backend/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Testcase {
	return predicate.Testcase(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Testcase {
	return predicate.Testcase(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Testcase {
	return predicate.Testcase(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Testcase {
	return predicate.Testcase(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Testcase {
	return predicate.Testcase(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Testcase {
	return predicate.Testcase(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Testcase {
	return predicate.Testcase(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Testcase {
	return predicate.Testcase(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Testcase {
	return predicate.Testcase(sql.FieldLTE(FieldID, id))
}

// LabProblemID applies equality check predicate on the "lab_problem_id" field. It's identical to LabProblemIDEQ.
func LabProblemID(v int) predicate.Testcase {
	return predicate.Testcase(sql.FieldEQ(FieldLabProblemID, v))
}

// Input applies equality check predicate on the "input" field. It's identical to InputEQ.
func Input(v string) predicate.Testcase {
	return predicate.Testcase(sql.FieldEQ(FieldInput, v))
}

// Output applies equality check predicate on the "output" field. It's identical to OutputEQ.
func Output(v string) predicate.Testcase {
	return predicate.Testcase(sql.FieldEQ(FieldOutput, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Testcase {
	return predicate.Testcase(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Testcase {
	return predicate.Testcase(sql.FieldEQ(FieldUpdatedAt, v))
}

// LabProblemIDEQ applies the EQ predicate on the "lab_problem_id" field.
func LabProblemIDEQ(v int) predicate.Testcase {
	return predicate.Testcase(sql.FieldEQ(FieldLabProblemID, v))
}

// LabProblemIDNEQ applies the NEQ predicate on the "lab_problem_id" field.
func LabProblemIDNEQ(v int) predicate.Testcase {
	return predicate.Testcase(sql.FieldNEQ(FieldLabProblemID, v))
}

// LabProblemIDIn applies the In predicate on the "lab_problem_id" field.
func LabProblemIDIn(vs ...int) predicate.Testcase {
	return predicate.Testcase(sql.FieldIn(FieldLabProblemID, vs...))
}

// LabProblemIDNotIn applies the NotIn predicate on the "lab_problem_id" field.
func LabProblemIDNotIn(vs ...int) predicate.Testcase {
	return predicate.Testcase(sql.FieldNotIn(FieldLabProblemID, vs...))
}

// InputEQ applies the EQ predicate on the "input" field.
func InputEQ(v string) predicate.Testcase {
	return predicate.Testcase(sql.FieldEQ(FieldInput, v))
}

// InputNEQ applies the NEQ predicate on the "input" field.
func InputNEQ(v string) predicate.Testcase {
	return predicate.Testcase(sql.FieldNEQ(FieldInput, v))
}

// InputIn applies the In predicate on the "input" field.
func InputIn(vs ...string) predicate.Testcase {
	return predicate.Testcase(sql.FieldIn(FieldInput, vs...))
}

// InputNotIn applies the NotIn predicate on the "input" field.
func InputNotIn(vs ...string) predicate.Testcase {
	return predicate.Testcase(sql.FieldNotIn(FieldInput, vs...))
}

// InputGT applies the GT predicate on the "input" field.
func InputGT(v string) predicate.Testcase {
	return predicate.Testcase(sql.FieldGT(FieldInput, v))
}

// InputGTE applies the GTE predicate on the "input" field.
func InputGTE(v string) predicate.Testcase {
	return predicate.Testcase(sql.FieldGTE(FieldInput, v))
}

// InputLT applies the LT predicate on the "input" field.
func InputLT(v string) predicate.Testcase {
	return predicate.Testcase(sql.FieldLT(FieldInput, v))
}

// InputLTE applies the LTE predicate on the "input" field.
func InputLTE(v string) predicate.Testcase {
	return predicate.Testcase(sql.FieldLTE(FieldInput, v))
}

// InputContains applies the Contains predicate on the "input" field.
func InputContains(v string) predicate.Testcase {
	return predicate.Testcase(sql.FieldContains(FieldInput, v))
}

// InputHasPrefix applies the HasPrefix predicate on the "input" field.
func InputHasPrefix(v string) predicate.Testcase {
	return predicate.Testcase(sql.FieldHasPrefix(FieldInput, v))
}

// InputHasSuffix applies the HasSuffix predicate on the "input" field.
func InputHasSuffix(v string) predicate.Testcase {
	return predicate.Testcase(sql.FieldHasSuffix(FieldInput, v))
}

// InputEqualFold applies the EqualFold predicate on the "input" field.
func InputEqualFold(v string) predicate.Testcase {
	return predicate.Testcase(sql.FieldEqualFold(FieldInput, v))
}

// InputContainsFold applies the ContainsFold predicate on the "input" field.
func InputContainsFold(v string) predicate.Testcase {
	return predicate.Testcase(sql.FieldContainsFold(FieldInput, v))
}

// OutputEQ applies the EQ predicate on the "output" field.
func OutputEQ(v string) predicate.Testcase {
	return predicate.Testcase(sql.FieldEQ(FieldOutput, v))
}

// OutputNEQ applies the NEQ predicate on the "output" field.
func OutputNEQ(v string) predicate.Testcase {
	return predicate.Testcase(sql.FieldNEQ(FieldOutput, v))
}

// OutputIn applies the In predicate on the "output" field.
func OutputIn(vs ...string) predicate.Testcase {
	return predicate.Testcase(sql.FieldIn(FieldOutput, vs...))
}

// OutputNotIn applies the NotIn predicate on the "output" field.
func OutputNotIn(vs ...string) predicate.Testcase {
	return predicate.Testcase(sql.FieldNotIn(FieldOutput, vs...))
}

// OutputGT applies the GT predicate on the "output" field.
func OutputGT(v string) predicate.Testcase {
	return predicate.Testcase(sql.FieldGT(FieldOutput, v))
}

// OutputGTE applies the GTE predicate on the "output" field.
func OutputGTE(v string) predicate.Testcase {
	return predicate.Testcase(sql.FieldGTE(FieldOutput, v))
}

// OutputLT applies the LT predicate on the "output" field.
func OutputLT(v string) predicate.Testcase {
	return predicate.Testcase(sql.FieldLT(FieldOutput, v))
}

// OutputLTE applies the LTE predicate on the "output" field.
func OutputLTE(v string) predicate.Testcase {
	return predicate.Testcase(sql.FieldLTE(FieldOutput, v))
}

// OutputContains applies the Contains predicate on the "output" field.
func OutputContains(v string) predicate.Testcase {
	return predicate.Testcase(sql.FieldContains(FieldOutput, v))
}

// OutputHasPrefix applies the HasPrefix predicate on the "output" field.
func OutputHasPrefix(v string) predicate.Testcase {
	return predicate.Testcase(sql.FieldHasPrefix(FieldOutput, v))
}

// OutputHasSuffix applies the HasSuffix predicate on the "output" field.
func OutputHasSuffix(v string) predicate.Testcase {
	return predicate.Testcase(sql.FieldHasSuffix(FieldOutput, v))
}

// OutputEqualFold applies the EqualFold predicate on the "output" field.
func OutputEqualFold(v string) predicate.Testcase {
	return predicate.Testcase(sql.FieldEqualFold(FieldOutput, v))
}

// OutputContainsFold applies the ContainsFold predicate on the "output" field.
func OutputContainsFold(v string) predicate.Testcase {
	return predicate.Testcase(sql.FieldContainsFold(FieldOutput, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Testcase {
	return predicate.Testcase(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Testcase {
	return predicate.Testcase(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Testcase {
	return predicate.Testcase(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Testcase {
	return predicate.Testcase(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Testcase {
	return predicate.Testcase(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Testcase {
	return predicate.Testcase(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Testcase {
	return predicate.Testcase(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Testcase {
	return predicate.Testcase(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Testcase {
	return predicate.Testcase(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Testcase {
	return predicate.Testcase(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Testcase {
	return predicate.Testcase(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Testcase {
	return predicate.Testcase(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Testcase {
	return predicate.Testcase(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Testcase {
	return predicate.Testcase(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Testcase {
	return predicate.Testcase(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Testcase {
	return predicate.Testcase(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasLabProblem applies the HasEdge predicate on the "lab_problem" edge.
func HasLabProblem() predicate.Testcase {
	return predicate.Testcase(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, LabProblemTable, LabProblemColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasLabProblemWith applies the HasEdge predicate on the "lab_problem" edge with a given conditions (other predicates).
func HasLabProblemWith(preds ...predicate.Lab_Problem) predicate.Testcase {
	return predicate.Testcase(func(s *sql.Selector) {
		step := newLabProblemStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasTestcaseSubmissions applies the HasEdge predicate on the "testcase_submissions" edge.
func HasTestcaseSubmissions() predicate.Testcase {
	return predicate.Testcase(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, TestcaseSubmissionsTable, TestcaseSubmissionsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTestcaseSubmissionsWith applies the HasEdge predicate on the "testcase_submissions" edge with a given conditions (other predicates).
func HasTestcaseSubmissionsWith(preds ...predicate.Testcase_Submission) predicate.Testcase {
	return predicate.Testcase(func(s *sql.Selector) {
		step := newTestcaseSubmissionsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Testcase) predicate.Testcase {
	return predicate.Testcase(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Testcase) predicate.Testcase {
	return predicate.Testcase(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Testcase) predicate.Testcase {
	return predicate.Testcase(func(s *sql.Selector) {
		p(s.Not())
	})
}
