// Code generated by ent, DO NOT EDIT.

package testcase_submission

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the testcase_submission type in the database.
	Label = "testcase_submission"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldSubmissionID holds the string denoting the submission_id field in the database.
	FieldSubmissionID = "submission_id"
	// FieldTestcaseID holds the string denoting the testcase_id field in the database.
	FieldTestcaseID = "testcase_id"
	// FieldInput holds the string denoting the input field in the database.
	FieldInput = "input"
	// FieldExpectedOutput holds the string denoting the expected_output field in the database.
	FieldExpectedOutput = "expected_output"
	// FieldActualOutput holds the string denoting the actual_output field in the database.
	FieldActualOutput = "actual_output"
	// FieldIsPassed holds the string denoting the is_passed field in the database.
	FieldIsPassed = "is_passed"
	// FieldScore holds the string denoting the score field in the database.
	FieldScore = "score"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeTestcase holds the string denoting the testcase edge name in mutations.
	EdgeTestcase = "testcase"
	// EdgeSubmission holds the string denoting the submission edge name in mutations.
	EdgeSubmission = "submission"
	// Table holds the table name of the testcase_submission in the database.
	Table = "testcase_submissions"
	// TestcaseTable is the table that holds the testcase relation/edge.
	TestcaseTable = "testcase_submissions"
	// TestcaseInverseTable is the table name for the Testcase entity.
	// It exists in this package in order to avoid circular dependency with the "testcase" package.
	TestcaseInverseTable = "testcases"
	// TestcaseColumn is the table column denoting the testcase relation/edge.
	TestcaseColumn = "testcase_id"
	// SubmissionTable is the table that holds the submission relation/edge.
	SubmissionTable = "testcase_submissions"
	// SubmissionInverseTable is the table name for the Lab_Problem_Submission entity.
	// It exists in this package in order to avoid circular dependency with the "lab_problem_submission" package.
	SubmissionInverseTable = "lab_problem_submissions"
	// SubmissionColumn is the table column denoting the submission relation/edge.
	SubmissionColumn = "submission_id"
)

// Columns holds all SQL columns for testcase_submission fields.
var Columns = []string{
	FieldID,
	FieldSubmissionID,
	FieldTestcaseID,
	FieldInput,
	FieldExpectedOutput,
	FieldActualOutput,
	FieldIsPassed,
	FieldScore,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt time.Time
)

// OrderOption defines the ordering options for the Testcase_Submission queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// BySubmissionID orders the results by the submission_id field.
func BySubmissionID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSubmissionID, opts...).ToFunc()
}

// ByTestcaseID orders the results by the testcase_id field.
func ByTestcaseID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTestcaseID, opts...).ToFunc()
}

// ByInput orders the results by the input field.
func ByInput(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldInput, opts...).ToFunc()
}

// ByExpectedOutput orders the results by the expected_output field.
func ByExpectedOutput(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldExpectedOutput, opts...).ToFunc()
}

// ByActualOutput orders the results by the actual_output field.
func ByActualOutput(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldActualOutput, opts...).ToFunc()
}

// ByIsPassed orders the results by the is_passed field.
func ByIsPassed(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsPassed, opts...).ToFunc()
}

// ByScore orders the results by the score field.
func ByScore(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldScore, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByTestcaseField orders the results by testcase field.
func ByTestcaseField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTestcaseStep(), sql.OrderByField(field, opts...))
	}
}

// BySubmissionField orders the results by submission field.
func BySubmissionField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSubmissionStep(), sql.OrderByField(field, opts...))
	}
}
func newTestcaseStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TestcaseInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, TestcaseTable, TestcaseColumn),
	)
}
func newSubmissionStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SubmissionInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, SubmissionTable, SubmissionColumn),
	)
}
