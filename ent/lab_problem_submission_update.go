// Code generated by ent, DO NOT EDIT.

package ent

import (
	"plms-backend/ent/lab_problem_submission"
	"plms-backend/ent/predicate"
	"plms-backend/ent/testcase_submission"
	"plms-backend/ent/user"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// LabProblemSubmissionUpdate is the builder for updating Lab_Problem_Submission entities.
type LabProblemSubmissionUpdate struct {
	config
	hooks    []Hook
	mutation *LabProblemSubmissionMutation
}

// Where appends a list predicates to the LabProblemSubmissionUpdate builder.
func (lpsu *LabProblemSubmissionUpdate) Where(ps ...predicate.Lab_Problem_Submission) *LabProblemSubmissionUpdate {
	lpsu.mutation.Where(ps...)
	return lpsu
}

// SetOwnerID sets the "owner_id" field.
func (lpsu *LabProblemSubmissionUpdate) SetOwnerID(i int) *LabProblemSubmissionUpdate {
	lpsu.mutation.SetOwnerID(i)
	return lpsu
}

// SetLabProblemID sets the "lab_problem_id" field.
func (lpsu *LabProblemSubmissionUpdate) SetLabProblemID(i int) *LabProblemSubmissionUpdate {
	lpsu.mutation.ResetLabProblemID()
	lpsu.mutation.SetLabProblemID(i)
	return lpsu
}

// AddLabProblemID adds i to the "lab_problem_id" field.
func (lpsu *LabProblemSubmissionUpdate) AddLabProblemID(i int) *LabProblemSubmissionUpdate {
	lpsu.mutation.AddLabProblemID(i)
	return lpsu
}

// SetCode sets the "code" field.
func (lpsu *LabProblemSubmissionUpdate) SetCode(s string) *LabProblemSubmissionUpdate {
	lpsu.mutation.SetCode(s)
	return lpsu
}

// SetScore sets the "score" field.
func (lpsu *LabProblemSubmissionUpdate) SetScore(f float64) *LabProblemSubmissionUpdate {
	lpsu.mutation.ResetScore()
	lpsu.mutation.SetScore(f)
	return lpsu
}

// AddScore adds f to the "score" field.
func (lpsu *LabProblemSubmissionUpdate) AddScore(f float64) *LabProblemSubmissionUpdate {
	lpsu.mutation.AddScore(f)
	return lpsu
}

// SetFeedback sets the "feedback" field.
func (lpsu *LabProblemSubmissionUpdate) SetFeedback(s string) *LabProblemSubmissionUpdate {
	lpsu.mutation.SetFeedback(s)
	return lpsu
}

// SetNillableFeedback sets the "feedback" field if the given value is not nil.
func (lpsu *LabProblemSubmissionUpdate) SetNillableFeedback(s *string) *LabProblemSubmissionUpdate {
	if s != nil {
		lpsu.SetFeedback(*s)
	}
	return lpsu
}

// ClearFeedback clears the value of the "feedback" field.
func (lpsu *LabProblemSubmissionUpdate) ClearFeedback() *LabProblemSubmissionUpdate {
	lpsu.mutation.ClearFeedback()
	return lpsu
}

// SetInstructorScore sets the "instructor_score" field.
func (lpsu *LabProblemSubmissionUpdate) SetInstructorScore(f float64) *LabProblemSubmissionUpdate {
	lpsu.mutation.ResetInstructorScore()
	lpsu.mutation.SetInstructorScore(f)
	return lpsu
}

// AddInstructorScore adds f to the "instructor_score" field.
func (lpsu *LabProblemSubmissionUpdate) AddInstructorScore(f float64) *LabProblemSubmissionUpdate {
	lpsu.mutation.AddInstructorScore(f)
	return lpsu
}

// SetCreatedAt sets the "created_at" field.
func (lpsu *LabProblemSubmissionUpdate) SetCreatedAt(t time.Time) *LabProblemSubmissionUpdate {
	lpsu.mutation.SetCreatedAt(t)
	return lpsu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (lpsu *LabProblemSubmissionUpdate) SetNillableCreatedAt(t *time.Time) *LabProblemSubmissionUpdate {
	if t != nil {
		lpsu.SetCreatedAt(*t)
	}
	return lpsu
}

// SetUpdatedAt sets the "updated_at" field.
func (lpsu *LabProblemSubmissionUpdate) SetUpdatedAt(t time.Time) *LabProblemSubmissionUpdate {
	lpsu.mutation.SetUpdatedAt(t)
	return lpsu
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (lpsu *LabProblemSubmissionUpdate) SetNillableUpdatedAt(t *time.Time) *LabProblemSubmissionUpdate {
	if t != nil {
		lpsu.SetUpdatedAt(*t)
	}
	return lpsu
}

// SetOwner sets the "owner" edge to the User entity.
func (lpsu *LabProblemSubmissionUpdate) SetOwner(u *User) *LabProblemSubmissionUpdate {
	return lpsu.SetOwnerID(u.ID)
}

// AddTestcaseSubmissionIDs adds the "testcase_submissions" edge to the Testcase_Submission entity by IDs.
func (lpsu *LabProblemSubmissionUpdate) AddTestcaseSubmissionIDs(ids ...int) *LabProblemSubmissionUpdate {
	lpsu.mutation.AddTestcaseSubmissionIDs(ids...)
	return lpsu
}

// AddTestcaseSubmissions adds the "testcase_submissions" edges to the Testcase_Submission entity.
func (lpsu *LabProblemSubmissionUpdate) AddTestcaseSubmissions(t ...*Testcase_Submission) *LabProblemSubmissionUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return lpsu.AddTestcaseSubmissionIDs(ids...)
}

// Mutation returns the LabProblemSubmissionMutation object of the builder.
func (lpsu *LabProblemSubmissionUpdate) Mutation() *LabProblemSubmissionMutation {
	return lpsu.mutation
}

// ClearOwner clears the "owner" edge to the User entity.
func (lpsu *LabProblemSubmissionUpdate) ClearOwner() *LabProblemSubmissionUpdate {
	lpsu.mutation.ClearOwner()
	return lpsu
}

// ClearTestcaseSubmissions clears all "testcase_submissions" edges to the Testcase_Submission entity.
func (lpsu *LabProblemSubmissionUpdate) ClearTestcaseSubmissions() *LabProblemSubmissionUpdate {
	lpsu.mutation.ClearTestcaseSubmissions()
	return lpsu
}

// RemoveTestcaseSubmissionIDs removes the "testcase_submissions" edge to Testcase_Submission entities by IDs.
func (lpsu *LabProblemSubmissionUpdate) RemoveTestcaseSubmissionIDs(ids ...int) *LabProblemSubmissionUpdate {
	lpsu.mutation.RemoveTestcaseSubmissionIDs(ids...)
	return lpsu
}

// RemoveTestcaseSubmissions removes "testcase_submissions" edges to Testcase_Submission entities.
func (lpsu *LabProblemSubmissionUpdate) RemoveTestcaseSubmissions(t ...*Testcase_Submission) *LabProblemSubmissionUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return lpsu.RemoveTestcaseSubmissionIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (lpsu *LabProblemSubmissionUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, lpsu.sqlSave, lpsu.mutation, lpsu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (lpsu *LabProblemSubmissionUpdate) SaveX(ctx context.Context) int {
	affected, err := lpsu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (lpsu *LabProblemSubmissionUpdate) Exec(ctx context.Context) error {
	_, err := lpsu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lpsu *LabProblemSubmissionUpdate) ExecX(ctx context.Context) {
	if err := lpsu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (lpsu *LabProblemSubmissionUpdate) check() error {
	if v, ok := lpsu.mutation.Score(); ok {
		if err := lab_problem_submission.ScoreValidator(v); err != nil {
			return &ValidationError{Name: "score", err: fmt.Errorf(`ent: validator failed for field "Lab_Problem_Submission.score": %w`, err)}
		}
	}
	if v, ok := lpsu.mutation.InstructorScore(); ok {
		if err := lab_problem_submission.InstructorScoreValidator(v); err != nil {
			return &ValidationError{Name: "instructor_score", err: fmt.Errorf(`ent: validator failed for field "Lab_Problem_Submission.instructor_score": %w`, err)}
		}
	}
	if _, ok := lpsu.mutation.OwnerID(); lpsu.mutation.OwnerCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Lab_Problem_Submission.owner"`)
	}
	return nil
}

func (lpsu *LabProblemSubmissionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := lpsu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(lab_problem_submission.Table, lab_problem_submission.Columns, sqlgraph.NewFieldSpec(lab_problem_submission.FieldID, field.TypeInt))
	if ps := lpsu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := lpsu.mutation.LabProblemID(); ok {
		_spec.SetField(lab_problem_submission.FieldLabProblemID, field.TypeInt, value)
	}
	if value, ok := lpsu.mutation.AddedLabProblemID(); ok {
		_spec.AddField(lab_problem_submission.FieldLabProblemID, field.TypeInt, value)
	}
	if value, ok := lpsu.mutation.Code(); ok {
		_spec.SetField(lab_problem_submission.FieldCode, field.TypeString, value)
	}
	if value, ok := lpsu.mutation.Score(); ok {
		_spec.SetField(lab_problem_submission.FieldScore, field.TypeFloat64, value)
	}
	if value, ok := lpsu.mutation.AddedScore(); ok {
		_spec.AddField(lab_problem_submission.FieldScore, field.TypeFloat64, value)
	}
	if value, ok := lpsu.mutation.Feedback(); ok {
		_spec.SetField(lab_problem_submission.FieldFeedback, field.TypeString, value)
	}
	if lpsu.mutation.FeedbackCleared() {
		_spec.ClearField(lab_problem_submission.FieldFeedback, field.TypeString)
	}
	if value, ok := lpsu.mutation.InstructorScore(); ok {
		_spec.SetField(lab_problem_submission.FieldInstructorScore, field.TypeFloat64, value)
	}
	if value, ok := lpsu.mutation.AddedInstructorScore(); ok {
		_spec.AddField(lab_problem_submission.FieldInstructorScore, field.TypeFloat64, value)
	}
	if value, ok := lpsu.mutation.CreatedAt(); ok {
		_spec.SetField(lab_problem_submission.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := lpsu.mutation.UpdatedAt(); ok {
		_spec.SetField(lab_problem_submission.FieldUpdatedAt, field.TypeTime, value)
	}
	if lpsu.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   lab_problem_submission.OwnerTable,
			Columns: []string{lab_problem_submission.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lpsu.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   lab_problem_submission.OwnerTable,
			Columns: []string{lab_problem_submission.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if lpsu.mutation.TestcaseSubmissionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   lab_problem_submission.TestcaseSubmissionsTable,
			Columns: []string{lab_problem_submission.TestcaseSubmissionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(testcase_submission.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lpsu.mutation.RemovedTestcaseSubmissionsIDs(); len(nodes) > 0 && !lpsu.mutation.TestcaseSubmissionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   lab_problem_submission.TestcaseSubmissionsTable,
			Columns: []string{lab_problem_submission.TestcaseSubmissionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(testcase_submission.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lpsu.mutation.TestcaseSubmissionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   lab_problem_submission.TestcaseSubmissionsTable,
			Columns: []string{lab_problem_submission.TestcaseSubmissionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(testcase_submission.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, lpsu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{lab_problem_submission.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	lpsu.mutation.done = true
	return n, nil
}

// LabProblemSubmissionUpdateOne is the builder for updating a single Lab_Problem_Submission entity.
type LabProblemSubmissionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *LabProblemSubmissionMutation
}

// SetOwnerID sets the "owner_id" field.
func (lpsuo *LabProblemSubmissionUpdateOne) SetOwnerID(i int) *LabProblemSubmissionUpdateOne {
	lpsuo.mutation.SetOwnerID(i)
	return lpsuo
}

// SetLabProblemID sets the "lab_problem_id" field.
func (lpsuo *LabProblemSubmissionUpdateOne) SetLabProblemID(i int) *LabProblemSubmissionUpdateOne {
	lpsuo.mutation.ResetLabProblemID()
	lpsuo.mutation.SetLabProblemID(i)
	return lpsuo
}

// AddLabProblemID adds i to the "lab_problem_id" field.
func (lpsuo *LabProblemSubmissionUpdateOne) AddLabProblemID(i int) *LabProblemSubmissionUpdateOne {
	lpsuo.mutation.AddLabProblemID(i)
	return lpsuo
}

// SetCode sets the "code" field.
func (lpsuo *LabProblemSubmissionUpdateOne) SetCode(s string) *LabProblemSubmissionUpdateOne {
	lpsuo.mutation.SetCode(s)
	return lpsuo
}

// SetScore sets the "score" field.
func (lpsuo *LabProblemSubmissionUpdateOne) SetScore(f float64) *LabProblemSubmissionUpdateOne {
	lpsuo.mutation.ResetScore()
	lpsuo.mutation.SetScore(f)
	return lpsuo
}

// AddScore adds f to the "score" field.
func (lpsuo *LabProblemSubmissionUpdateOne) AddScore(f float64) *LabProblemSubmissionUpdateOne {
	lpsuo.mutation.AddScore(f)
	return lpsuo
}

// SetFeedback sets the "feedback" field.
func (lpsuo *LabProblemSubmissionUpdateOne) SetFeedback(s string) *LabProblemSubmissionUpdateOne {
	lpsuo.mutation.SetFeedback(s)
	return lpsuo
}

// SetNillableFeedback sets the "feedback" field if the given value is not nil.
func (lpsuo *LabProblemSubmissionUpdateOne) SetNillableFeedback(s *string) *LabProblemSubmissionUpdateOne {
	if s != nil {
		lpsuo.SetFeedback(*s)
	}
	return lpsuo
}

// ClearFeedback clears the value of the "feedback" field.
func (lpsuo *LabProblemSubmissionUpdateOne) ClearFeedback() *LabProblemSubmissionUpdateOne {
	lpsuo.mutation.ClearFeedback()
	return lpsuo
}

// SetInstructorScore sets the "instructor_score" field.
func (lpsuo *LabProblemSubmissionUpdateOne) SetInstructorScore(f float64) *LabProblemSubmissionUpdateOne {
	lpsuo.mutation.ResetInstructorScore()
	lpsuo.mutation.SetInstructorScore(f)
	return lpsuo
}

// AddInstructorScore adds f to the "instructor_score" field.
func (lpsuo *LabProblemSubmissionUpdateOne) AddInstructorScore(f float64) *LabProblemSubmissionUpdateOne {
	lpsuo.mutation.AddInstructorScore(f)
	return lpsuo
}

// SetCreatedAt sets the "created_at" field.
func (lpsuo *LabProblemSubmissionUpdateOne) SetCreatedAt(t time.Time) *LabProblemSubmissionUpdateOne {
	lpsuo.mutation.SetCreatedAt(t)
	return lpsuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (lpsuo *LabProblemSubmissionUpdateOne) SetNillableCreatedAt(t *time.Time) *LabProblemSubmissionUpdateOne {
	if t != nil {
		lpsuo.SetCreatedAt(*t)
	}
	return lpsuo
}

// SetUpdatedAt sets the "updated_at" field.
func (lpsuo *LabProblemSubmissionUpdateOne) SetUpdatedAt(t time.Time) *LabProblemSubmissionUpdateOne {
	lpsuo.mutation.SetUpdatedAt(t)
	return lpsuo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (lpsuo *LabProblemSubmissionUpdateOne) SetNillableUpdatedAt(t *time.Time) *LabProblemSubmissionUpdateOne {
	if t != nil {
		lpsuo.SetUpdatedAt(*t)
	}
	return lpsuo
}

// SetOwner sets the "owner" edge to the User entity.
func (lpsuo *LabProblemSubmissionUpdateOne) SetOwner(u *User) *LabProblemSubmissionUpdateOne {
	return lpsuo.SetOwnerID(u.ID)
}

// AddTestcaseSubmissionIDs adds the "testcase_submissions" edge to the Testcase_Submission entity by IDs.
func (lpsuo *LabProblemSubmissionUpdateOne) AddTestcaseSubmissionIDs(ids ...int) *LabProblemSubmissionUpdateOne {
	lpsuo.mutation.AddTestcaseSubmissionIDs(ids...)
	return lpsuo
}

// AddTestcaseSubmissions adds the "testcase_submissions" edges to the Testcase_Submission entity.
func (lpsuo *LabProblemSubmissionUpdateOne) AddTestcaseSubmissions(t ...*Testcase_Submission) *LabProblemSubmissionUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return lpsuo.AddTestcaseSubmissionIDs(ids...)
}

// Mutation returns the LabProblemSubmissionMutation object of the builder.
func (lpsuo *LabProblemSubmissionUpdateOne) Mutation() *LabProblemSubmissionMutation {
	return lpsuo.mutation
}

// ClearOwner clears the "owner" edge to the User entity.
func (lpsuo *LabProblemSubmissionUpdateOne) ClearOwner() *LabProblemSubmissionUpdateOne {
	lpsuo.mutation.ClearOwner()
	return lpsuo
}

// ClearTestcaseSubmissions clears all "testcase_submissions" edges to the Testcase_Submission entity.
func (lpsuo *LabProblemSubmissionUpdateOne) ClearTestcaseSubmissions() *LabProblemSubmissionUpdateOne {
	lpsuo.mutation.ClearTestcaseSubmissions()
	return lpsuo
}

// RemoveTestcaseSubmissionIDs removes the "testcase_submissions" edge to Testcase_Submission entities by IDs.
func (lpsuo *LabProblemSubmissionUpdateOne) RemoveTestcaseSubmissionIDs(ids ...int) *LabProblemSubmissionUpdateOne {
	lpsuo.mutation.RemoveTestcaseSubmissionIDs(ids...)
	return lpsuo
}

// RemoveTestcaseSubmissions removes "testcase_submissions" edges to Testcase_Submission entities.
func (lpsuo *LabProblemSubmissionUpdateOne) RemoveTestcaseSubmissions(t ...*Testcase_Submission) *LabProblemSubmissionUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return lpsuo.RemoveTestcaseSubmissionIDs(ids...)
}

// Where appends a list predicates to the LabProblemSubmissionUpdate builder.
func (lpsuo *LabProblemSubmissionUpdateOne) Where(ps ...predicate.Lab_Problem_Submission) *LabProblemSubmissionUpdateOne {
	lpsuo.mutation.Where(ps...)
	return lpsuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (lpsuo *LabProblemSubmissionUpdateOne) Select(field string, fields ...string) *LabProblemSubmissionUpdateOne {
	lpsuo.fields = append([]string{field}, fields...)
	return lpsuo
}

// Save executes the query and returns the updated Lab_Problem_Submission entity.
func (lpsuo *LabProblemSubmissionUpdateOne) Save(ctx context.Context) (*Lab_Problem_Submission, error) {
	return withHooks(ctx, lpsuo.sqlSave, lpsuo.mutation, lpsuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (lpsuo *LabProblemSubmissionUpdateOne) SaveX(ctx context.Context) *Lab_Problem_Submission {
	node, err := lpsuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (lpsuo *LabProblemSubmissionUpdateOne) Exec(ctx context.Context) error {
	_, err := lpsuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lpsuo *LabProblemSubmissionUpdateOne) ExecX(ctx context.Context) {
	if err := lpsuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (lpsuo *LabProblemSubmissionUpdateOne) check() error {
	if v, ok := lpsuo.mutation.Score(); ok {
		if err := lab_problem_submission.ScoreValidator(v); err != nil {
			return &ValidationError{Name: "score", err: fmt.Errorf(`ent: validator failed for field "Lab_Problem_Submission.score": %w`, err)}
		}
	}
	if v, ok := lpsuo.mutation.InstructorScore(); ok {
		if err := lab_problem_submission.InstructorScoreValidator(v); err != nil {
			return &ValidationError{Name: "instructor_score", err: fmt.Errorf(`ent: validator failed for field "Lab_Problem_Submission.instructor_score": %w`, err)}
		}
	}
	if _, ok := lpsuo.mutation.OwnerID(); lpsuo.mutation.OwnerCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Lab_Problem_Submission.owner"`)
	}
	return nil
}

func (lpsuo *LabProblemSubmissionUpdateOne) sqlSave(ctx context.Context) (_node *Lab_Problem_Submission, err error) {
	if err := lpsuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(lab_problem_submission.Table, lab_problem_submission.Columns, sqlgraph.NewFieldSpec(lab_problem_submission.FieldID, field.TypeInt))
	id, ok := lpsuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Lab_Problem_Submission.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := lpsuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, lab_problem_submission.FieldID)
		for _, f := range fields {
			if !lab_problem_submission.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != lab_problem_submission.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := lpsuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := lpsuo.mutation.LabProblemID(); ok {
		_spec.SetField(lab_problem_submission.FieldLabProblemID, field.TypeInt, value)
	}
	if value, ok := lpsuo.mutation.AddedLabProblemID(); ok {
		_spec.AddField(lab_problem_submission.FieldLabProblemID, field.TypeInt, value)
	}
	if value, ok := lpsuo.mutation.Code(); ok {
		_spec.SetField(lab_problem_submission.FieldCode, field.TypeString, value)
	}
	if value, ok := lpsuo.mutation.Score(); ok {
		_spec.SetField(lab_problem_submission.FieldScore, field.TypeFloat64, value)
	}
	if value, ok := lpsuo.mutation.AddedScore(); ok {
		_spec.AddField(lab_problem_submission.FieldScore, field.TypeFloat64, value)
	}
	if value, ok := lpsuo.mutation.Feedback(); ok {
		_spec.SetField(lab_problem_submission.FieldFeedback, field.TypeString, value)
	}
	if lpsuo.mutation.FeedbackCleared() {
		_spec.ClearField(lab_problem_submission.FieldFeedback, field.TypeString)
	}
	if value, ok := lpsuo.mutation.InstructorScore(); ok {
		_spec.SetField(lab_problem_submission.FieldInstructorScore, field.TypeFloat64, value)
	}
	if value, ok := lpsuo.mutation.AddedInstructorScore(); ok {
		_spec.AddField(lab_problem_submission.FieldInstructorScore, field.TypeFloat64, value)
	}
	if value, ok := lpsuo.mutation.CreatedAt(); ok {
		_spec.SetField(lab_problem_submission.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := lpsuo.mutation.UpdatedAt(); ok {
		_spec.SetField(lab_problem_submission.FieldUpdatedAt, field.TypeTime, value)
	}
	if lpsuo.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   lab_problem_submission.OwnerTable,
			Columns: []string{lab_problem_submission.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lpsuo.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   lab_problem_submission.OwnerTable,
			Columns: []string{lab_problem_submission.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if lpsuo.mutation.TestcaseSubmissionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   lab_problem_submission.TestcaseSubmissionsTable,
			Columns: []string{lab_problem_submission.TestcaseSubmissionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(testcase_submission.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lpsuo.mutation.RemovedTestcaseSubmissionsIDs(); len(nodes) > 0 && !lpsuo.mutation.TestcaseSubmissionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   lab_problem_submission.TestcaseSubmissionsTable,
			Columns: []string{lab_problem_submission.TestcaseSubmissionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(testcase_submission.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lpsuo.mutation.TestcaseSubmissionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   lab_problem_submission.TestcaseSubmissionsTable,
			Columns: []string{lab_problem_submission.TestcaseSubmissionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(testcase_submission.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Lab_Problem_Submission{config: lpsuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, lpsuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{lab_problem_submission.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	lpsuo.mutation.done = true
	return _node, nil
}
