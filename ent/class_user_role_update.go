// Code generated by ent, DO NOT EDIT.

package ent

import (
	"plms-backend/ent/class"
	"plms-backend/ent/class_user_role"
	"plms-backend/ent/predicate"
	"plms-backend/ent/user"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ClassUserRoleUpdate is the builder for updating Class_User_Role entities.
type ClassUserRoleUpdate struct {
	config
	hooks    []Hook
	mutation *ClassUserRoleMutation
}

// Where appends a list predicates to the ClassUserRoleUpdate builder.
func (curu *ClassUserRoleUpdate) Where(ps ...predicate.Class_User_Role) *ClassUserRoleUpdate {
	curu.mutation.Where(ps...)
	return curu
}

// SetUserID sets the "user_id" field.
func (curu *ClassUserRoleUpdate) SetUserID(i int) *ClassUserRoleUpdate {
	curu.mutation.SetUserID(i)
	return curu
}

// SetClassID sets the "class_id" field.
func (curu *ClassUserRoleUpdate) SetClassID(i int) *ClassUserRoleUpdate {
	curu.mutation.SetClassID(i)
	return curu
}

// SetRole sets the "role" field.
func (curu *ClassUserRoleUpdate) SetRole(cur class_user_role.Role) *ClassUserRoleUpdate {
	curu.mutation.SetRole(cur)
	return curu
}

// SetUser sets the "user" edge to the User entity.
func (curu *ClassUserRoleUpdate) SetUser(u *User) *ClassUserRoleUpdate {
	return curu.SetUserID(u.ID)
}

// SetClass sets the "class" edge to the Class entity.
func (curu *ClassUserRoleUpdate) SetClass(c *Class) *ClassUserRoleUpdate {
	return curu.SetClassID(c.ID)
}

// Mutation returns the ClassUserRoleMutation object of the builder.
func (curu *ClassUserRoleUpdate) Mutation() *ClassUserRoleMutation {
	return curu.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (curu *ClassUserRoleUpdate) ClearUser() *ClassUserRoleUpdate {
	curu.mutation.ClearUser()
	return curu
}

// ClearClass clears the "class" edge to the Class entity.
func (curu *ClassUserRoleUpdate) ClearClass() *ClassUserRoleUpdate {
	curu.mutation.ClearClass()
	return curu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (curu *ClassUserRoleUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, curu.sqlSave, curu.mutation, curu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (curu *ClassUserRoleUpdate) SaveX(ctx context.Context) int {
	affected, err := curu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (curu *ClassUserRoleUpdate) Exec(ctx context.Context) error {
	_, err := curu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (curu *ClassUserRoleUpdate) ExecX(ctx context.Context) {
	if err := curu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (curu *ClassUserRoleUpdate) check() error {
	if v, ok := curu.mutation.Role(); ok {
		if err := class_user_role.RoleValidator(v); err != nil {
			return &ValidationError{Name: "role", err: fmt.Errorf(`ent: validator failed for field "Class_User_Role.role": %w`, err)}
		}
	}
	if _, ok := curu.mutation.UserID(); curu.mutation.UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Class_User_Role.user"`)
	}
	if _, ok := curu.mutation.ClassID(); curu.mutation.ClassCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Class_User_Role.class"`)
	}
	return nil
}

func (curu *ClassUserRoleUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := curu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(class_user_role.Table, class_user_role.Columns, sqlgraph.NewFieldSpec(class_user_role.FieldID, field.TypeInt))
	if ps := curu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := curu.mutation.Role(); ok {
		_spec.SetField(class_user_role.FieldRole, field.TypeEnum, value)
	}
	if curu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   class_user_role.UserTable,
			Columns: []string{class_user_role.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := curu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   class_user_role.UserTable,
			Columns: []string{class_user_role.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if curu.mutation.ClassCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   class_user_role.ClassTable,
			Columns: []string{class_user_role.ClassColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(class.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := curu.mutation.ClassIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   class_user_role.ClassTable,
			Columns: []string{class_user_role.ClassColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(class.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, curu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{class_user_role.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	curu.mutation.done = true
	return n, nil
}

// ClassUserRoleUpdateOne is the builder for updating a single Class_User_Role entity.
type ClassUserRoleUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ClassUserRoleMutation
}

// SetUserID sets the "user_id" field.
func (curuo *ClassUserRoleUpdateOne) SetUserID(i int) *ClassUserRoleUpdateOne {
	curuo.mutation.SetUserID(i)
	return curuo
}

// SetClassID sets the "class_id" field.
func (curuo *ClassUserRoleUpdateOne) SetClassID(i int) *ClassUserRoleUpdateOne {
	curuo.mutation.SetClassID(i)
	return curuo
}

// SetRole sets the "role" field.
func (curuo *ClassUserRoleUpdateOne) SetRole(cur class_user_role.Role) *ClassUserRoleUpdateOne {
	curuo.mutation.SetRole(cur)
	return curuo
}

// SetUser sets the "user" edge to the User entity.
func (curuo *ClassUserRoleUpdateOne) SetUser(u *User) *ClassUserRoleUpdateOne {
	return curuo.SetUserID(u.ID)
}

// SetClass sets the "class" edge to the Class entity.
func (curuo *ClassUserRoleUpdateOne) SetClass(c *Class) *ClassUserRoleUpdateOne {
	return curuo.SetClassID(c.ID)
}

// Mutation returns the ClassUserRoleMutation object of the builder.
func (curuo *ClassUserRoleUpdateOne) Mutation() *ClassUserRoleMutation {
	return curuo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (curuo *ClassUserRoleUpdateOne) ClearUser() *ClassUserRoleUpdateOne {
	curuo.mutation.ClearUser()
	return curuo
}

// ClearClass clears the "class" edge to the Class entity.
func (curuo *ClassUserRoleUpdateOne) ClearClass() *ClassUserRoleUpdateOne {
	curuo.mutation.ClearClass()
	return curuo
}

// Where appends a list predicates to the ClassUserRoleUpdate builder.
func (curuo *ClassUserRoleUpdateOne) Where(ps ...predicate.Class_User_Role) *ClassUserRoleUpdateOne {
	curuo.mutation.Where(ps...)
	return curuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (curuo *ClassUserRoleUpdateOne) Select(field string, fields ...string) *ClassUserRoleUpdateOne {
	curuo.fields = append([]string{field}, fields...)
	return curuo
}

// Save executes the query and returns the updated Class_User_Role entity.
func (curuo *ClassUserRoleUpdateOne) Save(ctx context.Context) (*Class_User_Role, error) {
	return withHooks(ctx, curuo.sqlSave, curuo.mutation, curuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (curuo *ClassUserRoleUpdateOne) SaveX(ctx context.Context) *Class_User_Role {
	node, err := curuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (curuo *ClassUserRoleUpdateOne) Exec(ctx context.Context) error {
	_, err := curuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (curuo *ClassUserRoleUpdateOne) ExecX(ctx context.Context) {
	if err := curuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (curuo *ClassUserRoleUpdateOne) check() error {
	if v, ok := curuo.mutation.Role(); ok {
		if err := class_user_role.RoleValidator(v); err != nil {
			return &ValidationError{Name: "role", err: fmt.Errorf(`ent: validator failed for field "Class_User_Role.role": %w`, err)}
		}
	}
	if _, ok := curuo.mutation.UserID(); curuo.mutation.UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Class_User_Role.user"`)
	}
	if _, ok := curuo.mutation.ClassID(); curuo.mutation.ClassCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Class_User_Role.class"`)
	}
	return nil
}

func (curuo *ClassUserRoleUpdateOne) sqlSave(ctx context.Context) (_node *Class_User_Role, err error) {
	if err := curuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(class_user_role.Table, class_user_role.Columns, sqlgraph.NewFieldSpec(class_user_role.FieldID, field.TypeInt))
	id, ok := curuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Class_User_Role.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := curuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, class_user_role.FieldID)
		for _, f := range fields {
			if !class_user_role.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != class_user_role.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := curuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := curuo.mutation.Role(); ok {
		_spec.SetField(class_user_role.FieldRole, field.TypeEnum, value)
	}
	if curuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   class_user_role.UserTable,
			Columns: []string{class_user_role.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := curuo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   class_user_role.UserTable,
			Columns: []string{class_user_role.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if curuo.mutation.ClassCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   class_user_role.ClassTable,
			Columns: []string{class_user_role.ClassColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(class.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := curuo.mutation.ClassIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   class_user_role.ClassTable,
			Columns: []string{class_user_role.ClassColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(class.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Class_User_Role{config: curuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, curuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{class_user_role.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	curuo.mutation.done = true
	return _node, nil
}
