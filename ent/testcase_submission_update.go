// Code generated by ent, DO NOT EDIT.

package ent

import (
	"plms-backend/ent/lab_problem_submission"
	"plms-backend/ent/predicate"
	"plms-backend/ent/testcase"
	"plms-backend/ent/testcase_submission"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TestcaseSubmissionUpdate is the builder for updating Testcase_Submission entities.
type TestcaseSubmissionUpdate struct {
	config
	hooks    []Hook
	mutation *TestcaseSubmissionMutation
}

// Where appends a list predicates to the TestcaseSubmissionUpdate builder.
func (tsu *TestcaseSubmissionUpdate) Where(ps ...predicate.Testcase_Submission) *TestcaseSubmissionUpdate {
	tsu.mutation.Where(ps...)
	return tsu
}

// SetSubmissionID sets the "submission_id" field.
func (tsu *TestcaseSubmissionUpdate) SetSubmissionID(i int) *TestcaseSubmissionUpdate {
	tsu.mutation.SetSubmissionID(i)
	return tsu
}

// SetTestcaseID sets the "testcase_id" field.
func (tsu *TestcaseSubmissionUpdate) SetTestcaseID(i int) *TestcaseSubmissionUpdate {
	tsu.mutation.SetTestcaseID(i)
	return tsu
}

// SetInput sets the "input" field.
func (tsu *TestcaseSubmissionUpdate) SetInput(s string) *TestcaseSubmissionUpdate {
	tsu.mutation.SetInput(s)
	return tsu
}

// SetExpectedOutput sets the "expected_output" field.
func (tsu *TestcaseSubmissionUpdate) SetExpectedOutput(s string) *TestcaseSubmissionUpdate {
	tsu.mutation.SetExpectedOutput(s)
	return tsu
}

// SetActualOutput sets the "actual_output" field.
func (tsu *TestcaseSubmissionUpdate) SetActualOutput(s string) *TestcaseSubmissionUpdate {
	tsu.mutation.SetActualOutput(s)
	return tsu
}

// SetIsPassed sets the "is_passed" field.
func (tsu *TestcaseSubmissionUpdate) SetIsPassed(b bool) *TestcaseSubmissionUpdate {
	tsu.mutation.SetIsPassed(b)
	return tsu
}

// SetScore sets the "score" field.
func (tsu *TestcaseSubmissionUpdate) SetScore(f float64) *TestcaseSubmissionUpdate {
	tsu.mutation.ResetScore()
	tsu.mutation.SetScore(f)
	return tsu
}

// AddScore adds f to the "score" field.
func (tsu *TestcaseSubmissionUpdate) AddScore(f float64) *TestcaseSubmissionUpdate {
	tsu.mutation.AddScore(f)
	return tsu
}

// SetCreatedAt sets the "created_at" field.
func (tsu *TestcaseSubmissionUpdate) SetCreatedAt(t time.Time) *TestcaseSubmissionUpdate {
	tsu.mutation.SetCreatedAt(t)
	return tsu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tsu *TestcaseSubmissionUpdate) SetNillableCreatedAt(t *time.Time) *TestcaseSubmissionUpdate {
	if t != nil {
		tsu.SetCreatedAt(*t)
	}
	return tsu
}

// SetUpdatedAt sets the "updated_at" field.
func (tsu *TestcaseSubmissionUpdate) SetUpdatedAt(t time.Time) *TestcaseSubmissionUpdate {
	tsu.mutation.SetUpdatedAt(t)
	return tsu
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (tsu *TestcaseSubmissionUpdate) SetNillableUpdatedAt(t *time.Time) *TestcaseSubmissionUpdate {
	if t != nil {
		tsu.SetUpdatedAt(*t)
	}
	return tsu
}

// SetTestcase sets the "testcase" edge to the Testcase entity.
func (tsu *TestcaseSubmissionUpdate) SetTestcase(t *Testcase) *TestcaseSubmissionUpdate {
	return tsu.SetTestcaseID(t.ID)
}

// SetSubmission sets the "submission" edge to the Lab_Problem_Submission entity.
func (tsu *TestcaseSubmissionUpdate) SetSubmission(l *Lab_Problem_Submission) *TestcaseSubmissionUpdate {
	return tsu.SetSubmissionID(l.ID)
}

// Mutation returns the TestcaseSubmissionMutation object of the builder.
func (tsu *TestcaseSubmissionUpdate) Mutation() *TestcaseSubmissionMutation {
	return tsu.mutation
}

// ClearTestcase clears the "testcase" edge to the Testcase entity.
func (tsu *TestcaseSubmissionUpdate) ClearTestcase() *TestcaseSubmissionUpdate {
	tsu.mutation.ClearTestcase()
	return tsu
}

// ClearSubmission clears the "submission" edge to the Lab_Problem_Submission entity.
func (tsu *TestcaseSubmissionUpdate) ClearSubmission() *TestcaseSubmissionUpdate {
	tsu.mutation.ClearSubmission()
	return tsu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tsu *TestcaseSubmissionUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, tsu.sqlSave, tsu.mutation, tsu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tsu *TestcaseSubmissionUpdate) SaveX(ctx context.Context) int {
	affected, err := tsu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tsu *TestcaseSubmissionUpdate) Exec(ctx context.Context) error {
	_, err := tsu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tsu *TestcaseSubmissionUpdate) ExecX(ctx context.Context) {
	if err := tsu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tsu *TestcaseSubmissionUpdate) check() error {
	if _, ok := tsu.mutation.TestcaseID(); tsu.mutation.TestcaseCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Testcase_Submission.testcase"`)
	}
	if _, ok := tsu.mutation.SubmissionID(); tsu.mutation.SubmissionCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Testcase_Submission.submission"`)
	}
	return nil
}

func (tsu *TestcaseSubmissionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := tsu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(testcase_submission.Table, testcase_submission.Columns, sqlgraph.NewFieldSpec(testcase_submission.FieldID, field.TypeInt))
	if ps := tsu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tsu.mutation.Input(); ok {
		_spec.SetField(testcase_submission.FieldInput, field.TypeString, value)
	}
	if value, ok := tsu.mutation.ExpectedOutput(); ok {
		_spec.SetField(testcase_submission.FieldExpectedOutput, field.TypeString, value)
	}
	if value, ok := tsu.mutation.ActualOutput(); ok {
		_spec.SetField(testcase_submission.FieldActualOutput, field.TypeString, value)
	}
	if value, ok := tsu.mutation.IsPassed(); ok {
		_spec.SetField(testcase_submission.FieldIsPassed, field.TypeBool, value)
	}
	if value, ok := tsu.mutation.Score(); ok {
		_spec.SetField(testcase_submission.FieldScore, field.TypeFloat64, value)
	}
	if value, ok := tsu.mutation.AddedScore(); ok {
		_spec.AddField(testcase_submission.FieldScore, field.TypeFloat64, value)
	}
	if value, ok := tsu.mutation.CreatedAt(); ok {
		_spec.SetField(testcase_submission.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := tsu.mutation.UpdatedAt(); ok {
		_spec.SetField(testcase_submission.FieldUpdatedAt, field.TypeTime, value)
	}
	if tsu.mutation.TestcaseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   testcase_submission.TestcaseTable,
			Columns: []string{testcase_submission.TestcaseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(testcase.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tsu.mutation.TestcaseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   testcase_submission.TestcaseTable,
			Columns: []string{testcase_submission.TestcaseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(testcase.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tsu.mutation.SubmissionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   testcase_submission.SubmissionTable,
			Columns: []string{testcase_submission.SubmissionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(lab_problem_submission.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tsu.mutation.SubmissionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   testcase_submission.SubmissionTable,
			Columns: []string{testcase_submission.SubmissionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(lab_problem_submission.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tsu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{testcase_submission.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tsu.mutation.done = true
	return n, nil
}

// TestcaseSubmissionUpdateOne is the builder for updating a single Testcase_Submission entity.
type TestcaseSubmissionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TestcaseSubmissionMutation
}

// SetSubmissionID sets the "submission_id" field.
func (tsuo *TestcaseSubmissionUpdateOne) SetSubmissionID(i int) *TestcaseSubmissionUpdateOne {
	tsuo.mutation.SetSubmissionID(i)
	return tsuo
}

// SetTestcaseID sets the "testcase_id" field.
func (tsuo *TestcaseSubmissionUpdateOne) SetTestcaseID(i int) *TestcaseSubmissionUpdateOne {
	tsuo.mutation.SetTestcaseID(i)
	return tsuo
}

// SetInput sets the "input" field.
func (tsuo *TestcaseSubmissionUpdateOne) SetInput(s string) *TestcaseSubmissionUpdateOne {
	tsuo.mutation.SetInput(s)
	return tsuo
}

// SetExpectedOutput sets the "expected_output" field.
func (tsuo *TestcaseSubmissionUpdateOne) SetExpectedOutput(s string) *TestcaseSubmissionUpdateOne {
	tsuo.mutation.SetExpectedOutput(s)
	return tsuo
}

// SetActualOutput sets the "actual_output" field.
func (tsuo *TestcaseSubmissionUpdateOne) SetActualOutput(s string) *TestcaseSubmissionUpdateOne {
	tsuo.mutation.SetActualOutput(s)
	return tsuo
}

// SetIsPassed sets the "is_passed" field.
func (tsuo *TestcaseSubmissionUpdateOne) SetIsPassed(b bool) *TestcaseSubmissionUpdateOne {
	tsuo.mutation.SetIsPassed(b)
	return tsuo
}

// SetScore sets the "score" field.
func (tsuo *TestcaseSubmissionUpdateOne) SetScore(f float64) *TestcaseSubmissionUpdateOne {
	tsuo.mutation.ResetScore()
	tsuo.mutation.SetScore(f)
	return tsuo
}

// AddScore adds f to the "score" field.
func (tsuo *TestcaseSubmissionUpdateOne) AddScore(f float64) *TestcaseSubmissionUpdateOne {
	tsuo.mutation.AddScore(f)
	return tsuo
}

// SetCreatedAt sets the "created_at" field.
func (tsuo *TestcaseSubmissionUpdateOne) SetCreatedAt(t time.Time) *TestcaseSubmissionUpdateOne {
	tsuo.mutation.SetCreatedAt(t)
	return tsuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tsuo *TestcaseSubmissionUpdateOne) SetNillableCreatedAt(t *time.Time) *TestcaseSubmissionUpdateOne {
	if t != nil {
		tsuo.SetCreatedAt(*t)
	}
	return tsuo
}

// SetUpdatedAt sets the "updated_at" field.
func (tsuo *TestcaseSubmissionUpdateOne) SetUpdatedAt(t time.Time) *TestcaseSubmissionUpdateOne {
	tsuo.mutation.SetUpdatedAt(t)
	return tsuo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (tsuo *TestcaseSubmissionUpdateOne) SetNillableUpdatedAt(t *time.Time) *TestcaseSubmissionUpdateOne {
	if t != nil {
		tsuo.SetUpdatedAt(*t)
	}
	return tsuo
}

// SetTestcase sets the "testcase" edge to the Testcase entity.
func (tsuo *TestcaseSubmissionUpdateOne) SetTestcase(t *Testcase) *TestcaseSubmissionUpdateOne {
	return tsuo.SetTestcaseID(t.ID)
}

// SetSubmission sets the "submission" edge to the Lab_Problem_Submission entity.
func (tsuo *TestcaseSubmissionUpdateOne) SetSubmission(l *Lab_Problem_Submission) *TestcaseSubmissionUpdateOne {
	return tsuo.SetSubmissionID(l.ID)
}

// Mutation returns the TestcaseSubmissionMutation object of the builder.
func (tsuo *TestcaseSubmissionUpdateOne) Mutation() *TestcaseSubmissionMutation {
	return tsuo.mutation
}

// ClearTestcase clears the "testcase" edge to the Testcase entity.
func (tsuo *TestcaseSubmissionUpdateOne) ClearTestcase() *TestcaseSubmissionUpdateOne {
	tsuo.mutation.ClearTestcase()
	return tsuo
}

// ClearSubmission clears the "submission" edge to the Lab_Problem_Submission entity.
func (tsuo *TestcaseSubmissionUpdateOne) ClearSubmission() *TestcaseSubmissionUpdateOne {
	tsuo.mutation.ClearSubmission()
	return tsuo
}

// Where appends a list predicates to the TestcaseSubmissionUpdate builder.
func (tsuo *TestcaseSubmissionUpdateOne) Where(ps ...predicate.Testcase_Submission) *TestcaseSubmissionUpdateOne {
	tsuo.mutation.Where(ps...)
	return tsuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tsuo *TestcaseSubmissionUpdateOne) Select(field string, fields ...string) *TestcaseSubmissionUpdateOne {
	tsuo.fields = append([]string{field}, fields...)
	return tsuo
}

// Save executes the query and returns the updated Testcase_Submission entity.
func (tsuo *TestcaseSubmissionUpdateOne) Save(ctx context.Context) (*Testcase_Submission, error) {
	return withHooks(ctx, tsuo.sqlSave, tsuo.mutation, tsuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tsuo *TestcaseSubmissionUpdateOne) SaveX(ctx context.Context) *Testcase_Submission {
	node, err := tsuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tsuo *TestcaseSubmissionUpdateOne) Exec(ctx context.Context) error {
	_, err := tsuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tsuo *TestcaseSubmissionUpdateOne) ExecX(ctx context.Context) {
	if err := tsuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tsuo *TestcaseSubmissionUpdateOne) check() error {
	if _, ok := tsuo.mutation.TestcaseID(); tsuo.mutation.TestcaseCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Testcase_Submission.testcase"`)
	}
	if _, ok := tsuo.mutation.SubmissionID(); tsuo.mutation.SubmissionCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Testcase_Submission.submission"`)
	}
	return nil
}

func (tsuo *TestcaseSubmissionUpdateOne) sqlSave(ctx context.Context) (_node *Testcase_Submission, err error) {
	if err := tsuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(testcase_submission.Table, testcase_submission.Columns, sqlgraph.NewFieldSpec(testcase_submission.FieldID, field.TypeInt))
	id, ok := tsuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Testcase_Submission.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tsuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, testcase_submission.FieldID)
		for _, f := range fields {
			if !testcase_submission.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != testcase_submission.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tsuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tsuo.mutation.Input(); ok {
		_spec.SetField(testcase_submission.FieldInput, field.TypeString, value)
	}
	if value, ok := tsuo.mutation.ExpectedOutput(); ok {
		_spec.SetField(testcase_submission.FieldExpectedOutput, field.TypeString, value)
	}
	if value, ok := tsuo.mutation.ActualOutput(); ok {
		_spec.SetField(testcase_submission.FieldActualOutput, field.TypeString, value)
	}
	if value, ok := tsuo.mutation.IsPassed(); ok {
		_spec.SetField(testcase_submission.FieldIsPassed, field.TypeBool, value)
	}
	if value, ok := tsuo.mutation.Score(); ok {
		_spec.SetField(testcase_submission.FieldScore, field.TypeFloat64, value)
	}
	if value, ok := tsuo.mutation.AddedScore(); ok {
		_spec.AddField(testcase_submission.FieldScore, field.TypeFloat64, value)
	}
	if value, ok := tsuo.mutation.CreatedAt(); ok {
		_spec.SetField(testcase_submission.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := tsuo.mutation.UpdatedAt(); ok {
		_spec.SetField(testcase_submission.FieldUpdatedAt, field.TypeTime, value)
	}
	if tsuo.mutation.TestcaseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   testcase_submission.TestcaseTable,
			Columns: []string{testcase_submission.TestcaseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(testcase.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tsuo.mutation.TestcaseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   testcase_submission.TestcaseTable,
			Columns: []string{testcase_submission.TestcaseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(testcase.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tsuo.mutation.SubmissionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   testcase_submission.SubmissionTable,
			Columns: []string{testcase_submission.SubmissionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(lab_problem_submission.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tsuo.mutation.SubmissionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   testcase_submission.SubmissionTable,
			Columns: []string{testcase_submission.SubmissionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(lab_problem_submission.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Testcase_Submission{config: tsuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tsuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{testcase_submission.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tsuo.mutation.done = true
	return _node, nil
}
