// Code generated by ent, DO NOT EDIT.

package ent

import (
	"plms-backend/ent/class_lab_status"
	"plms-backend/ent/predicate"
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ClassLabStatusDelete is the builder for deleting a Class_Lab_Status entity.
type ClassLabStatusDelete struct {
	config
	hooks    []Hook
	mutation *ClassLabStatusMutation
}

// Where appends a list predicates to the ClassLabStatusDelete builder.
func (clsd *ClassLabStatusDelete) Where(ps ...predicate.Class_Lab_Status) *ClassLabStatusDelete {
	clsd.mutation.Where(ps...)
	return clsd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (clsd *ClassLabStatusDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, clsd.sqlExec, clsd.mutation, clsd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (clsd *ClassLabStatusDelete) ExecX(ctx context.Context) int {
	n, err := clsd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (clsd *ClassLabStatusDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(class_lab_status.Table, sqlgraph.NewFieldSpec(class_lab_status.FieldID, field.TypeInt))
	if ps := clsd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, clsd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	clsd.mutation.done = true
	return affected, err
}

// ClassLabStatusDeleteOne is the builder for deleting a single Class_Lab_Status entity.
type ClassLabStatusDeleteOne struct {
	clsd *ClassLabStatusDelete
}

// Where appends a list predicates to the ClassLabStatusDelete builder.
func (clsdo *ClassLabStatusDeleteOne) Where(ps ...predicate.Class_Lab_Status) *ClassLabStatusDeleteOne {
	clsdo.clsd.mutation.Where(ps...)
	return clsdo
}

// Exec executes the deletion query.
func (clsdo *ClassLabStatusDeleteOne) Exec(ctx context.Context) error {
	n, err := clsdo.clsd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{class_lab_status.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (clsdo *ClassLabStatusDeleteOne) ExecX(ctx context.Context) {
	if err := clsdo.Exec(ctx); err != nil {
		panic(err)
	}
}
