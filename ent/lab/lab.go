// Code generated by ent, DO NOT EDIT.

package lab

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the lab type in the database.
	Label = "lab"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCourseID holds the string denoting the course_id field in the database.
	FieldCourseID = "course_id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeCourse holds the string denoting the course edge name in mutations.
	EdgeCourse = "course"
	// EdgeLabProblems holds the string denoting the lab_problems edge name in mutations.
	EdgeLabProblems = "lab_problems"
	// EdgeLabStatuses holds the string denoting the lab_statuses edge name in mutations.
	EdgeLabStatuses = "lab_statuses"
	// Table holds the table name of the lab in the database.
	Table = "labs"
	// CourseTable is the table that holds the course relation/edge.
	CourseTable = "labs"
	// CourseInverseTable is the table name for the Course entity.
	// It exists in this package in order to avoid circular dependency with the "course" package.
	CourseInverseTable = "courses"
	// CourseColumn is the table column denoting the course relation/edge.
	CourseColumn = "course_id"
	// LabProblemsTable is the table that holds the lab_problems relation/edge.
	LabProblemsTable = "lab_problems"
	// LabProblemsInverseTable is the table name for the Lab_Problem entity.
	// It exists in this package in order to avoid circular dependency with the "lab_problem" package.
	LabProblemsInverseTable = "lab_problems"
	// LabProblemsColumn is the table column denoting the lab_problems relation/edge.
	LabProblemsColumn = "lab_id"
	// LabStatusesTable is the table that holds the lab_statuses relation/edge.
	LabStatusesTable = "class_lab_status"
	// LabStatusesInverseTable is the table name for the Class_Lab_Status entity.
	// It exists in this package in order to avoid circular dependency with the "class_lab_status" package.
	LabStatusesInverseTable = "class_lab_status"
	// LabStatusesColumn is the table column denoting the lab_statuses relation/edge.
	LabStatusesColumn = "lab_id"
)

// Columns holds all SQL columns for lab fields.
var Columns = []string{
	FieldID,
	FieldCourseID,
	FieldName,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt time.Time
)

// OrderOption defines the ordering options for the Lab queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCourseID orders the results by the course_id field.
func ByCourseID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCourseID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByCourseField orders the results by course field.
func ByCourseField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCourseStep(), sql.OrderByField(field, opts...))
	}
}

// ByLabProblemsCount orders the results by lab_problems count.
func ByLabProblemsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newLabProblemsStep(), opts...)
	}
}

// ByLabProblems orders the results by lab_problems terms.
func ByLabProblems(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newLabProblemsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByLabStatusesCount orders the results by lab_statuses count.
func ByLabStatusesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newLabStatusesStep(), opts...)
	}
}

// ByLabStatuses orders the results by lab_statuses terms.
func ByLabStatuses(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newLabStatusesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newCourseStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CourseInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, CourseTable, CourseColumn),
	)
}
func newLabProblemsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(LabProblemsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, LabProblemsTable, LabProblemsColumn),
	)
}
func newLabStatusesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(LabStatusesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, LabStatusesTable, LabStatusesColumn),
	)
}
