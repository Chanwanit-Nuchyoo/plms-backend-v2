// Code generated by ent, DO NOT EDIT.

package ent

import (
	"plms-backend/ent/lab_problem"
	"plms-backend/ent/predicate"
	"plms-backend/ent/testcase"
	"plms-backend/ent/testcase_submission"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TestcaseUpdate is the builder for updating Testcase entities.
type TestcaseUpdate struct {
	config
	hooks    []Hook
	mutation *TestcaseMutation
}

// Where appends a list predicates to the TestcaseUpdate builder.
func (tu *TestcaseUpdate) Where(ps ...predicate.Testcase) *TestcaseUpdate {
	tu.mutation.Where(ps...)
	return tu
}

// SetLabProblemID sets the "lab_problem_id" field.
func (tu *TestcaseUpdate) SetLabProblemID(i int) *TestcaseUpdate {
	tu.mutation.SetLabProblemID(i)
	return tu
}

// SetInput sets the "input" field.
func (tu *TestcaseUpdate) SetInput(s string) *TestcaseUpdate {
	tu.mutation.SetInput(s)
	return tu
}

// SetOutput sets the "output" field.
func (tu *TestcaseUpdate) SetOutput(s string) *TestcaseUpdate {
	tu.mutation.SetOutput(s)
	return tu
}

// SetCreatedAt sets the "created_at" field.
func (tu *TestcaseUpdate) SetCreatedAt(t time.Time) *TestcaseUpdate {
	tu.mutation.SetCreatedAt(t)
	return tu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tu *TestcaseUpdate) SetNillableCreatedAt(t *time.Time) *TestcaseUpdate {
	if t != nil {
		tu.SetCreatedAt(*t)
	}
	return tu
}

// SetUpdatedAt sets the "updated_at" field.
func (tu *TestcaseUpdate) SetUpdatedAt(t time.Time) *TestcaseUpdate {
	tu.mutation.SetUpdatedAt(t)
	return tu
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (tu *TestcaseUpdate) SetNillableUpdatedAt(t *time.Time) *TestcaseUpdate {
	if t != nil {
		tu.SetUpdatedAt(*t)
	}
	return tu
}

// SetLabProblem sets the "lab_problem" edge to the Lab_Problem entity.
func (tu *TestcaseUpdate) SetLabProblem(l *Lab_Problem) *TestcaseUpdate {
	return tu.SetLabProblemID(l.ID)
}

// AddTestcaseSubmissionIDs adds the "testcase_submissions" edge to the Testcase_Submission entity by IDs.
func (tu *TestcaseUpdate) AddTestcaseSubmissionIDs(ids ...int) *TestcaseUpdate {
	tu.mutation.AddTestcaseSubmissionIDs(ids...)
	return tu
}

// AddTestcaseSubmissions adds the "testcase_submissions" edges to the Testcase_Submission entity.
func (tu *TestcaseUpdate) AddTestcaseSubmissions(t ...*Testcase_Submission) *TestcaseUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tu.AddTestcaseSubmissionIDs(ids...)
}

// Mutation returns the TestcaseMutation object of the builder.
func (tu *TestcaseUpdate) Mutation() *TestcaseMutation {
	return tu.mutation
}

// ClearLabProblem clears the "lab_problem" edge to the Lab_Problem entity.
func (tu *TestcaseUpdate) ClearLabProblem() *TestcaseUpdate {
	tu.mutation.ClearLabProblem()
	return tu
}

// ClearTestcaseSubmissions clears all "testcase_submissions" edges to the Testcase_Submission entity.
func (tu *TestcaseUpdate) ClearTestcaseSubmissions() *TestcaseUpdate {
	tu.mutation.ClearTestcaseSubmissions()
	return tu
}

// RemoveTestcaseSubmissionIDs removes the "testcase_submissions" edge to Testcase_Submission entities by IDs.
func (tu *TestcaseUpdate) RemoveTestcaseSubmissionIDs(ids ...int) *TestcaseUpdate {
	tu.mutation.RemoveTestcaseSubmissionIDs(ids...)
	return tu
}

// RemoveTestcaseSubmissions removes "testcase_submissions" edges to Testcase_Submission entities.
func (tu *TestcaseUpdate) RemoveTestcaseSubmissions(t ...*Testcase_Submission) *TestcaseUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tu.RemoveTestcaseSubmissionIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tu *TestcaseUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, tu.sqlSave, tu.mutation, tu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tu *TestcaseUpdate) SaveX(ctx context.Context) int {
	affected, err := tu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tu *TestcaseUpdate) Exec(ctx context.Context) error {
	_, err := tu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tu *TestcaseUpdate) ExecX(ctx context.Context) {
	if err := tu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tu *TestcaseUpdate) check() error {
	if _, ok := tu.mutation.LabProblemID(); tu.mutation.LabProblemCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Testcase.lab_problem"`)
	}
	return nil
}

func (tu *TestcaseUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := tu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(testcase.Table, testcase.Columns, sqlgraph.NewFieldSpec(testcase.FieldID, field.TypeInt))
	if ps := tu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tu.mutation.Input(); ok {
		_spec.SetField(testcase.FieldInput, field.TypeString, value)
	}
	if value, ok := tu.mutation.Output(); ok {
		_spec.SetField(testcase.FieldOutput, field.TypeString, value)
	}
	if value, ok := tu.mutation.CreatedAt(); ok {
		_spec.SetField(testcase.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := tu.mutation.UpdatedAt(); ok {
		_spec.SetField(testcase.FieldUpdatedAt, field.TypeTime, value)
	}
	if tu.mutation.LabProblemCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   testcase.LabProblemTable,
			Columns: []string{testcase.LabProblemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(lab_problem.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.LabProblemIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   testcase.LabProblemTable,
			Columns: []string{testcase.LabProblemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(lab_problem.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.TestcaseSubmissionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   testcase.TestcaseSubmissionsTable,
			Columns: []string{testcase.TestcaseSubmissionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(testcase_submission.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.RemovedTestcaseSubmissionsIDs(); len(nodes) > 0 && !tu.mutation.TestcaseSubmissionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   testcase.TestcaseSubmissionsTable,
			Columns: []string{testcase.TestcaseSubmissionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(testcase_submission.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.TestcaseSubmissionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   testcase.TestcaseSubmissionsTable,
			Columns: []string{testcase.TestcaseSubmissionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(testcase_submission.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{testcase.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tu.mutation.done = true
	return n, nil
}

// TestcaseUpdateOne is the builder for updating a single Testcase entity.
type TestcaseUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TestcaseMutation
}

// SetLabProblemID sets the "lab_problem_id" field.
func (tuo *TestcaseUpdateOne) SetLabProblemID(i int) *TestcaseUpdateOne {
	tuo.mutation.SetLabProblemID(i)
	return tuo
}

// SetInput sets the "input" field.
func (tuo *TestcaseUpdateOne) SetInput(s string) *TestcaseUpdateOne {
	tuo.mutation.SetInput(s)
	return tuo
}

// SetOutput sets the "output" field.
func (tuo *TestcaseUpdateOne) SetOutput(s string) *TestcaseUpdateOne {
	tuo.mutation.SetOutput(s)
	return tuo
}

// SetCreatedAt sets the "created_at" field.
func (tuo *TestcaseUpdateOne) SetCreatedAt(t time.Time) *TestcaseUpdateOne {
	tuo.mutation.SetCreatedAt(t)
	return tuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tuo *TestcaseUpdateOne) SetNillableCreatedAt(t *time.Time) *TestcaseUpdateOne {
	if t != nil {
		tuo.SetCreatedAt(*t)
	}
	return tuo
}

// SetUpdatedAt sets the "updated_at" field.
func (tuo *TestcaseUpdateOne) SetUpdatedAt(t time.Time) *TestcaseUpdateOne {
	tuo.mutation.SetUpdatedAt(t)
	return tuo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (tuo *TestcaseUpdateOne) SetNillableUpdatedAt(t *time.Time) *TestcaseUpdateOne {
	if t != nil {
		tuo.SetUpdatedAt(*t)
	}
	return tuo
}

// SetLabProblem sets the "lab_problem" edge to the Lab_Problem entity.
func (tuo *TestcaseUpdateOne) SetLabProblem(l *Lab_Problem) *TestcaseUpdateOne {
	return tuo.SetLabProblemID(l.ID)
}

// AddTestcaseSubmissionIDs adds the "testcase_submissions" edge to the Testcase_Submission entity by IDs.
func (tuo *TestcaseUpdateOne) AddTestcaseSubmissionIDs(ids ...int) *TestcaseUpdateOne {
	tuo.mutation.AddTestcaseSubmissionIDs(ids...)
	return tuo
}

// AddTestcaseSubmissions adds the "testcase_submissions" edges to the Testcase_Submission entity.
func (tuo *TestcaseUpdateOne) AddTestcaseSubmissions(t ...*Testcase_Submission) *TestcaseUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tuo.AddTestcaseSubmissionIDs(ids...)
}

// Mutation returns the TestcaseMutation object of the builder.
func (tuo *TestcaseUpdateOne) Mutation() *TestcaseMutation {
	return tuo.mutation
}

// ClearLabProblem clears the "lab_problem" edge to the Lab_Problem entity.
func (tuo *TestcaseUpdateOne) ClearLabProblem() *TestcaseUpdateOne {
	tuo.mutation.ClearLabProblem()
	return tuo
}

// ClearTestcaseSubmissions clears all "testcase_submissions" edges to the Testcase_Submission entity.
func (tuo *TestcaseUpdateOne) ClearTestcaseSubmissions() *TestcaseUpdateOne {
	tuo.mutation.ClearTestcaseSubmissions()
	return tuo
}

// RemoveTestcaseSubmissionIDs removes the "testcase_submissions" edge to Testcase_Submission entities by IDs.
func (tuo *TestcaseUpdateOne) RemoveTestcaseSubmissionIDs(ids ...int) *TestcaseUpdateOne {
	tuo.mutation.RemoveTestcaseSubmissionIDs(ids...)
	return tuo
}

// RemoveTestcaseSubmissions removes "testcase_submissions" edges to Testcase_Submission entities.
func (tuo *TestcaseUpdateOne) RemoveTestcaseSubmissions(t ...*Testcase_Submission) *TestcaseUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tuo.RemoveTestcaseSubmissionIDs(ids...)
}

// Where appends a list predicates to the TestcaseUpdate builder.
func (tuo *TestcaseUpdateOne) Where(ps ...predicate.Testcase) *TestcaseUpdateOne {
	tuo.mutation.Where(ps...)
	return tuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tuo *TestcaseUpdateOne) Select(field string, fields ...string) *TestcaseUpdateOne {
	tuo.fields = append([]string{field}, fields...)
	return tuo
}

// Save executes the query and returns the updated Testcase entity.
func (tuo *TestcaseUpdateOne) Save(ctx context.Context) (*Testcase, error) {
	return withHooks(ctx, tuo.sqlSave, tuo.mutation, tuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tuo *TestcaseUpdateOne) SaveX(ctx context.Context) *Testcase {
	node, err := tuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tuo *TestcaseUpdateOne) Exec(ctx context.Context) error {
	_, err := tuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tuo *TestcaseUpdateOne) ExecX(ctx context.Context) {
	if err := tuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tuo *TestcaseUpdateOne) check() error {
	if _, ok := tuo.mutation.LabProblemID(); tuo.mutation.LabProblemCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Testcase.lab_problem"`)
	}
	return nil
}

func (tuo *TestcaseUpdateOne) sqlSave(ctx context.Context) (_node *Testcase, err error) {
	if err := tuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(testcase.Table, testcase.Columns, sqlgraph.NewFieldSpec(testcase.FieldID, field.TypeInt))
	id, ok := tuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Testcase.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, testcase.FieldID)
		for _, f := range fields {
			if !testcase.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != testcase.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tuo.mutation.Input(); ok {
		_spec.SetField(testcase.FieldInput, field.TypeString, value)
	}
	if value, ok := tuo.mutation.Output(); ok {
		_spec.SetField(testcase.FieldOutput, field.TypeString, value)
	}
	if value, ok := tuo.mutation.CreatedAt(); ok {
		_spec.SetField(testcase.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := tuo.mutation.UpdatedAt(); ok {
		_spec.SetField(testcase.FieldUpdatedAt, field.TypeTime, value)
	}
	if tuo.mutation.LabProblemCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   testcase.LabProblemTable,
			Columns: []string{testcase.LabProblemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(lab_problem.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.LabProblemIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   testcase.LabProblemTable,
			Columns: []string{testcase.LabProblemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(lab_problem.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.TestcaseSubmissionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   testcase.TestcaseSubmissionsTable,
			Columns: []string{testcase.TestcaseSubmissionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(testcase_submission.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.RemovedTestcaseSubmissionsIDs(); len(nodes) > 0 && !tuo.mutation.TestcaseSubmissionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   testcase.TestcaseSubmissionsTable,
			Columns: []string{testcase.TestcaseSubmissionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(testcase_submission.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.TestcaseSubmissionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   testcase.TestcaseSubmissionsTable,
			Columns: []string{testcase.TestcaseSubmissionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(testcase_submission.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Testcase{config: tuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{testcase.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tuo.mutation.done = true
	return _node, nil
}
