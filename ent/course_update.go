// Code generated by ent, DO NOT EDIT.

package ent

import (
	"plms-backend/ent/class"
	"plms-backend/ent/class_lab_status"
	"plms-backend/ent/course"
	"plms-backend/ent/lab"
	"plms-backend/ent/predicate"
	"plms-backend/ent/topic"
	"plms-backend/ent/user"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CourseUpdate is the builder for updating Course entities.
type CourseUpdate struct {
	config
	hooks    []Hook
	mutation *CourseMutation
}

// Where appends a list predicates to the CourseUpdate builder.
func (cu *CourseUpdate) Where(ps ...predicate.Course) *CourseUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetOwnerID sets the "owner_id" field.
func (cu *CourseUpdate) SetOwnerID(i int) *CourseUpdate {
	cu.mutation.SetOwnerID(i)
	return cu
}

// SetName sets the "name" field.
func (cu *CourseUpdate) SetName(s string) *CourseUpdate {
	cu.mutation.SetName(s)
	return cu
}

// SetDescription sets the "description" field.
func (cu *CourseUpdate) SetDescription(s string) *CourseUpdate {
	cu.mutation.SetDescription(s)
	return cu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (cu *CourseUpdate) SetNillableDescription(s *string) *CourseUpdate {
	if s != nil {
		cu.SetDescription(*s)
	}
	return cu
}

// ClearDescription clears the value of the "description" field.
func (cu *CourseUpdate) ClearDescription() *CourseUpdate {
	cu.mutation.ClearDescription()
	return cu
}

// SetCreatedAt sets the "created_at" field.
func (cu *CourseUpdate) SetCreatedAt(t time.Time) *CourseUpdate {
	cu.mutation.SetCreatedAt(t)
	return cu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cu *CourseUpdate) SetNillableCreatedAt(t *time.Time) *CourseUpdate {
	if t != nil {
		cu.SetCreatedAt(*t)
	}
	return cu
}

// ClearCreatedAt clears the value of the "created_at" field.
func (cu *CourseUpdate) ClearCreatedAt() *CourseUpdate {
	cu.mutation.ClearCreatedAt()
	return cu
}

// SetUpdatedAt sets the "updated_at" field.
func (cu *CourseUpdate) SetUpdatedAt(t time.Time) *CourseUpdate {
	cu.mutation.SetUpdatedAt(t)
	return cu
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (cu *CourseUpdate) SetNillableUpdatedAt(t *time.Time) *CourseUpdate {
	if t != nil {
		cu.SetUpdatedAt(*t)
	}
	return cu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (cu *CourseUpdate) ClearUpdatedAt() *CourseUpdate {
	cu.mutation.ClearUpdatedAt()
	return cu
}

// SetOwner sets the "owner" edge to the User entity.
func (cu *CourseUpdate) SetOwner(u *User) *CourseUpdate {
	return cu.SetOwnerID(u.ID)
}

// AddClassIDs adds the "classes" edge to the Class entity by IDs.
func (cu *CourseUpdate) AddClassIDs(ids ...int) *CourseUpdate {
	cu.mutation.AddClassIDs(ids...)
	return cu
}

// AddClasses adds the "classes" edges to the Class entity.
func (cu *CourseUpdate) AddClasses(c ...*Class) *CourseUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cu.AddClassIDs(ids...)
}

// AddLabIDs adds the "labs" edge to the Lab entity by IDs.
func (cu *CourseUpdate) AddLabIDs(ids ...int) *CourseUpdate {
	cu.mutation.AddLabIDs(ids...)
	return cu
}

// AddLabs adds the "labs" edges to the Lab entity.
func (cu *CourseUpdate) AddLabs(l ...*Lab) *CourseUpdate {
	ids := make([]int, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return cu.AddLabIDs(ids...)
}

// AddTopicIDs adds the "topics" edge to the Topic entity by IDs.
func (cu *CourseUpdate) AddTopicIDs(ids ...int) *CourseUpdate {
	cu.mutation.AddTopicIDs(ids...)
	return cu
}

// AddTopics adds the "topics" edges to the Topic entity.
func (cu *CourseUpdate) AddTopics(t ...*Topic) *CourseUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return cu.AddTopicIDs(ids...)
}

// AddCourseLabStatusIDs adds the "course_lab_statuses" edge to the Class_Lab_Status entity by IDs.
func (cu *CourseUpdate) AddCourseLabStatusIDs(ids ...int) *CourseUpdate {
	cu.mutation.AddCourseLabStatusIDs(ids...)
	return cu
}

// AddCourseLabStatuses adds the "course_lab_statuses" edges to the Class_Lab_Status entity.
func (cu *CourseUpdate) AddCourseLabStatuses(c ...*Class_Lab_Status) *CourseUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cu.AddCourseLabStatusIDs(ids...)
}

// Mutation returns the CourseMutation object of the builder.
func (cu *CourseUpdate) Mutation() *CourseMutation {
	return cu.mutation
}

// ClearOwner clears the "owner" edge to the User entity.
func (cu *CourseUpdate) ClearOwner() *CourseUpdate {
	cu.mutation.ClearOwner()
	return cu
}

// ClearClasses clears all "classes" edges to the Class entity.
func (cu *CourseUpdate) ClearClasses() *CourseUpdate {
	cu.mutation.ClearClasses()
	return cu
}

// RemoveClassIDs removes the "classes" edge to Class entities by IDs.
func (cu *CourseUpdate) RemoveClassIDs(ids ...int) *CourseUpdate {
	cu.mutation.RemoveClassIDs(ids...)
	return cu
}

// RemoveClasses removes "classes" edges to Class entities.
func (cu *CourseUpdate) RemoveClasses(c ...*Class) *CourseUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cu.RemoveClassIDs(ids...)
}

// ClearLabs clears all "labs" edges to the Lab entity.
func (cu *CourseUpdate) ClearLabs() *CourseUpdate {
	cu.mutation.ClearLabs()
	return cu
}

// RemoveLabIDs removes the "labs" edge to Lab entities by IDs.
func (cu *CourseUpdate) RemoveLabIDs(ids ...int) *CourseUpdate {
	cu.mutation.RemoveLabIDs(ids...)
	return cu
}

// RemoveLabs removes "labs" edges to Lab entities.
func (cu *CourseUpdate) RemoveLabs(l ...*Lab) *CourseUpdate {
	ids := make([]int, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return cu.RemoveLabIDs(ids...)
}

// ClearTopics clears all "topics" edges to the Topic entity.
func (cu *CourseUpdate) ClearTopics() *CourseUpdate {
	cu.mutation.ClearTopics()
	return cu
}

// RemoveTopicIDs removes the "topics" edge to Topic entities by IDs.
func (cu *CourseUpdate) RemoveTopicIDs(ids ...int) *CourseUpdate {
	cu.mutation.RemoveTopicIDs(ids...)
	return cu
}

// RemoveTopics removes "topics" edges to Topic entities.
func (cu *CourseUpdate) RemoveTopics(t ...*Topic) *CourseUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return cu.RemoveTopicIDs(ids...)
}

// ClearCourseLabStatuses clears all "course_lab_statuses" edges to the Class_Lab_Status entity.
func (cu *CourseUpdate) ClearCourseLabStatuses() *CourseUpdate {
	cu.mutation.ClearCourseLabStatuses()
	return cu
}

// RemoveCourseLabStatusIDs removes the "course_lab_statuses" edge to Class_Lab_Status entities by IDs.
func (cu *CourseUpdate) RemoveCourseLabStatusIDs(ids ...int) *CourseUpdate {
	cu.mutation.RemoveCourseLabStatusIDs(ids...)
	return cu
}

// RemoveCourseLabStatuses removes "course_lab_statuses" edges to Class_Lab_Status entities.
func (cu *CourseUpdate) RemoveCourseLabStatuses(c ...*Class_Lab_Status) *CourseUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cu.RemoveCourseLabStatusIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *CourseUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, cu.sqlSave, cu.mutation, cu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cu *CourseUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *CourseUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *CourseUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cu *CourseUpdate) check() error {
	if v, ok := cu.mutation.Name(); ok {
		if err := course.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Course.name": %w`, err)}
		}
	}
	if _, ok := cu.mutation.OwnerID(); cu.mutation.OwnerCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Course.owner"`)
	}
	return nil
}

func (cu *CourseUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := cu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(course.Table, course.Columns, sqlgraph.NewFieldSpec(course.FieldID, field.TypeInt))
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.Name(); ok {
		_spec.SetField(course.FieldName, field.TypeString, value)
	}
	if value, ok := cu.mutation.Description(); ok {
		_spec.SetField(course.FieldDescription, field.TypeString, value)
	}
	if cu.mutation.DescriptionCleared() {
		_spec.ClearField(course.FieldDescription, field.TypeString)
	}
	if value, ok := cu.mutation.CreatedAt(); ok {
		_spec.SetField(course.FieldCreatedAt, field.TypeTime, value)
	}
	if cu.mutation.CreatedAtCleared() {
		_spec.ClearField(course.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := cu.mutation.UpdatedAt(); ok {
		_spec.SetField(course.FieldUpdatedAt, field.TypeTime, value)
	}
	if cu.mutation.UpdatedAtCleared() {
		_spec.ClearField(course.FieldUpdatedAt, field.TypeTime)
	}
	if cu.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   course.OwnerTable,
			Columns: []string{course.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   course.OwnerTable,
			Columns: []string{course.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.ClassesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   course.ClassesTable,
			Columns: []string{course.ClassesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(class.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedClassesIDs(); len(nodes) > 0 && !cu.mutation.ClassesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   course.ClassesTable,
			Columns: []string{course.ClassesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(class.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.ClassesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   course.ClassesTable,
			Columns: []string{course.ClassesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(class.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.LabsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   course.LabsTable,
			Columns: []string{course.LabsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(lab.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedLabsIDs(); len(nodes) > 0 && !cu.mutation.LabsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   course.LabsTable,
			Columns: []string{course.LabsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(lab.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.LabsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   course.LabsTable,
			Columns: []string{course.LabsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(lab.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.TopicsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   course.TopicsTable,
			Columns: []string{course.TopicsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(topic.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedTopicsIDs(); len(nodes) > 0 && !cu.mutation.TopicsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   course.TopicsTable,
			Columns: []string{course.TopicsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(topic.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.TopicsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   course.TopicsTable,
			Columns: []string{course.TopicsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(topic.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.CourseLabStatusesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   course.CourseLabStatusesTable,
			Columns: []string{course.CourseLabStatusesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(class_lab_status.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedCourseLabStatusesIDs(); len(nodes) > 0 && !cu.mutation.CourseLabStatusesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   course.CourseLabStatusesTable,
			Columns: []string{course.CourseLabStatusesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(class_lab_status.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.CourseLabStatusesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   course.CourseLabStatusesTable,
			Columns: []string{course.CourseLabStatusesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(class_lab_status.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{course.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cu.mutation.done = true
	return n, nil
}

// CourseUpdateOne is the builder for updating a single Course entity.
type CourseUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CourseMutation
}

// SetOwnerID sets the "owner_id" field.
func (cuo *CourseUpdateOne) SetOwnerID(i int) *CourseUpdateOne {
	cuo.mutation.SetOwnerID(i)
	return cuo
}

// SetName sets the "name" field.
func (cuo *CourseUpdateOne) SetName(s string) *CourseUpdateOne {
	cuo.mutation.SetName(s)
	return cuo
}

// SetDescription sets the "description" field.
func (cuo *CourseUpdateOne) SetDescription(s string) *CourseUpdateOne {
	cuo.mutation.SetDescription(s)
	return cuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (cuo *CourseUpdateOne) SetNillableDescription(s *string) *CourseUpdateOne {
	if s != nil {
		cuo.SetDescription(*s)
	}
	return cuo
}

// ClearDescription clears the value of the "description" field.
func (cuo *CourseUpdateOne) ClearDescription() *CourseUpdateOne {
	cuo.mutation.ClearDescription()
	return cuo
}

// SetCreatedAt sets the "created_at" field.
func (cuo *CourseUpdateOne) SetCreatedAt(t time.Time) *CourseUpdateOne {
	cuo.mutation.SetCreatedAt(t)
	return cuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cuo *CourseUpdateOne) SetNillableCreatedAt(t *time.Time) *CourseUpdateOne {
	if t != nil {
		cuo.SetCreatedAt(*t)
	}
	return cuo
}

// ClearCreatedAt clears the value of the "created_at" field.
func (cuo *CourseUpdateOne) ClearCreatedAt() *CourseUpdateOne {
	cuo.mutation.ClearCreatedAt()
	return cuo
}

// SetUpdatedAt sets the "updated_at" field.
func (cuo *CourseUpdateOne) SetUpdatedAt(t time.Time) *CourseUpdateOne {
	cuo.mutation.SetUpdatedAt(t)
	return cuo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (cuo *CourseUpdateOne) SetNillableUpdatedAt(t *time.Time) *CourseUpdateOne {
	if t != nil {
		cuo.SetUpdatedAt(*t)
	}
	return cuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (cuo *CourseUpdateOne) ClearUpdatedAt() *CourseUpdateOne {
	cuo.mutation.ClearUpdatedAt()
	return cuo
}

// SetOwner sets the "owner" edge to the User entity.
func (cuo *CourseUpdateOne) SetOwner(u *User) *CourseUpdateOne {
	return cuo.SetOwnerID(u.ID)
}

// AddClassIDs adds the "classes" edge to the Class entity by IDs.
func (cuo *CourseUpdateOne) AddClassIDs(ids ...int) *CourseUpdateOne {
	cuo.mutation.AddClassIDs(ids...)
	return cuo
}

// AddClasses adds the "classes" edges to the Class entity.
func (cuo *CourseUpdateOne) AddClasses(c ...*Class) *CourseUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cuo.AddClassIDs(ids...)
}

// AddLabIDs adds the "labs" edge to the Lab entity by IDs.
func (cuo *CourseUpdateOne) AddLabIDs(ids ...int) *CourseUpdateOne {
	cuo.mutation.AddLabIDs(ids...)
	return cuo
}

// AddLabs adds the "labs" edges to the Lab entity.
func (cuo *CourseUpdateOne) AddLabs(l ...*Lab) *CourseUpdateOne {
	ids := make([]int, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return cuo.AddLabIDs(ids...)
}

// AddTopicIDs adds the "topics" edge to the Topic entity by IDs.
func (cuo *CourseUpdateOne) AddTopicIDs(ids ...int) *CourseUpdateOne {
	cuo.mutation.AddTopicIDs(ids...)
	return cuo
}

// AddTopics adds the "topics" edges to the Topic entity.
func (cuo *CourseUpdateOne) AddTopics(t ...*Topic) *CourseUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return cuo.AddTopicIDs(ids...)
}

// AddCourseLabStatusIDs adds the "course_lab_statuses" edge to the Class_Lab_Status entity by IDs.
func (cuo *CourseUpdateOne) AddCourseLabStatusIDs(ids ...int) *CourseUpdateOne {
	cuo.mutation.AddCourseLabStatusIDs(ids...)
	return cuo
}

// AddCourseLabStatuses adds the "course_lab_statuses" edges to the Class_Lab_Status entity.
func (cuo *CourseUpdateOne) AddCourseLabStatuses(c ...*Class_Lab_Status) *CourseUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cuo.AddCourseLabStatusIDs(ids...)
}

// Mutation returns the CourseMutation object of the builder.
func (cuo *CourseUpdateOne) Mutation() *CourseMutation {
	return cuo.mutation
}

// ClearOwner clears the "owner" edge to the User entity.
func (cuo *CourseUpdateOne) ClearOwner() *CourseUpdateOne {
	cuo.mutation.ClearOwner()
	return cuo
}

// ClearClasses clears all "classes" edges to the Class entity.
func (cuo *CourseUpdateOne) ClearClasses() *CourseUpdateOne {
	cuo.mutation.ClearClasses()
	return cuo
}

// RemoveClassIDs removes the "classes" edge to Class entities by IDs.
func (cuo *CourseUpdateOne) RemoveClassIDs(ids ...int) *CourseUpdateOne {
	cuo.mutation.RemoveClassIDs(ids...)
	return cuo
}

// RemoveClasses removes "classes" edges to Class entities.
func (cuo *CourseUpdateOne) RemoveClasses(c ...*Class) *CourseUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cuo.RemoveClassIDs(ids...)
}

// ClearLabs clears all "labs" edges to the Lab entity.
func (cuo *CourseUpdateOne) ClearLabs() *CourseUpdateOne {
	cuo.mutation.ClearLabs()
	return cuo
}

// RemoveLabIDs removes the "labs" edge to Lab entities by IDs.
func (cuo *CourseUpdateOne) RemoveLabIDs(ids ...int) *CourseUpdateOne {
	cuo.mutation.RemoveLabIDs(ids...)
	return cuo
}

// RemoveLabs removes "labs" edges to Lab entities.
func (cuo *CourseUpdateOne) RemoveLabs(l ...*Lab) *CourseUpdateOne {
	ids := make([]int, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return cuo.RemoveLabIDs(ids...)
}

// ClearTopics clears all "topics" edges to the Topic entity.
func (cuo *CourseUpdateOne) ClearTopics() *CourseUpdateOne {
	cuo.mutation.ClearTopics()
	return cuo
}

// RemoveTopicIDs removes the "topics" edge to Topic entities by IDs.
func (cuo *CourseUpdateOne) RemoveTopicIDs(ids ...int) *CourseUpdateOne {
	cuo.mutation.RemoveTopicIDs(ids...)
	return cuo
}

// RemoveTopics removes "topics" edges to Topic entities.
func (cuo *CourseUpdateOne) RemoveTopics(t ...*Topic) *CourseUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return cuo.RemoveTopicIDs(ids...)
}

// ClearCourseLabStatuses clears all "course_lab_statuses" edges to the Class_Lab_Status entity.
func (cuo *CourseUpdateOne) ClearCourseLabStatuses() *CourseUpdateOne {
	cuo.mutation.ClearCourseLabStatuses()
	return cuo
}

// RemoveCourseLabStatusIDs removes the "course_lab_statuses" edge to Class_Lab_Status entities by IDs.
func (cuo *CourseUpdateOne) RemoveCourseLabStatusIDs(ids ...int) *CourseUpdateOne {
	cuo.mutation.RemoveCourseLabStatusIDs(ids...)
	return cuo
}

// RemoveCourseLabStatuses removes "course_lab_statuses" edges to Class_Lab_Status entities.
func (cuo *CourseUpdateOne) RemoveCourseLabStatuses(c ...*Class_Lab_Status) *CourseUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cuo.RemoveCourseLabStatusIDs(ids...)
}

// Where appends a list predicates to the CourseUpdate builder.
func (cuo *CourseUpdateOne) Where(ps ...predicate.Course) *CourseUpdateOne {
	cuo.mutation.Where(ps...)
	return cuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *CourseUpdateOne) Select(field string, fields ...string) *CourseUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Course entity.
func (cuo *CourseUpdateOne) Save(ctx context.Context) (*Course, error) {
	return withHooks(ctx, cuo.sqlSave, cuo.mutation, cuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *CourseUpdateOne) SaveX(ctx context.Context) *Course {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *CourseUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *CourseUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cuo *CourseUpdateOne) check() error {
	if v, ok := cuo.mutation.Name(); ok {
		if err := course.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Course.name": %w`, err)}
		}
	}
	if _, ok := cuo.mutation.OwnerID(); cuo.mutation.OwnerCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Course.owner"`)
	}
	return nil
}

func (cuo *CourseUpdateOne) sqlSave(ctx context.Context) (_node *Course, err error) {
	if err := cuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(course.Table, course.Columns, sqlgraph.NewFieldSpec(course.FieldID, field.TypeInt))
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Course.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, course.FieldID)
		for _, f := range fields {
			if !course.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != course.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.Name(); ok {
		_spec.SetField(course.FieldName, field.TypeString, value)
	}
	if value, ok := cuo.mutation.Description(); ok {
		_spec.SetField(course.FieldDescription, field.TypeString, value)
	}
	if cuo.mutation.DescriptionCleared() {
		_spec.ClearField(course.FieldDescription, field.TypeString)
	}
	if value, ok := cuo.mutation.CreatedAt(); ok {
		_spec.SetField(course.FieldCreatedAt, field.TypeTime, value)
	}
	if cuo.mutation.CreatedAtCleared() {
		_spec.ClearField(course.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := cuo.mutation.UpdatedAt(); ok {
		_spec.SetField(course.FieldUpdatedAt, field.TypeTime, value)
	}
	if cuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(course.FieldUpdatedAt, field.TypeTime)
	}
	if cuo.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   course.OwnerTable,
			Columns: []string{course.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   course.OwnerTable,
			Columns: []string{course.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.ClassesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   course.ClassesTable,
			Columns: []string{course.ClassesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(class.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedClassesIDs(); len(nodes) > 0 && !cuo.mutation.ClassesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   course.ClassesTable,
			Columns: []string{course.ClassesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(class.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.ClassesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   course.ClassesTable,
			Columns: []string{course.ClassesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(class.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.LabsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   course.LabsTable,
			Columns: []string{course.LabsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(lab.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedLabsIDs(); len(nodes) > 0 && !cuo.mutation.LabsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   course.LabsTable,
			Columns: []string{course.LabsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(lab.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.LabsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   course.LabsTable,
			Columns: []string{course.LabsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(lab.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.TopicsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   course.TopicsTable,
			Columns: []string{course.TopicsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(topic.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedTopicsIDs(); len(nodes) > 0 && !cuo.mutation.TopicsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   course.TopicsTable,
			Columns: []string{course.TopicsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(topic.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.TopicsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   course.TopicsTable,
			Columns: []string{course.TopicsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(topic.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.CourseLabStatusesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   course.CourseLabStatusesTable,
			Columns: []string{course.CourseLabStatusesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(class_lab_status.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedCourseLabStatusesIDs(); len(nodes) > 0 && !cuo.mutation.CourseLabStatusesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   course.CourseLabStatusesTable,
			Columns: []string{course.CourseLabStatusesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(class_lab_status.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.CourseLabStatusesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   course.CourseLabStatusesTable,
			Columns: []string{course.CourseLabStatusesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(class_lab_status.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Course{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{course.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cuo.mutation.done = true
	return _node, nil
}
