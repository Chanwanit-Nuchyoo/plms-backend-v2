// Code generated by ent, DO NOT EDIT.

package ent

import (
	"plms-backend/ent/lab"
	"plms-backend/ent/lab_problem"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Lab_Problem is the model entity for the Lab_Problem schema.
type Lab_Problem struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// LabID holds the value of the "lab_id" field.
	LabID int `json:"lab_id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Prompt holds the value of the "prompt" field.
	Prompt string `json:"prompt,omitempty"`
	// FullScore holds the value of the "full_score" field.
	FullScore float64 `json:"full_score,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the Lab_ProblemQuery when eager-loading is set.
	Edges        Lab_ProblemEdges `json:"edges"`
	selectValues sql.SelectValues
}

// Lab_ProblemEdges holds the relations/edges for other nodes in the graph.
type Lab_ProblemEdges struct {
	// Lab holds the value of the lab edge.
	Lab *Lab `json:"lab,omitempty"`
	// Testcases holds the value of the testcases edge.
	Testcases []*Testcase `json:"testcases,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// LabOrErr returns the Lab value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e Lab_ProblemEdges) LabOrErr() (*Lab, error) {
	if e.loadedTypes[0] {
		if e.Lab == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: lab.Label}
		}
		return e.Lab, nil
	}
	return nil, &NotLoadedError{edge: "lab"}
}

// TestcasesOrErr returns the Testcases value or an error if the edge
// was not loaded in eager-loading.
func (e Lab_ProblemEdges) TestcasesOrErr() ([]*Testcase, error) {
	if e.loadedTypes[1] {
		return e.Testcases, nil
	}
	return nil, &NotLoadedError{edge: "testcases"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Lab_Problem) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case lab_problem.FieldFullScore:
			values[i] = new(sql.NullFloat64)
		case lab_problem.FieldID, lab_problem.FieldLabID:
			values[i] = new(sql.NullInt64)
		case lab_problem.FieldName, lab_problem.FieldPrompt:
			values[i] = new(sql.NullString)
		case lab_problem.FieldCreatedAt, lab_problem.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Lab_Problem fields.
func (lp *Lab_Problem) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case lab_problem.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			lp.ID = int(value.Int64)
		case lab_problem.FieldLabID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field lab_id", values[i])
			} else if value.Valid {
				lp.LabID = int(value.Int64)
			}
		case lab_problem.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				lp.Name = value.String
			}
		case lab_problem.FieldPrompt:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field prompt", values[i])
			} else if value.Valid {
				lp.Prompt = value.String
			}
		case lab_problem.FieldFullScore:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field full_score", values[i])
			} else if value.Valid {
				lp.FullScore = value.Float64
			}
		case lab_problem.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				lp.CreatedAt = value.Time
			}
		case lab_problem.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				lp.UpdatedAt = value.Time
			}
		default:
			lp.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Lab_Problem.
// This includes values selected through modifiers, order, etc.
func (lp *Lab_Problem) Value(name string) (ent.Value, error) {
	return lp.selectValues.Get(name)
}

// QueryLab queries the "lab" edge of the Lab_Problem entity.
func (lp *Lab_Problem) QueryLab() *LabQuery {
	return NewLabProblemClient(lp.config).QueryLab(lp)
}

// QueryTestcases queries the "testcases" edge of the Lab_Problem entity.
func (lp *Lab_Problem) QueryTestcases() *TestcaseQuery {
	return NewLabProblemClient(lp.config).QueryTestcases(lp)
}

// Update returns a builder for updating this Lab_Problem.
// Note that you need to call Lab_Problem.Unwrap() before calling this method if this Lab_Problem
// was returned from a transaction, and the transaction was committed or rolled back.
func (lp *Lab_Problem) Update() *LabProblemUpdateOne {
	return NewLabProblemClient(lp.config).UpdateOne(lp)
}

// Unwrap unwraps the Lab_Problem entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (lp *Lab_Problem) Unwrap() *Lab_Problem {
	_tx, ok := lp.config.driver.(*txDriver)
	if !ok {
		panic("ent: Lab_Problem is not a transactional entity")
	}
	lp.config.driver = _tx.drv
	return lp
}

// String implements the fmt.Stringer.
func (lp *Lab_Problem) String() string {
	var builder strings.Builder
	builder.WriteString("Lab_Problem(")
	builder.WriteString(fmt.Sprintf("id=%v, ", lp.ID))
	builder.WriteString("lab_id=")
	builder.WriteString(fmt.Sprintf("%v", lp.LabID))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(lp.Name)
	builder.WriteString(", ")
	builder.WriteString("prompt=")
	builder.WriteString(lp.Prompt)
	builder.WriteString(", ")
	builder.WriteString("full_score=")
	builder.WriteString(fmt.Sprintf("%v", lp.FullScore))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(lp.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(lp.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Lab_Problems is a parsable slice of Lab_Problem.
type Lab_Problems []*Lab_Problem
