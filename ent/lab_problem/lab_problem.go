// Code generated by ent, DO NOT EDIT.

package lab_problem

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the lab_problem type in the database.
	Label = "lab_problem"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldLabID holds the string denoting the lab_id field in the database.
	FieldLabID = "lab_id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldPrompt holds the string denoting the prompt field in the database.
	FieldPrompt = "prompt"
	// FieldFullScore holds the string denoting the full_score field in the database.
	FieldFullScore = "full_score"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeLab holds the string denoting the lab edge name in mutations.
	EdgeLab = "lab"
	// EdgeTestcases holds the string denoting the testcases edge name in mutations.
	EdgeTestcases = "testcases"
	// Table holds the table name of the lab_problem in the database.
	Table = "lab_problems"
	// LabTable is the table that holds the lab relation/edge.
	LabTable = "lab_problems"
	// LabInverseTable is the table name for the Lab entity.
	// It exists in this package in order to avoid circular dependency with the "lab" package.
	LabInverseTable = "labs"
	// LabColumn is the table column denoting the lab relation/edge.
	LabColumn = "lab_id"
	// TestcasesTable is the table that holds the testcases relation/edge.
	TestcasesTable = "testcases"
	// TestcasesInverseTable is the table name for the Testcase entity.
	// It exists in this package in order to avoid circular dependency with the "testcase" package.
	TestcasesInverseTable = "testcases"
	// TestcasesColumn is the table column denoting the testcases relation/edge.
	TestcasesColumn = "lab_problem_id"
)

// Columns holds all SQL columns for lab_problem fields.
var Columns = []string{
	FieldID,
	FieldLabID,
	FieldName,
	FieldPrompt,
	FieldFullScore,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// PromptValidator is a validator for the "prompt" field. It is called by the builders before save.
	PromptValidator func(string) error
	// FullScoreValidator is a validator for the "full_score" field. It is called by the builders before save.
	FullScoreValidator func(float64) error
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt time.Time
)

// OrderOption defines the ordering options for the Lab_Problem queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByLabID orders the results by the lab_id field.
func ByLabID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLabID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByPrompt orders the results by the prompt field.
func ByPrompt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPrompt, opts...).ToFunc()
}

// ByFullScore orders the results by the full_score field.
func ByFullScore(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFullScore, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByLabField orders the results by lab field.
func ByLabField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newLabStep(), sql.OrderByField(field, opts...))
	}
}

// ByTestcasesCount orders the results by testcases count.
func ByTestcasesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newTestcasesStep(), opts...)
	}
}

// ByTestcases orders the results by testcases terms.
func ByTestcases(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTestcasesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newLabStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(LabInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, LabTable, LabColumn),
	)
}
func newTestcasesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TestcasesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, TestcasesTable, TestcasesColumn),
	)
}
