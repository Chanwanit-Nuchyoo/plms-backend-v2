// Code generated by ent, DO NOT EDIT.

package ent

import (
	"plms-backend/ent/lab_problem_submission"
	"plms-backend/ent/user"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Lab_Problem_Submission is the model entity for the Lab_Problem_Submission schema.
type Lab_Problem_Submission struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// OwnerID holds the value of the "owner_id" field.
	OwnerID int `json:"owner_id,omitempty"`
	// LabProblemID holds the value of the "lab_problem_id" field.
	LabProblemID int `json:"lab_problem_id,omitempty"`
	// Code holds the value of the "code" field.
	Code string `json:"code,omitempty"`
	// Score holds the value of the "score" field.
	Score float64 `json:"score,omitempty"`
	// Feedback holds the value of the "feedback" field.
	Feedback string `json:"feedback,omitempty"`
	// InstructorScore holds the value of the "instructor_score" field.
	InstructorScore float64 `json:"instructor_score,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the Lab_Problem_SubmissionQuery when eager-loading is set.
	Edges        Lab_Problem_SubmissionEdges `json:"edges"`
	selectValues sql.SelectValues
}

// Lab_Problem_SubmissionEdges holds the relations/edges for other nodes in the graph.
type Lab_Problem_SubmissionEdges struct {
	// Owner holds the value of the owner edge.
	Owner *User `json:"owner,omitempty"`
	// TestcaseSubmissions holds the value of the testcase_submissions edge.
	TestcaseSubmissions []*Testcase_Submission `json:"testcase_submissions,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// OwnerOrErr returns the Owner value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e Lab_Problem_SubmissionEdges) OwnerOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.Owner == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.Owner, nil
	}
	return nil, &NotLoadedError{edge: "owner"}
}

// TestcaseSubmissionsOrErr returns the TestcaseSubmissions value or an error if the edge
// was not loaded in eager-loading.
func (e Lab_Problem_SubmissionEdges) TestcaseSubmissionsOrErr() ([]*Testcase_Submission, error) {
	if e.loadedTypes[1] {
		return e.TestcaseSubmissions, nil
	}
	return nil, &NotLoadedError{edge: "testcase_submissions"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Lab_Problem_Submission) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case lab_problem_submission.FieldScore, lab_problem_submission.FieldInstructorScore:
			values[i] = new(sql.NullFloat64)
		case lab_problem_submission.FieldID, lab_problem_submission.FieldOwnerID, lab_problem_submission.FieldLabProblemID:
			values[i] = new(sql.NullInt64)
		case lab_problem_submission.FieldCode, lab_problem_submission.FieldFeedback:
			values[i] = new(sql.NullString)
		case lab_problem_submission.FieldCreatedAt, lab_problem_submission.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Lab_Problem_Submission fields.
func (lps *Lab_Problem_Submission) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case lab_problem_submission.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			lps.ID = int(value.Int64)
		case lab_problem_submission.FieldOwnerID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field owner_id", values[i])
			} else if value.Valid {
				lps.OwnerID = int(value.Int64)
			}
		case lab_problem_submission.FieldLabProblemID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field lab_problem_id", values[i])
			} else if value.Valid {
				lps.LabProblemID = int(value.Int64)
			}
		case lab_problem_submission.FieldCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field code", values[i])
			} else if value.Valid {
				lps.Code = value.String
			}
		case lab_problem_submission.FieldScore:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field score", values[i])
			} else if value.Valid {
				lps.Score = value.Float64
			}
		case lab_problem_submission.FieldFeedback:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field feedback", values[i])
			} else if value.Valid {
				lps.Feedback = value.String
			}
		case lab_problem_submission.FieldInstructorScore:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field instructor_score", values[i])
			} else if value.Valid {
				lps.InstructorScore = value.Float64
			}
		case lab_problem_submission.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				lps.CreatedAt = value.Time
			}
		case lab_problem_submission.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				lps.UpdatedAt = value.Time
			}
		default:
			lps.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Lab_Problem_Submission.
// This includes values selected through modifiers, order, etc.
func (lps *Lab_Problem_Submission) Value(name string) (ent.Value, error) {
	return lps.selectValues.Get(name)
}

// QueryOwner queries the "owner" edge of the Lab_Problem_Submission entity.
func (lps *Lab_Problem_Submission) QueryOwner() *UserQuery {
	return NewLabProblemSubmissionClient(lps.config).QueryOwner(lps)
}

// QueryTestcaseSubmissions queries the "testcase_submissions" edge of the Lab_Problem_Submission entity.
func (lps *Lab_Problem_Submission) QueryTestcaseSubmissions() *TestcaseSubmissionQuery {
	return NewLabProblemSubmissionClient(lps.config).QueryTestcaseSubmissions(lps)
}

// Update returns a builder for updating this Lab_Problem_Submission.
// Note that you need to call Lab_Problem_Submission.Unwrap() before calling this method if this Lab_Problem_Submission
// was returned from a transaction, and the transaction was committed or rolled back.
func (lps *Lab_Problem_Submission) Update() *LabProblemSubmissionUpdateOne {
	return NewLabProblemSubmissionClient(lps.config).UpdateOne(lps)
}

// Unwrap unwraps the Lab_Problem_Submission entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (lps *Lab_Problem_Submission) Unwrap() *Lab_Problem_Submission {
	_tx, ok := lps.config.driver.(*txDriver)
	if !ok {
		panic("ent: Lab_Problem_Submission is not a transactional entity")
	}
	lps.config.driver = _tx.drv
	return lps
}

// String implements the fmt.Stringer.
func (lps *Lab_Problem_Submission) String() string {
	var builder strings.Builder
	builder.WriteString("Lab_Problem_Submission(")
	builder.WriteString(fmt.Sprintf("id=%v, ", lps.ID))
	builder.WriteString("owner_id=")
	builder.WriteString(fmt.Sprintf("%v", lps.OwnerID))
	builder.WriteString(", ")
	builder.WriteString("lab_problem_id=")
	builder.WriteString(fmt.Sprintf("%v", lps.LabProblemID))
	builder.WriteString(", ")
	builder.WriteString("code=")
	builder.WriteString(lps.Code)
	builder.WriteString(", ")
	builder.WriteString("score=")
	builder.WriteString(fmt.Sprintf("%v", lps.Score))
	builder.WriteString(", ")
	builder.WriteString("feedback=")
	builder.WriteString(lps.Feedback)
	builder.WriteString(", ")
	builder.WriteString("instructor_score=")
	builder.WriteString(fmt.Sprintf("%v", lps.InstructorScore))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(lps.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(lps.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Lab_Problem_Submissions is a parsable slice of Lab_Problem_Submission.
type Lab_Problem_Submissions []*Lab_Problem_Submission
