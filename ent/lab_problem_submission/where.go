// Code generated by ent, DO NOT EDIT.

package lab_problem_submission

import (
	"plms-backend/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Lab_Problem_Submission {
	return predicate.Lab_Problem_Submission(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Lab_Problem_Submission {
	return predicate.Lab_Problem_Submission(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Lab_Problem_Submission {
	return predicate.Lab_Problem_Submission(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Lab_Problem_Submission {
	return predicate.Lab_Problem_Submission(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Lab_Problem_Submission {
	return predicate.Lab_Problem_Submission(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Lab_Problem_Submission {
	return predicate.Lab_Problem_Submission(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Lab_Problem_Submission {
	return predicate.Lab_Problem_Submission(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Lab_Problem_Submission {
	return predicate.Lab_Problem_Submission(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Lab_Problem_Submission {
	return predicate.Lab_Problem_Submission(sql.FieldLTE(FieldID, id))
}

// OwnerID applies equality check predicate on the "owner_id" field. It's identical to OwnerIDEQ.
func OwnerID(v int) predicate.Lab_Problem_Submission {
	return predicate.Lab_Problem_Submission(sql.FieldEQ(FieldOwnerID, v))
}

// LabProblemID applies equality check predicate on the "lab_problem_id" field. It's identical to LabProblemIDEQ.
func LabProblemID(v int) predicate.Lab_Problem_Submission {
	return predicate.Lab_Problem_Submission(sql.FieldEQ(FieldLabProblemID, v))
}

// Code applies equality check predicate on the "code" field. It's identical to CodeEQ.
func Code(v string) predicate.Lab_Problem_Submission {
	return predicate.Lab_Problem_Submission(sql.FieldEQ(FieldCode, v))
}

// Score applies equality check predicate on the "score" field. It's identical to ScoreEQ.
func Score(v float64) predicate.Lab_Problem_Submission {
	return predicate.Lab_Problem_Submission(sql.FieldEQ(FieldScore, v))
}

// Feedback applies equality check predicate on the "feedback" field. It's identical to FeedbackEQ.
func Feedback(v string) predicate.Lab_Problem_Submission {
	return predicate.Lab_Problem_Submission(sql.FieldEQ(FieldFeedback, v))
}

// InstructorScore applies equality check predicate on the "instructor_score" field. It's identical to InstructorScoreEQ.
func InstructorScore(v float64) predicate.Lab_Problem_Submission {
	return predicate.Lab_Problem_Submission(sql.FieldEQ(FieldInstructorScore, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Lab_Problem_Submission {
	return predicate.Lab_Problem_Submission(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Lab_Problem_Submission {
	return predicate.Lab_Problem_Submission(sql.FieldEQ(FieldUpdatedAt, v))
}

// OwnerIDEQ applies the EQ predicate on the "owner_id" field.
func OwnerIDEQ(v int) predicate.Lab_Problem_Submission {
	return predicate.Lab_Problem_Submission(sql.FieldEQ(FieldOwnerID, v))
}

// OwnerIDNEQ applies the NEQ predicate on the "owner_id" field.
func OwnerIDNEQ(v int) predicate.Lab_Problem_Submission {
	return predicate.Lab_Problem_Submission(sql.FieldNEQ(FieldOwnerID, v))
}

// OwnerIDIn applies the In predicate on the "owner_id" field.
func OwnerIDIn(vs ...int) predicate.Lab_Problem_Submission {
	return predicate.Lab_Problem_Submission(sql.FieldIn(FieldOwnerID, vs...))
}

// OwnerIDNotIn applies the NotIn predicate on the "owner_id" field.
func OwnerIDNotIn(vs ...int) predicate.Lab_Problem_Submission {
	return predicate.Lab_Problem_Submission(sql.FieldNotIn(FieldOwnerID, vs...))
}

// LabProblemIDEQ applies the EQ predicate on the "lab_problem_id" field.
func LabProblemIDEQ(v int) predicate.Lab_Problem_Submission {
	return predicate.Lab_Problem_Submission(sql.FieldEQ(FieldLabProblemID, v))
}

// LabProblemIDNEQ applies the NEQ predicate on the "lab_problem_id" field.
func LabProblemIDNEQ(v int) predicate.Lab_Problem_Submission {
	return predicate.Lab_Problem_Submission(sql.FieldNEQ(FieldLabProblemID, v))
}

// LabProblemIDIn applies the In predicate on the "lab_problem_id" field.
func LabProblemIDIn(vs ...int) predicate.Lab_Problem_Submission {
	return predicate.Lab_Problem_Submission(sql.FieldIn(FieldLabProblemID, vs...))
}

// LabProblemIDNotIn applies the NotIn predicate on the "lab_problem_id" field.
func LabProblemIDNotIn(vs ...int) predicate.Lab_Problem_Submission {
	return predicate.Lab_Problem_Submission(sql.FieldNotIn(FieldLabProblemID, vs...))
}

// LabProblemIDGT applies the GT predicate on the "lab_problem_id" field.
func LabProblemIDGT(v int) predicate.Lab_Problem_Submission {
	return predicate.Lab_Problem_Submission(sql.FieldGT(FieldLabProblemID, v))
}

// LabProblemIDGTE applies the GTE predicate on the "lab_problem_id" field.
func LabProblemIDGTE(v int) predicate.Lab_Problem_Submission {
	return predicate.Lab_Problem_Submission(sql.FieldGTE(FieldLabProblemID, v))
}

// LabProblemIDLT applies the LT predicate on the "lab_problem_id" field.
func LabProblemIDLT(v int) predicate.Lab_Problem_Submission {
	return predicate.Lab_Problem_Submission(sql.FieldLT(FieldLabProblemID, v))
}

// LabProblemIDLTE applies the LTE predicate on the "lab_problem_id" field.
func LabProblemIDLTE(v int) predicate.Lab_Problem_Submission {
	return predicate.Lab_Problem_Submission(sql.FieldLTE(FieldLabProblemID, v))
}

// CodeEQ applies the EQ predicate on the "code" field.
func CodeEQ(v string) predicate.Lab_Problem_Submission {
	return predicate.Lab_Problem_Submission(sql.FieldEQ(FieldCode, v))
}

// CodeNEQ applies the NEQ predicate on the "code" field.
func CodeNEQ(v string) predicate.Lab_Problem_Submission {
	return predicate.Lab_Problem_Submission(sql.FieldNEQ(FieldCode, v))
}

// CodeIn applies the In predicate on the "code" field.
func CodeIn(vs ...string) predicate.Lab_Problem_Submission {
	return predicate.Lab_Problem_Submission(sql.FieldIn(FieldCode, vs...))
}

// CodeNotIn applies the NotIn predicate on the "code" field.
func CodeNotIn(vs ...string) predicate.Lab_Problem_Submission {
	return predicate.Lab_Problem_Submission(sql.FieldNotIn(FieldCode, vs...))
}

// CodeGT applies the GT predicate on the "code" field.
func CodeGT(v string) predicate.Lab_Problem_Submission {
	return predicate.Lab_Problem_Submission(sql.FieldGT(FieldCode, v))
}

// CodeGTE applies the GTE predicate on the "code" field.
func CodeGTE(v string) predicate.Lab_Problem_Submission {
	return predicate.Lab_Problem_Submission(sql.FieldGTE(FieldCode, v))
}

// CodeLT applies the LT predicate on the "code" field.
func CodeLT(v string) predicate.Lab_Problem_Submission {
	return predicate.Lab_Problem_Submission(sql.FieldLT(FieldCode, v))
}

// CodeLTE applies the LTE predicate on the "code" field.
func CodeLTE(v string) predicate.Lab_Problem_Submission {
	return predicate.Lab_Problem_Submission(sql.FieldLTE(FieldCode, v))
}

// CodeContains applies the Contains predicate on the "code" field.
func CodeContains(v string) predicate.Lab_Problem_Submission {
	return predicate.Lab_Problem_Submission(sql.FieldContains(FieldCode, v))
}

// CodeHasPrefix applies the HasPrefix predicate on the "code" field.
func CodeHasPrefix(v string) predicate.Lab_Problem_Submission {
	return predicate.Lab_Problem_Submission(sql.FieldHasPrefix(FieldCode, v))
}

// CodeHasSuffix applies the HasSuffix predicate on the "code" field.
func CodeHasSuffix(v string) predicate.Lab_Problem_Submission {
	return predicate.Lab_Problem_Submission(sql.FieldHasSuffix(FieldCode, v))
}

// CodeEqualFold applies the EqualFold predicate on the "code" field.
func CodeEqualFold(v string) predicate.Lab_Problem_Submission {
	return predicate.Lab_Problem_Submission(sql.FieldEqualFold(FieldCode, v))
}

// CodeContainsFold applies the ContainsFold predicate on the "code" field.
func CodeContainsFold(v string) predicate.Lab_Problem_Submission {
	return predicate.Lab_Problem_Submission(sql.FieldContainsFold(FieldCode, v))
}

// ScoreEQ applies the EQ predicate on the "score" field.
func ScoreEQ(v float64) predicate.Lab_Problem_Submission {
	return predicate.Lab_Problem_Submission(sql.FieldEQ(FieldScore, v))
}

// ScoreNEQ applies the NEQ predicate on the "score" field.
func ScoreNEQ(v float64) predicate.Lab_Problem_Submission {
	return predicate.Lab_Problem_Submission(sql.FieldNEQ(FieldScore, v))
}

// ScoreIn applies the In predicate on the "score" field.
func ScoreIn(vs ...float64) predicate.Lab_Problem_Submission {
	return predicate.Lab_Problem_Submission(sql.FieldIn(FieldScore, vs...))
}

// ScoreNotIn applies the NotIn predicate on the "score" field.
func ScoreNotIn(vs ...float64) predicate.Lab_Problem_Submission {
	return predicate.Lab_Problem_Submission(sql.FieldNotIn(FieldScore, vs...))
}

// ScoreGT applies the GT predicate on the "score" field.
func ScoreGT(v float64) predicate.Lab_Problem_Submission {
	return predicate.Lab_Problem_Submission(sql.FieldGT(FieldScore, v))
}

// ScoreGTE applies the GTE predicate on the "score" field.
func ScoreGTE(v float64) predicate.Lab_Problem_Submission {
	return predicate.Lab_Problem_Submission(sql.FieldGTE(FieldScore, v))
}

// ScoreLT applies the LT predicate on the "score" field.
func ScoreLT(v float64) predicate.Lab_Problem_Submission {
	return predicate.Lab_Problem_Submission(sql.FieldLT(FieldScore, v))
}

// ScoreLTE applies the LTE predicate on the "score" field.
func ScoreLTE(v float64) predicate.Lab_Problem_Submission {
	return predicate.Lab_Problem_Submission(sql.FieldLTE(FieldScore, v))
}

// FeedbackEQ applies the EQ predicate on the "feedback" field.
func FeedbackEQ(v string) predicate.Lab_Problem_Submission {
	return predicate.Lab_Problem_Submission(sql.FieldEQ(FieldFeedback, v))
}

// FeedbackNEQ applies the NEQ predicate on the "feedback" field.
func FeedbackNEQ(v string) predicate.Lab_Problem_Submission {
	return predicate.Lab_Problem_Submission(sql.FieldNEQ(FieldFeedback, v))
}

// FeedbackIn applies the In predicate on the "feedback" field.
func FeedbackIn(vs ...string) predicate.Lab_Problem_Submission {
	return predicate.Lab_Problem_Submission(sql.FieldIn(FieldFeedback, vs...))
}

// FeedbackNotIn applies the NotIn predicate on the "feedback" field.
func FeedbackNotIn(vs ...string) predicate.Lab_Problem_Submission {
	return predicate.Lab_Problem_Submission(sql.FieldNotIn(FieldFeedback, vs...))
}

// FeedbackGT applies the GT predicate on the "feedback" field.
func FeedbackGT(v string) predicate.Lab_Problem_Submission {
	return predicate.Lab_Problem_Submission(sql.FieldGT(FieldFeedback, v))
}

// FeedbackGTE applies the GTE predicate on the "feedback" field.
func FeedbackGTE(v string) predicate.Lab_Problem_Submission {
	return predicate.Lab_Problem_Submission(sql.FieldGTE(FieldFeedback, v))
}

// FeedbackLT applies the LT predicate on the "feedback" field.
func FeedbackLT(v string) predicate.Lab_Problem_Submission {
	return predicate.Lab_Problem_Submission(sql.FieldLT(FieldFeedback, v))
}

// FeedbackLTE applies the LTE predicate on the "feedback" field.
func FeedbackLTE(v string) predicate.Lab_Problem_Submission {
	return predicate.Lab_Problem_Submission(sql.FieldLTE(FieldFeedback, v))
}

// FeedbackContains applies the Contains predicate on the "feedback" field.
func FeedbackContains(v string) predicate.Lab_Problem_Submission {
	return predicate.Lab_Problem_Submission(sql.FieldContains(FieldFeedback, v))
}

// FeedbackHasPrefix applies the HasPrefix predicate on the "feedback" field.
func FeedbackHasPrefix(v string) predicate.Lab_Problem_Submission {
	return predicate.Lab_Problem_Submission(sql.FieldHasPrefix(FieldFeedback, v))
}

// FeedbackHasSuffix applies the HasSuffix predicate on the "feedback" field.
func FeedbackHasSuffix(v string) predicate.Lab_Problem_Submission {
	return predicate.Lab_Problem_Submission(sql.FieldHasSuffix(FieldFeedback, v))
}

// FeedbackIsNil applies the IsNil predicate on the "feedback" field.
func FeedbackIsNil() predicate.Lab_Problem_Submission {
	return predicate.Lab_Problem_Submission(sql.FieldIsNull(FieldFeedback))
}

// FeedbackNotNil applies the NotNil predicate on the "feedback" field.
func FeedbackNotNil() predicate.Lab_Problem_Submission {
	return predicate.Lab_Problem_Submission(sql.FieldNotNull(FieldFeedback))
}

// FeedbackEqualFold applies the EqualFold predicate on the "feedback" field.
func FeedbackEqualFold(v string) predicate.Lab_Problem_Submission {
	return predicate.Lab_Problem_Submission(sql.FieldEqualFold(FieldFeedback, v))
}

// FeedbackContainsFold applies the ContainsFold predicate on the "feedback" field.
func FeedbackContainsFold(v string) predicate.Lab_Problem_Submission {
	return predicate.Lab_Problem_Submission(sql.FieldContainsFold(FieldFeedback, v))
}

// InstructorScoreEQ applies the EQ predicate on the "instructor_score" field.
func InstructorScoreEQ(v float64) predicate.Lab_Problem_Submission {
	return predicate.Lab_Problem_Submission(sql.FieldEQ(FieldInstructorScore, v))
}

// InstructorScoreNEQ applies the NEQ predicate on the "instructor_score" field.
func InstructorScoreNEQ(v float64) predicate.Lab_Problem_Submission {
	return predicate.Lab_Problem_Submission(sql.FieldNEQ(FieldInstructorScore, v))
}

// InstructorScoreIn applies the In predicate on the "instructor_score" field.
func InstructorScoreIn(vs ...float64) predicate.Lab_Problem_Submission {
	return predicate.Lab_Problem_Submission(sql.FieldIn(FieldInstructorScore, vs...))
}

// InstructorScoreNotIn applies the NotIn predicate on the "instructor_score" field.
func InstructorScoreNotIn(vs ...float64) predicate.Lab_Problem_Submission {
	return predicate.Lab_Problem_Submission(sql.FieldNotIn(FieldInstructorScore, vs...))
}

// InstructorScoreGT applies the GT predicate on the "instructor_score" field.
func InstructorScoreGT(v float64) predicate.Lab_Problem_Submission {
	return predicate.Lab_Problem_Submission(sql.FieldGT(FieldInstructorScore, v))
}

// InstructorScoreGTE applies the GTE predicate on the "instructor_score" field.
func InstructorScoreGTE(v float64) predicate.Lab_Problem_Submission {
	return predicate.Lab_Problem_Submission(sql.FieldGTE(FieldInstructorScore, v))
}

// InstructorScoreLT applies the LT predicate on the "instructor_score" field.
func InstructorScoreLT(v float64) predicate.Lab_Problem_Submission {
	return predicate.Lab_Problem_Submission(sql.FieldLT(FieldInstructorScore, v))
}

// InstructorScoreLTE applies the LTE predicate on the "instructor_score" field.
func InstructorScoreLTE(v float64) predicate.Lab_Problem_Submission {
	return predicate.Lab_Problem_Submission(sql.FieldLTE(FieldInstructorScore, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Lab_Problem_Submission {
	return predicate.Lab_Problem_Submission(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Lab_Problem_Submission {
	return predicate.Lab_Problem_Submission(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Lab_Problem_Submission {
	return predicate.Lab_Problem_Submission(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Lab_Problem_Submission {
	return predicate.Lab_Problem_Submission(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Lab_Problem_Submission {
	return predicate.Lab_Problem_Submission(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Lab_Problem_Submission {
	return predicate.Lab_Problem_Submission(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Lab_Problem_Submission {
	return predicate.Lab_Problem_Submission(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Lab_Problem_Submission {
	return predicate.Lab_Problem_Submission(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Lab_Problem_Submission {
	return predicate.Lab_Problem_Submission(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Lab_Problem_Submission {
	return predicate.Lab_Problem_Submission(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Lab_Problem_Submission {
	return predicate.Lab_Problem_Submission(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Lab_Problem_Submission {
	return predicate.Lab_Problem_Submission(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Lab_Problem_Submission {
	return predicate.Lab_Problem_Submission(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Lab_Problem_Submission {
	return predicate.Lab_Problem_Submission(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Lab_Problem_Submission {
	return predicate.Lab_Problem_Submission(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Lab_Problem_Submission {
	return predicate.Lab_Problem_Submission(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasOwner applies the HasEdge predicate on the "owner" edge.
func HasOwner() predicate.Lab_Problem_Submission {
	return predicate.Lab_Problem_Submission(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, OwnerTable, OwnerColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOwnerWith applies the HasEdge predicate on the "owner" edge with a given conditions (other predicates).
func HasOwnerWith(preds ...predicate.User) predicate.Lab_Problem_Submission {
	return predicate.Lab_Problem_Submission(func(s *sql.Selector) {
		step := newOwnerStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasTestcaseSubmissions applies the HasEdge predicate on the "testcase_submissions" edge.
func HasTestcaseSubmissions() predicate.Lab_Problem_Submission {
	return predicate.Lab_Problem_Submission(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, TestcaseSubmissionsTable, TestcaseSubmissionsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTestcaseSubmissionsWith applies the HasEdge predicate on the "testcase_submissions" edge with a given conditions (other predicates).
func HasTestcaseSubmissionsWith(preds ...predicate.Testcase_Submission) predicate.Lab_Problem_Submission {
	return predicate.Lab_Problem_Submission(func(s *sql.Selector) {
		step := newTestcaseSubmissionsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Lab_Problem_Submission) predicate.Lab_Problem_Submission {
	return predicate.Lab_Problem_Submission(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Lab_Problem_Submission) predicate.Lab_Problem_Submission {
	return predicate.Lab_Problem_Submission(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Lab_Problem_Submission) predicate.Lab_Problem_Submission {
	return predicate.Lab_Problem_Submission(func(s *sql.Selector) {
		p(s.Not())
	})
}
