// Code generated by ent, DO NOT EDIT.

package lab_problem_submission

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the lab_problem_submission type in the database.
	Label = "lab_problem_submission"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldOwnerID holds the string denoting the owner_id field in the database.
	FieldOwnerID = "owner_id"
	// FieldLabProblemID holds the string denoting the lab_problem_id field in the database.
	FieldLabProblemID = "lab_problem_id"
	// FieldCode holds the string denoting the code field in the database.
	FieldCode = "code"
	// FieldScore holds the string denoting the score field in the database.
	FieldScore = "score"
	// FieldFeedback holds the string denoting the feedback field in the database.
	FieldFeedback = "feedback"
	// FieldInstructorScore holds the string denoting the instructor_score field in the database.
	FieldInstructorScore = "instructor_score"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeOwner holds the string denoting the owner edge name in mutations.
	EdgeOwner = "owner"
	// EdgeTestcaseSubmissions holds the string denoting the testcase_submissions edge name in mutations.
	EdgeTestcaseSubmissions = "testcase_submissions"
	// Table holds the table name of the lab_problem_submission in the database.
	Table = "lab_problem_submissions"
	// OwnerTable is the table that holds the owner relation/edge.
	OwnerTable = "lab_problem_submissions"
	// OwnerInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	OwnerInverseTable = "users"
	// OwnerColumn is the table column denoting the owner relation/edge.
	OwnerColumn = "owner_id"
	// TestcaseSubmissionsTable is the table that holds the testcase_submissions relation/edge.
	TestcaseSubmissionsTable = "testcase_submissions"
	// TestcaseSubmissionsInverseTable is the table name for the Testcase_Submission entity.
	// It exists in this package in order to avoid circular dependency with the "testcase_submission" package.
	TestcaseSubmissionsInverseTable = "testcase_submissions"
	// TestcaseSubmissionsColumn is the table column denoting the testcase_submissions relation/edge.
	TestcaseSubmissionsColumn = "submission_id"
)

// Columns holds all SQL columns for lab_problem_submission fields.
var Columns = []string{
	FieldID,
	FieldOwnerID,
	FieldLabProblemID,
	FieldCode,
	FieldScore,
	FieldFeedback,
	FieldInstructorScore,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// ScoreValidator is a validator for the "score" field. It is called by the builders before save.
	ScoreValidator func(float64) error
	// InstructorScoreValidator is a validator for the "instructor_score" field. It is called by the builders before save.
	InstructorScoreValidator func(float64) error
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt time.Time
)

// OrderOption defines the ordering options for the Lab_Problem_Submission queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByOwnerID orders the results by the owner_id field.
func ByOwnerID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOwnerID, opts...).ToFunc()
}

// ByLabProblemID orders the results by the lab_problem_id field.
func ByLabProblemID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLabProblemID, opts...).ToFunc()
}

// ByCode orders the results by the code field.
func ByCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCode, opts...).ToFunc()
}

// ByScore orders the results by the score field.
func ByScore(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldScore, opts...).ToFunc()
}

// ByFeedback orders the results by the feedback field.
func ByFeedback(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFeedback, opts...).ToFunc()
}

// ByInstructorScore orders the results by the instructor_score field.
func ByInstructorScore(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldInstructorScore, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByOwnerField orders the results by owner field.
func ByOwnerField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOwnerStep(), sql.OrderByField(field, opts...))
	}
}

// ByTestcaseSubmissionsCount orders the results by testcase_submissions count.
func ByTestcaseSubmissionsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newTestcaseSubmissionsStep(), opts...)
	}
}

// ByTestcaseSubmissions orders the results by testcase_submissions terms.
func ByTestcaseSubmissions(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTestcaseSubmissionsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newOwnerStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OwnerInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, OwnerTable, OwnerColumn),
	)
}
func newTestcaseSubmissionsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TestcaseSubmissionsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, TestcaseSubmissionsTable, TestcaseSubmissionsColumn),
	)
}
