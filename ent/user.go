// Code generated by ent, DO NOT EDIT.

package ent

import (
	"plms-backend/ent/user"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// User is the model entity for the User schema.
type User struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Username holds the value of the "username" field.
	Username string `json:"username,omitempty"`
	// Email holds the value of the "email" field.
	Email string `json:"email,omitempty"`
	// Password holds the value of the "password" field.
	Password string `json:"password,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// ImagePath holds the value of the "image_path" field.
	ImagePath string `json:"image_path,omitempty"`
	// LastOnline holds the value of the "last_online" field.
	LastOnline time.Time `json:"last_online,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// IsAdmin holds the value of the "is_admin" field.
	IsAdmin bool `json:"is_admin,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UserQuery when eager-loading is set.
	Edges        UserEdges `json:"edges"`
	selectValues sql.SelectValues
}

// UserEdges holds the relations/edges for other nodes in the graph.
type UserEdges struct {
	// Courses holds the value of the courses edge.
	Courses []*Course `json:"courses,omitempty"`
	// OwnedClasses holds the value of the owned_classes edge.
	OwnedClasses []*Class `json:"owned_classes,omitempty"`
	// JoinedClasses holds the value of the joined_classes edge.
	JoinedClasses []*Class_User_Role `json:"joined_classes,omitempty"`
	// OwnedPosts holds the value of the owned_posts edge.
	OwnedPosts []*Post `json:"owned_posts,omitempty"`
	// LabProblemSubmissions holds the value of the lab_problem_submissions edge.
	LabProblemSubmissions []*Lab_Problem_Submission `json:"lab_problem_submissions,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [5]bool
}

// CoursesOrErr returns the Courses value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) CoursesOrErr() ([]*Course, error) {
	if e.loadedTypes[0] {
		return e.Courses, nil
	}
	return nil, &NotLoadedError{edge: "courses"}
}

// OwnedClassesOrErr returns the OwnedClasses value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) OwnedClassesOrErr() ([]*Class, error) {
	if e.loadedTypes[1] {
		return e.OwnedClasses, nil
	}
	return nil, &NotLoadedError{edge: "owned_classes"}
}

// JoinedClassesOrErr returns the JoinedClasses value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) JoinedClassesOrErr() ([]*Class_User_Role, error) {
	if e.loadedTypes[2] {
		return e.JoinedClasses, nil
	}
	return nil, &NotLoadedError{edge: "joined_classes"}
}

// OwnedPostsOrErr returns the OwnedPosts value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) OwnedPostsOrErr() ([]*Post, error) {
	if e.loadedTypes[3] {
		return e.OwnedPosts, nil
	}
	return nil, &NotLoadedError{edge: "owned_posts"}
}

// LabProblemSubmissionsOrErr returns the LabProblemSubmissions value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) LabProblemSubmissionsOrErr() ([]*Lab_Problem_Submission, error) {
	if e.loadedTypes[4] {
		return e.LabProblemSubmissions, nil
	}
	return nil, &NotLoadedError{edge: "lab_problem_submissions"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*User) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case user.FieldIsAdmin:
			values[i] = new(sql.NullBool)
		case user.FieldID:
			values[i] = new(sql.NullInt64)
		case user.FieldUsername, user.FieldEmail, user.FieldPassword, user.FieldName, user.FieldImagePath:
			values[i] = new(sql.NullString)
		case user.FieldLastOnline, user.FieldCreatedAt, user.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the User fields.
func (u *User) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case user.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			u.ID = int(value.Int64)
		case user.FieldUsername:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field username", values[i])
			} else if value.Valid {
				u.Username = value.String
			}
		case user.FieldEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field email", values[i])
			} else if value.Valid {
				u.Email = value.String
			}
		case user.FieldPassword:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field password", values[i])
			} else if value.Valid {
				u.Password = value.String
			}
		case user.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				u.Name = value.String
			}
		case user.FieldImagePath:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field image_path", values[i])
			} else if value.Valid {
				u.ImagePath = value.String
			}
		case user.FieldLastOnline:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field last_online", values[i])
			} else if value.Valid {
				u.LastOnline = value.Time
			}
		case user.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				u.CreatedAt = value.Time
			}
		case user.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				u.UpdatedAt = value.Time
			}
		case user.FieldIsAdmin:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_admin", values[i])
			} else if value.Valid {
				u.IsAdmin = value.Bool
			}
		default:
			u.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the User.
// This includes values selected through modifiers, order, etc.
func (u *User) Value(name string) (ent.Value, error) {
	return u.selectValues.Get(name)
}

// QueryCourses queries the "courses" edge of the User entity.
func (u *User) QueryCourses() *CourseQuery {
	return NewUserClient(u.config).QueryCourses(u)
}

// QueryOwnedClasses queries the "owned_classes" edge of the User entity.
func (u *User) QueryOwnedClasses() *ClassQuery {
	return NewUserClient(u.config).QueryOwnedClasses(u)
}

// QueryJoinedClasses queries the "joined_classes" edge of the User entity.
func (u *User) QueryJoinedClasses() *ClassUserRoleQuery {
	return NewUserClient(u.config).QueryJoinedClasses(u)
}

// QueryOwnedPosts queries the "owned_posts" edge of the User entity.
func (u *User) QueryOwnedPosts() *PostQuery {
	return NewUserClient(u.config).QueryOwnedPosts(u)
}

// QueryLabProblemSubmissions queries the "lab_problem_submissions" edge of the User entity.
func (u *User) QueryLabProblemSubmissions() *LabProblemSubmissionQuery {
	return NewUserClient(u.config).QueryLabProblemSubmissions(u)
}

// Update returns a builder for updating this User.
// Note that you need to call User.Unwrap() before calling this method if this User
// was returned from a transaction, and the transaction was committed or rolled back.
func (u *User) Update() *UserUpdateOne {
	return NewUserClient(u.config).UpdateOne(u)
}

// Unwrap unwraps the User entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (u *User) Unwrap() *User {
	_tx, ok := u.config.driver.(*txDriver)
	if !ok {
		panic("ent: User is not a transactional entity")
	}
	u.config.driver = _tx.drv
	return u
}

// String implements the fmt.Stringer.
func (u *User) String() string {
	var builder strings.Builder
	builder.WriteString("User(")
	builder.WriteString(fmt.Sprintf("id=%v, ", u.ID))
	builder.WriteString("username=")
	builder.WriteString(u.Username)
	builder.WriteString(", ")
	builder.WriteString("email=")
	builder.WriteString(u.Email)
	builder.WriteString(", ")
	builder.WriteString("password=")
	builder.WriteString(u.Password)
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(u.Name)
	builder.WriteString(", ")
	builder.WriteString("image_path=")
	builder.WriteString(u.ImagePath)
	builder.WriteString(", ")
	builder.WriteString("last_online=")
	builder.WriteString(u.LastOnline.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(u.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(u.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("is_admin=")
	builder.WriteString(fmt.Sprintf("%v", u.IsAdmin))
	builder.WriteByte(')')
	return builder.String()
}

// Users is a parsable slice of User.
type Users []*User
