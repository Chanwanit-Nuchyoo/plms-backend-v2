// Code generated by ent, DO NOT EDIT.

package ent

import (
	"plms-backend/ent/lab_problem_submission"
	"plms-backend/ent/predicate"
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// LabProblemSubmissionDelete is the builder for deleting a Lab_Problem_Submission entity.
type LabProblemSubmissionDelete struct {
	config
	hooks    []Hook
	mutation *LabProblemSubmissionMutation
}

// Where appends a list predicates to the LabProblemSubmissionDelete builder.
func (lpsd *LabProblemSubmissionDelete) Where(ps ...predicate.Lab_Problem_Submission) *LabProblemSubmissionDelete {
	lpsd.mutation.Where(ps...)
	return lpsd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (lpsd *LabProblemSubmissionDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, lpsd.sqlExec, lpsd.mutation, lpsd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (lpsd *LabProblemSubmissionDelete) ExecX(ctx context.Context) int {
	n, err := lpsd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (lpsd *LabProblemSubmissionDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(lab_problem_submission.Table, sqlgraph.NewFieldSpec(lab_problem_submission.FieldID, field.TypeInt))
	if ps := lpsd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, lpsd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	lpsd.mutation.done = true
	return affected, err
}

// LabProblemSubmissionDeleteOne is the builder for deleting a single Lab_Problem_Submission entity.
type LabProblemSubmissionDeleteOne struct {
	lpsd *LabProblemSubmissionDelete
}

// Where appends a list predicates to the LabProblemSubmissionDelete builder.
func (lpsdo *LabProblemSubmissionDeleteOne) Where(ps ...predicate.Lab_Problem_Submission) *LabProblemSubmissionDeleteOne {
	lpsdo.lpsd.mutation.Where(ps...)
	return lpsdo
}

// Exec executes the deletion query.
func (lpsdo *LabProblemSubmissionDeleteOne) Exec(ctx context.Context) error {
	n, err := lpsdo.lpsd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{lab_problem_submission.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (lpsdo *LabProblemSubmissionDeleteOne) ExecX(ctx context.Context) {
	if err := lpsdo.Exec(ctx); err != nil {
		panic(err)
	}
}
