// Code generated by ent, DO NOT EDIT.

package ent

import (
	"plms-backend/ent/predicate"
	"plms-backend/ent/topic"
	"plms-backend/ent/topic_file_mats"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TopicFileMatsUpdate is the builder for updating Topic_File_Mats entities.
type TopicFileMatsUpdate struct {
	config
	hooks    []Hook
	mutation *TopicFileMatsMutation
}

// Where appends a list predicates to the TopicFileMatsUpdate builder.
func (tfmu *TopicFileMatsUpdate) Where(ps ...predicate.Topic_File_Mats) *TopicFileMatsUpdate {
	tfmu.mutation.Where(ps...)
	return tfmu
}

// SetTopicID sets the "topic_id" field.
func (tfmu *TopicFileMatsUpdate) SetTopicID(i int) *TopicFileMatsUpdate {
	tfmu.mutation.SetTopicID(i)
	return tfmu
}

// SetName sets the "name" field.
func (tfmu *TopicFileMatsUpdate) SetName(s string) *TopicFileMatsUpdate {
	tfmu.mutation.SetName(s)
	return tfmu
}

// SetFilePath sets the "file_path" field.
func (tfmu *TopicFileMatsUpdate) SetFilePath(s string) *TopicFileMatsUpdate {
	tfmu.mutation.SetFilePath(s)
	return tfmu
}

// SetCreatedAt sets the "created_at" field.
func (tfmu *TopicFileMatsUpdate) SetCreatedAt(t time.Time) *TopicFileMatsUpdate {
	tfmu.mutation.SetCreatedAt(t)
	return tfmu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tfmu *TopicFileMatsUpdate) SetNillableCreatedAt(t *time.Time) *TopicFileMatsUpdate {
	if t != nil {
		tfmu.SetCreatedAt(*t)
	}
	return tfmu
}

// SetTopic sets the "topic" edge to the Topic entity.
func (tfmu *TopicFileMatsUpdate) SetTopic(t *Topic) *TopicFileMatsUpdate {
	return tfmu.SetTopicID(t.ID)
}

// Mutation returns the TopicFileMatsMutation object of the builder.
func (tfmu *TopicFileMatsUpdate) Mutation() *TopicFileMatsMutation {
	return tfmu.mutation
}

// ClearTopic clears the "topic" edge to the Topic entity.
func (tfmu *TopicFileMatsUpdate) ClearTopic() *TopicFileMatsUpdate {
	tfmu.mutation.ClearTopic()
	return tfmu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tfmu *TopicFileMatsUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, tfmu.sqlSave, tfmu.mutation, tfmu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tfmu *TopicFileMatsUpdate) SaveX(ctx context.Context) int {
	affected, err := tfmu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tfmu *TopicFileMatsUpdate) Exec(ctx context.Context) error {
	_, err := tfmu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tfmu *TopicFileMatsUpdate) ExecX(ctx context.Context) {
	if err := tfmu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tfmu *TopicFileMatsUpdate) check() error {
	if v, ok := tfmu.mutation.Name(); ok {
		if err := topic_file_mats.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Topic_File_Mats.name": %w`, err)}
		}
	}
	if _, ok := tfmu.mutation.TopicID(); tfmu.mutation.TopicCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Topic_File_Mats.topic"`)
	}
	return nil
}

func (tfmu *TopicFileMatsUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := tfmu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(topic_file_mats.Table, topic_file_mats.Columns, sqlgraph.NewFieldSpec(topic_file_mats.FieldID, field.TypeInt))
	if ps := tfmu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tfmu.mutation.Name(); ok {
		_spec.SetField(topic_file_mats.FieldName, field.TypeString, value)
	}
	if value, ok := tfmu.mutation.FilePath(); ok {
		_spec.SetField(topic_file_mats.FieldFilePath, field.TypeString, value)
	}
	if value, ok := tfmu.mutation.CreatedAt(); ok {
		_spec.SetField(topic_file_mats.FieldCreatedAt, field.TypeTime, value)
	}
	if tfmu.mutation.TopicCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   topic_file_mats.TopicTable,
			Columns: []string{topic_file_mats.TopicColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(topic.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tfmu.mutation.TopicIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   topic_file_mats.TopicTable,
			Columns: []string{topic_file_mats.TopicColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(topic.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tfmu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{topic_file_mats.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tfmu.mutation.done = true
	return n, nil
}

// TopicFileMatsUpdateOne is the builder for updating a single Topic_File_Mats entity.
type TopicFileMatsUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TopicFileMatsMutation
}

// SetTopicID sets the "topic_id" field.
func (tfmuo *TopicFileMatsUpdateOne) SetTopicID(i int) *TopicFileMatsUpdateOne {
	tfmuo.mutation.SetTopicID(i)
	return tfmuo
}

// SetName sets the "name" field.
func (tfmuo *TopicFileMatsUpdateOne) SetName(s string) *TopicFileMatsUpdateOne {
	tfmuo.mutation.SetName(s)
	return tfmuo
}

// SetFilePath sets the "file_path" field.
func (tfmuo *TopicFileMatsUpdateOne) SetFilePath(s string) *TopicFileMatsUpdateOne {
	tfmuo.mutation.SetFilePath(s)
	return tfmuo
}

// SetCreatedAt sets the "created_at" field.
func (tfmuo *TopicFileMatsUpdateOne) SetCreatedAt(t time.Time) *TopicFileMatsUpdateOne {
	tfmuo.mutation.SetCreatedAt(t)
	return tfmuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tfmuo *TopicFileMatsUpdateOne) SetNillableCreatedAt(t *time.Time) *TopicFileMatsUpdateOne {
	if t != nil {
		tfmuo.SetCreatedAt(*t)
	}
	return tfmuo
}

// SetTopic sets the "topic" edge to the Topic entity.
func (tfmuo *TopicFileMatsUpdateOne) SetTopic(t *Topic) *TopicFileMatsUpdateOne {
	return tfmuo.SetTopicID(t.ID)
}

// Mutation returns the TopicFileMatsMutation object of the builder.
func (tfmuo *TopicFileMatsUpdateOne) Mutation() *TopicFileMatsMutation {
	return tfmuo.mutation
}

// ClearTopic clears the "topic" edge to the Topic entity.
func (tfmuo *TopicFileMatsUpdateOne) ClearTopic() *TopicFileMatsUpdateOne {
	tfmuo.mutation.ClearTopic()
	return tfmuo
}

// Where appends a list predicates to the TopicFileMatsUpdate builder.
func (tfmuo *TopicFileMatsUpdateOne) Where(ps ...predicate.Topic_File_Mats) *TopicFileMatsUpdateOne {
	tfmuo.mutation.Where(ps...)
	return tfmuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tfmuo *TopicFileMatsUpdateOne) Select(field string, fields ...string) *TopicFileMatsUpdateOne {
	tfmuo.fields = append([]string{field}, fields...)
	return tfmuo
}

// Save executes the query and returns the updated Topic_File_Mats entity.
func (tfmuo *TopicFileMatsUpdateOne) Save(ctx context.Context) (*Topic_File_Mats, error) {
	return withHooks(ctx, tfmuo.sqlSave, tfmuo.mutation, tfmuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tfmuo *TopicFileMatsUpdateOne) SaveX(ctx context.Context) *Topic_File_Mats {
	node, err := tfmuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tfmuo *TopicFileMatsUpdateOne) Exec(ctx context.Context) error {
	_, err := tfmuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tfmuo *TopicFileMatsUpdateOne) ExecX(ctx context.Context) {
	if err := tfmuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tfmuo *TopicFileMatsUpdateOne) check() error {
	if v, ok := tfmuo.mutation.Name(); ok {
		if err := topic_file_mats.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Topic_File_Mats.name": %w`, err)}
		}
	}
	if _, ok := tfmuo.mutation.TopicID(); tfmuo.mutation.TopicCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Topic_File_Mats.topic"`)
	}
	return nil
}

func (tfmuo *TopicFileMatsUpdateOne) sqlSave(ctx context.Context) (_node *Topic_File_Mats, err error) {
	if err := tfmuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(topic_file_mats.Table, topic_file_mats.Columns, sqlgraph.NewFieldSpec(topic_file_mats.FieldID, field.TypeInt))
	id, ok := tfmuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Topic_File_Mats.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tfmuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, topic_file_mats.FieldID)
		for _, f := range fields {
			if !topic_file_mats.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != topic_file_mats.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tfmuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tfmuo.mutation.Name(); ok {
		_spec.SetField(topic_file_mats.FieldName, field.TypeString, value)
	}
	if value, ok := tfmuo.mutation.FilePath(); ok {
		_spec.SetField(topic_file_mats.FieldFilePath, field.TypeString, value)
	}
	if value, ok := tfmuo.mutation.CreatedAt(); ok {
		_spec.SetField(topic_file_mats.FieldCreatedAt, field.TypeTime, value)
	}
	if tfmuo.mutation.TopicCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   topic_file_mats.TopicTable,
			Columns: []string{topic_file_mats.TopicColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(topic.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tfmuo.mutation.TopicIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   topic_file_mats.TopicTable,
			Columns: []string{topic_file_mats.TopicColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(topic.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Topic_File_Mats{config: tfmuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tfmuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{topic_file_mats.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tfmuo.mutation.done = true
	return _node, nil
}
