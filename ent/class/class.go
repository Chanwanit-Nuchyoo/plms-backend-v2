// Code generated by ent, DO NOT EDIT.

package class

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the class type in the database.
	Label = "class"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldOwnerID holds the string denoting the owner_id field in the database.
	FieldOwnerID = "owner_id"
	// FieldCourseID holds the string denoting the course_id field in the database.
	FieldCourseID = "course_id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldDefaultLang holds the string denoting the default_lang field in the database.
	FieldDefaultLang = "default_lang"
	// FieldDotw holds the string denoting the dotw field in the database.
	FieldDotw = "dotw"
	// FieldStartTime holds the string denoting the start_time field in the database.
	FieldStartTime = "start_time"
	// FieldEndTime holds the string denoting the end_time field in the database.
	FieldEndTime = "end_time"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeOwner holds the string denoting the owner edge name in mutations.
	EdgeOwner = "owner"
	// EdgeCourse holds the string denoting the course edge name in mutations.
	EdgeCourse = "course"
	// EdgeMembers holds the string denoting the members edge name in mutations.
	EdgeMembers = "members"
	// EdgePosts holds the string denoting the posts edge name in mutations.
	EdgePosts = "posts"
	// EdgeClassLabStatuses holds the string denoting the class_lab_statuses edge name in mutations.
	EdgeClassLabStatuses = "class_lab_statuses"
	// Table holds the table name of the class in the database.
	Table = "classes"
	// OwnerTable is the table that holds the owner relation/edge.
	OwnerTable = "classes"
	// OwnerInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	OwnerInverseTable = "users"
	// OwnerColumn is the table column denoting the owner relation/edge.
	OwnerColumn = "owner_id"
	// CourseTable is the table that holds the course relation/edge.
	CourseTable = "classes"
	// CourseInverseTable is the table name for the Course entity.
	// It exists in this package in order to avoid circular dependency with the "course" package.
	CourseInverseTable = "courses"
	// CourseColumn is the table column denoting the course relation/edge.
	CourseColumn = "course_id"
	// MembersTable is the table that holds the members relation/edge.
	MembersTable = "class_user_roles"
	// MembersInverseTable is the table name for the Class_User_Role entity.
	// It exists in this package in order to avoid circular dependency with the "class_user_role" package.
	MembersInverseTable = "class_user_roles"
	// MembersColumn is the table column denoting the members relation/edge.
	MembersColumn = "class_id"
	// PostsTable is the table that holds the posts relation/edge.
	PostsTable = "posts"
	// PostsInverseTable is the table name for the Post entity.
	// It exists in this package in order to avoid circular dependency with the "post" package.
	PostsInverseTable = "posts"
	// PostsColumn is the table column denoting the posts relation/edge.
	PostsColumn = "class_id"
	// ClassLabStatusesTable is the table that holds the class_lab_statuses relation/edge.
	ClassLabStatusesTable = "class_lab_status"
	// ClassLabStatusesInverseTable is the table name for the Class_Lab_Status entity.
	// It exists in this package in order to avoid circular dependency with the "class_lab_status" package.
	ClassLabStatusesInverseTable = "class_lab_status"
	// ClassLabStatusesColumn is the table column denoting the class_lab_statuses relation/edge.
	ClassLabStatusesColumn = "class_id"
)

// Columns holds all SQL columns for class fields.
var Columns = []string{
	FieldID,
	FieldOwnerID,
	FieldCourseID,
	FieldName,
	FieldDescription,
	FieldDefaultLang,
	FieldDotw,
	FieldStartTime,
	FieldEndTime,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt time.Time
)

// DefaultLang defines the type for the "default_lang" enum field.
type DefaultLang string

// DefaultLang values.
const (
	DefaultLangCCpp   DefaultLang = "c_cpp"
	DefaultLangPython DefaultLang = "python"
)

func (dl DefaultLang) String() string {
	return string(dl)
}

// DefaultLangValidator is a validator for the "default_lang" field enum values. It is called by the builders before save.
func DefaultLangValidator(dl DefaultLang) error {
	switch dl {
	case DefaultLangCCpp, DefaultLangPython:
		return nil
	default:
		return fmt.Errorf("class: invalid enum value for default_lang field: %q", dl)
	}
}

// Dotw defines the type for the "dotw" enum field.
type Dotw string

// Dotw values.
const (
	DotwSunday    Dotw = "sunday"
	DotwMonday    Dotw = "monday"
	DotwTuesday   Dotw = "tuesday"
	DotwWednesday Dotw = "wednesday"
	DotwThursday  Dotw = "thursday"
	DotwFriday    Dotw = "friday"
)

func (d Dotw) String() string {
	return string(d)
}

// DotwValidator is a validator for the "dotw" field enum values. It is called by the builders before save.
func DotwValidator(d Dotw) error {
	switch d {
	case DotwSunday, DotwMonday, DotwTuesday, DotwWednesday, DotwThursday, DotwFriday:
		return nil
	default:
		return fmt.Errorf("class: invalid enum value for dotw field: %q", d)
	}
}

// OrderOption defines the ordering options for the Class queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByOwnerID orders the results by the owner_id field.
func ByOwnerID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOwnerID, opts...).ToFunc()
}

// ByCourseID orders the results by the course_id field.
func ByCourseID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCourseID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByDefaultLang orders the results by the default_lang field.
func ByDefaultLang(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDefaultLang, opts...).ToFunc()
}

// ByDotw orders the results by the dotw field.
func ByDotw(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDotw, opts...).ToFunc()
}

// ByStartTime orders the results by the start_time field.
func ByStartTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStartTime, opts...).ToFunc()
}

// ByEndTime orders the results by the end_time field.
func ByEndTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEndTime, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByOwnerField orders the results by owner field.
func ByOwnerField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOwnerStep(), sql.OrderByField(field, opts...))
	}
}

// ByCourseField orders the results by course field.
func ByCourseField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCourseStep(), sql.OrderByField(field, opts...))
	}
}

// ByMembersCount orders the results by members count.
func ByMembersCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newMembersStep(), opts...)
	}
}

// ByMembers orders the results by members terms.
func ByMembers(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newMembersStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByPostsCount orders the results by posts count.
func ByPostsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newPostsStep(), opts...)
	}
}

// ByPosts orders the results by posts terms.
func ByPosts(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPostsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByClassLabStatusesCount orders the results by class_lab_statuses count.
func ByClassLabStatusesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newClassLabStatusesStep(), opts...)
	}
}

// ByClassLabStatuses orders the results by class_lab_statuses terms.
func ByClassLabStatuses(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newClassLabStatusesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newOwnerStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OwnerInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, OwnerTable, OwnerColumn),
	)
}
func newCourseStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CourseInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, CourseTable, CourseColumn),
	)
}
func newMembersStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(MembersInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, MembersTable, MembersColumn),
	)
}
func newPostsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PostsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, PostsTable, PostsColumn),
	)
}
func newClassLabStatusesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ClassLabStatusesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ClassLabStatusesTable, ClassLabStatusesColumn),
	)
}
