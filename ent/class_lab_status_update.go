// Code generated by ent, DO NOT EDIT.

package ent

import (
	"plms-backend/ent/class"
	"plms-backend/ent/class_lab_status"
	"plms-backend/ent/course"
	"plms-backend/ent/lab"
	"plms-backend/ent/predicate"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ClassLabStatusUpdate is the builder for updating Class_Lab_Status entities.
type ClassLabStatusUpdate struct {
	config
	hooks    []Hook
	mutation *ClassLabStatusMutation
}

// Where appends a list predicates to the ClassLabStatusUpdate builder.
func (clsu *ClassLabStatusUpdate) Where(ps ...predicate.Class_Lab_Status) *ClassLabStatusUpdate {
	clsu.mutation.Where(ps...)
	return clsu
}

// SetCourseID sets the "course_id" field.
func (clsu *ClassLabStatusUpdate) SetCourseID(i int) *ClassLabStatusUpdate {
	clsu.mutation.SetCourseID(i)
	return clsu
}

// SetClassID sets the "class_id" field.
func (clsu *ClassLabStatusUpdate) SetClassID(i int) *ClassLabStatusUpdate {
	clsu.mutation.SetClassID(i)
	return clsu
}

// SetLabID sets the "lab_id" field.
func (clsu *ClassLabStatusUpdate) SetLabID(i int) *ClassLabStatusUpdate {
	clsu.mutation.SetLabID(i)
	return clsu
}

// SetIsOpen sets the "is_open" field.
func (clsu *ClassLabStatusUpdate) SetIsOpen(b bool) *ClassLabStatusUpdate {
	clsu.mutation.SetIsOpen(b)
	return clsu
}

// SetNillableIsOpen sets the "is_open" field if the given value is not nil.
func (clsu *ClassLabStatusUpdate) SetNillableIsOpen(b *bool) *ClassLabStatusUpdate {
	if b != nil {
		clsu.SetIsOpen(*b)
	}
	return clsu
}

// SetCourse sets the "course" edge to the Course entity.
func (clsu *ClassLabStatusUpdate) SetCourse(c *Course) *ClassLabStatusUpdate {
	return clsu.SetCourseID(c.ID)
}

// SetClass sets the "class" edge to the Class entity.
func (clsu *ClassLabStatusUpdate) SetClass(c *Class) *ClassLabStatusUpdate {
	return clsu.SetClassID(c.ID)
}

// SetLab sets the "lab" edge to the Lab entity.
func (clsu *ClassLabStatusUpdate) SetLab(l *Lab) *ClassLabStatusUpdate {
	return clsu.SetLabID(l.ID)
}

// Mutation returns the ClassLabStatusMutation object of the builder.
func (clsu *ClassLabStatusUpdate) Mutation() *ClassLabStatusMutation {
	return clsu.mutation
}

// ClearCourse clears the "course" edge to the Course entity.
func (clsu *ClassLabStatusUpdate) ClearCourse() *ClassLabStatusUpdate {
	clsu.mutation.ClearCourse()
	return clsu
}

// ClearClass clears the "class" edge to the Class entity.
func (clsu *ClassLabStatusUpdate) ClearClass() *ClassLabStatusUpdate {
	clsu.mutation.ClearClass()
	return clsu
}

// ClearLab clears the "lab" edge to the Lab entity.
func (clsu *ClassLabStatusUpdate) ClearLab() *ClassLabStatusUpdate {
	clsu.mutation.ClearLab()
	return clsu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (clsu *ClassLabStatusUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, clsu.sqlSave, clsu.mutation, clsu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (clsu *ClassLabStatusUpdate) SaveX(ctx context.Context) int {
	affected, err := clsu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (clsu *ClassLabStatusUpdate) Exec(ctx context.Context) error {
	_, err := clsu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (clsu *ClassLabStatusUpdate) ExecX(ctx context.Context) {
	if err := clsu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (clsu *ClassLabStatusUpdate) check() error {
	if _, ok := clsu.mutation.CourseID(); clsu.mutation.CourseCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Class_Lab_Status.course"`)
	}
	if _, ok := clsu.mutation.ClassID(); clsu.mutation.ClassCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Class_Lab_Status.class"`)
	}
	if _, ok := clsu.mutation.LabID(); clsu.mutation.LabCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Class_Lab_Status.lab"`)
	}
	return nil
}

func (clsu *ClassLabStatusUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := clsu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(class_lab_status.Table, class_lab_status.Columns, sqlgraph.NewFieldSpec(class_lab_status.FieldID, field.TypeInt))
	if ps := clsu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := clsu.mutation.IsOpen(); ok {
		_spec.SetField(class_lab_status.FieldIsOpen, field.TypeBool, value)
	}
	if clsu.mutation.CourseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   class_lab_status.CourseTable,
			Columns: []string{class_lab_status.CourseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(course.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := clsu.mutation.CourseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   class_lab_status.CourseTable,
			Columns: []string{class_lab_status.CourseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(course.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if clsu.mutation.ClassCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   class_lab_status.ClassTable,
			Columns: []string{class_lab_status.ClassColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(class.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := clsu.mutation.ClassIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   class_lab_status.ClassTable,
			Columns: []string{class_lab_status.ClassColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(class.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if clsu.mutation.LabCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   class_lab_status.LabTable,
			Columns: []string{class_lab_status.LabColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(lab.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := clsu.mutation.LabIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   class_lab_status.LabTable,
			Columns: []string{class_lab_status.LabColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(lab.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, clsu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{class_lab_status.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	clsu.mutation.done = true
	return n, nil
}

// ClassLabStatusUpdateOne is the builder for updating a single Class_Lab_Status entity.
type ClassLabStatusUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ClassLabStatusMutation
}

// SetCourseID sets the "course_id" field.
func (clsuo *ClassLabStatusUpdateOne) SetCourseID(i int) *ClassLabStatusUpdateOne {
	clsuo.mutation.SetCourseID(i)
	return clsuo
}

// SetClassID sets the "class_id" field.
func (clsuo *ClassLabStatusUpdateOne) SetClassID(i int) *ClassLabStatusUpdateOne {
	clsuo.mutation.SetClassID(i)
	return clsuo
}

// SetLabID sets the "lab_id" field.
func (clsuo *ClassLabStatusUpdateOne) SetLabID(i int) *ClassLabStatusUpdateOne {
	clsuo.mutation.SetLabID(i)
	return clsuo
}

// SetIsOpen sets the "is_open" field.
func (clsuo *ClassLabStatusUpdateOne) SetIsOpen(b bool) *ClassLabStatusUpdateOne {
	clsuo.mutation.SetIsOpen(b)
	return clsuo
}

// SetNillableIsOpen sets the "is_open" field if the given value is not nil.
func (clsuo *ClassLabStatusUpdateOne) SetNillableIsOpen(b *bool) *ClassLabStatusUpdateOne {
	if b != nil {
		clsuo.SetIsOpen(*b)
	}
	return clsuo
}

// SetCourse sets the "course" edge to the Course entity.
func (clsuo *ClassLabStatusUpdateOne) SetCourse(c *Course) *ClassLabStatusUpdateOne {
	return clsuo.SetCourseID(c.ID)
}

// SetClass sets the "class" edge to the Class entity.
func (clsuo *ClassLabStatusUpdateOne) SetClass(c *Class) *ClassLabStatusUpdateOne {
	return clsuo.SetClassID(c.ID)
}

// SetLab sets the "lab" edge to the Lab entity.
func (clsuo *ClassLabStatusUpdateOne) SetLab(l *Lab) *ClassLabStatusUpdateOne {
	return clsuo.SetLabID(l.ID)
}

// Mutation returns the ClassLabStatusMutation object of the builder.
func (clsuo *ClassLabStatusUpdateOne) Mutation() *ClassLabStatusMutation {
	return clsuo.mutation
}

// ClearCourse clears the "course" edge to the Course entity.
func (clsuo *ClassLabStatusUpdateOne) ClearCourse() *ClassLabStatusUpdateOne {
	clsuo.mutation.ClearCourse()
	return clsuo
}

// ClearClass clears the "class" edge to the Class entity.
func (clsuo *ClassLabStatusUpdateOne) ClearClass() *ClassLabStatusUpdateOne {
	clsuo.mutation.ClearClass()
	return clsuo
}

// ClearLab clears the "lab" edge to the Lab entity.
func (clsuo *ClassLabStatusUpdateOne) ClearLab() *ClassLabStatusUpdateOne {
	clsuo.mutation.ClearLab()
	return clsuo
}

// Where appends a list predicates to the ClassLabStatusUpdate builder.
func (clsuo *ClassLabStatusUpdateOne) Where(ps ...predicate.Class_Lab_Status) *ClassLabStatusUpdateOne {
	clsuo.mutation.Where(ps...)
	return clsuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (clsuo *ClassLabStatusUpdateOne) Select(field string, fields ...string) *ClassLabStatusUpdateOne {
	clsuo.fields = append([]string{field}, fields...)
	return clsuo
}

// Save executes the query and returns the updated Class_Lab_Status entity.
func (clsuo *ClassLabStatusUpdateOne) Save(ctx context.Context) (*Class_Lab_Status, error) {
	return withHooks(ctx, clsuo.sqlSave, clsuo.mutation, clsuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (clsuo *ClassLabStatusUpdateOne) SaveX(ctx context.Context) *Class_Lab_Status {
	node, err := clsuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (clsuo *ClassLabStatusUpdateOne) Exec(ctx context.Context) error {
	_, err := clsuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (clsuo *ClassLabStatusUpdateOne) ExecX(ctx context.Context) {
	if err := clsuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (clsuo *ClassLabStatusUpdateOne) check() error {
	if _, ok := clsuo.mutation.CourseID(); clsuo.mutation.CourseCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Class_Lab_Status.course"`)
	}
	if _, ok := clsuo.mutation.ClassID(); clsuo.mutation.ClassCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Class_Lab_Status.class"`)
	}
	if _, ok := clsuo.mutation.LabID(); clsuo.mutation.LabCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Class_Lab_Status.lab"`)
	}
	return nil
}

func (clsuo *ClassLabStatusUpdateOne) sqlSave(ctx context.Context) (_node *Class_Lab_Status, err error) {
	if err := clsuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(class_lab_status.Table, class_lab_status.Columns, sqlgraph.NewFieldSpec(class_lab_status.FieldID, field.TypeInt))
	id, ok := clsuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Class_Lab_Status.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := clsuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, class_lab_status.FieldID)
		for _, f := range fields {
			if !class_lab_status.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != class_lab_status.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := clsuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := clsuo.mutation.IsOpen(); ok {
		_spec.SetField(class_lab_status.FieldIsOpen, field.TypeBool, value)
	}
	if clsuo.mutation.CourseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   class_lab_status.CourseTable,
			Columns: []string{class_lab_status.CourseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(course.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := clsuo.mutation.CourseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   class_lab_status.CourseTable,
			Columns: []string{class_lab_status.CourseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(course.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if clsuo.mutation.ClassCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   class_lab_status.ClassTable,
			Columns: []string{class_lab_status.ClassColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(class.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := clsuo.mutation.ClassIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   class_lab_status.ClassTable,
			Columns: []string{class_lab_status.ClassColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(class.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if clsuo.mutation.LabCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   class_lab_status.LabTable,
			Columns: []string{class_lab_status.LabColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(lab.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := clsuo.mutation.LabIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   class_lab_status.LabTable,
			Columns: []string{class_lab_status.LabColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(lab.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Class_Lab_Status{config: clsuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, clsuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{class_lab_status.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	clsuo.mutation.done = true
	return _node, nil
}
