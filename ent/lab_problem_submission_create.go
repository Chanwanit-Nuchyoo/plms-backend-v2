// Code generated by ent, DO NOT EDIT.

package ent

import (
	"plms-backend/ent/lab_problem_submission"
	"plms-backend/ent/testcase_submission"
	"plms-backend/ent/user"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// LabProblemSubmissionCreate is the builder for creating a Lab_Problem_Submission entity.
type LabProblemSubmissionCreate struct {
	config
	mutation *LabProblemSubmissionMutation
	hooks    []Hook
}

// SetOwnerID sets the "owner_id" field.
func (lpsc *LabProblemSubmissionCreate) SetOwnerID(i int) *LabProblemSubmissionCreate {
	lpsc.mutation.SetOwnerID(i)
	return lpsc
}

// SetLabProblemID sets the "lab_problem_id" field.
func (lpsc *LabProblemSubmissionCreate) SetLabProblemID(i int) *LabProblemSubmissionCreate {
	lpsc.mutation.SetLabProblemID(i)
	return lpsc
}

// SetCode sets the "code" field.
func (lpsc *LabProblemSubmissionCreate) SetCode(s string) *LabProblemSubmissionCreate {
	lpsc.mutation.SetCode(s)
	return lpsc
}

// SetScore sets the "score" field.
func (lpsc *LabProblemSubmissionCreate) SetScore(f float64) *LabProblemSubmissionCreate {
	lpsc.mutation.SetScore(f)
	return lpsc
}

// SetFeedback sets the "feedback" field.
func (lpsc *LabProblemSubmissionCreate) SetFeedback(s string) *LabProblemSubmissionCreate {
	lpsc.mutation.SetFeedback(s)
	return lpsc
}

// SetNillableFeedback sets the "feedback" field if the given value is not nil.
func (lpsc *LabProblemSubmissionCreate) SetNillableFeedback(s *string) *LabProblemSubmissionCreate {
	if s != nil {
		lpsc.SetFeedback(*s)
	}
	return lpsc
}

// SetInstructorScore sets the "instructor_score" field.
func (lpsc *LabProblemSubmissionCreate) SetInstructorScore(f float64) *LabProblemSubmissionCreate {
	lpsc.mutation.SetInstructorScore(f)
	return lpsc
}

// SetCreatedAt sets the "created_at" field.
func (lpsc *LabProblemSubmissionCreate) SetCreatedAt(t time.Time) *LabProblemSubmissionCreate {
	lpsc.mutation.SetCreatedAt(t)
	return lpsc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (lpsc *LabProblemSubmissionCreate) SetNillableCreatedAt(t *time.Time) *LabProblemSubmissionCreate {
	if t != nil {
		lpsc.SetCreatedAt(*t)
	}
	return lpsc
}

// SetUpdatedAt sets the "updated_at" field.
func (lpsc *LabProblemSubmissionCreate) SetUpdatedAt(t time.Time) *LabProblemSubmissionCreate {
	lpsc.mutation.SetUpdatedAt(t)
	return lpsc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (lpsc *LabProblemSubmissionCreate) SetNillableUpdatedAt(t *time.Time) *LabProblemSubmissionCreate {
	if t != nil {
		lpsc.SetUpdatedAt(*t)
	}
	return lpsc
}

// SetOwner sets the "owner" edge to the User entity.
func (lpsc *LabProblemSubmissionCreate) SetOwner(u *User) *LabProblemSubmissionCreate {
	return lpsc.SetOwnerID(u.ID)
}

// AddTestcaseSubmissionIDs adds the "testcase_submissions" edge to the Testcase_Submission entity by IDs.
func (lpsc *LabProblemSubmissionCreate) AddTestcaseSubmissionIDs(ids ...int) *LabProblemSubmissionCreate {
	lpsc.mutation.AddTestcaseSubmissionIDs(ids...)
	return lpsc
}

// AddTestcaseSubmissions adds the "testcase_submissions" edges to the Testcase_Submission entity.
func (lpsc *LabProblemSubmissionCreate) AddTestcaseSubmissions(t ...*Testcase_Submission) *LabProblemSubmissionCreate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return lpsc.AddTestcaseSubmissionIDs(ids...)
}

// Mutation returns the LabProblemSubmissionMutation object of the builder.
func (lpsc *LabProblemSubmissionCreate) Mutation() *LabProblemSubmissionMutation {
	return lpsc.mutation
}

// Save creates the Lab_Problem_Submission in the database.
func (lpsc *LabProblemSubmissionCreate) Save(ctx context.Context) (*Lab_Problem_Submission, error) {
	lpsc.defaults()
	return withHooks(ctx, lpsc.sqlSave, lpsc.mutation, lpsc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (lpsc *LabProblemSubmissionCreate) SaveX(ctx context.Context) *Lab_Problem_Submission {
	v, err := lpsc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (lpsc *LabProblemSubmissionCreate) Exec(ctx context.Context) error {
	_, err := lpsc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lpsc *LabProblemSubmissionCreate) ExecX(ctx context.Context) {
	if err := lpsc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (lpsc *LabProblemSubmissionCreate) defaults() {
	if _, ok := lpsc.mutation.CreatedAt(); !ok {
		v := lab_problem_submission.DefaultCreatedAt
		lpsc.mutation.SetCreatedAt(v)
	}
	if _, ok := lpsc.mutation.UpdatedAt(); !ok {
		v := lab_problem_submission.DefaultUpdatedAt
		lpsc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (lpsc *LabProblemSubmissionCreate) check() error {
	if _, ok := lpsc.mutation.OwnerID(); !ok {
		return &ValidationError{Name: "owner_id", err: errors.New(`ent: missing required field "Lab_Problem_Submission.owner_id"`)}
	}
	if _, ok := lpsc.mutation.LabProblemID(); !ok {
		return &ValidationError{Name: "lab_problem_id", err: errors.New(`ent: missing required field "Lab_Problem_Submission.lab_problem_id"`)}
	}
	if _, ok := lpsc.mutation.Code(); !ok {
		return &ValidationError{Name: "code", err: errors.New(`ent: missing required field "Lab_Problem_Submission.code"`)}
	}
	if _, ok := lpsc.mutation.Score(); !ok {
		return &ValidationError{Name: "score", err: errors.New(`ent: missing required field "Lab_Problem_Submission.score"`)}
	}
	if v, ok := lpsc.mutation.Score(); ok {
		if err := lab_problem_submission.ScoreValidator(v); err != nil {
			return &ValidationError{Name: "score", err: fmt.Errorf(`ent: validator failed for field "Lab_Problem_Submission.score": %w`, err)}
		}
	}
	if _, ok := lpsc.mutation.InstructorScore(); !ok {
		return &ValidationError{Name: "instructor_score", err: errors.New(`ent: missing required field "Lab_Problem_Submission.instructor_score"`)}
	}
	if v, ok := lpsc.mutation.InstructorScore(); ok {
		if err := lab_problem_submission.InstructorScoreValidator(v); err != nil {
			return &ValidationError{Name: "instructor_score", err: fmt.Errorf(`ent: validator failed for field "Lab_Problem_Submission.instructor_score": %w`, err)}
		}
	}
	if _, ok := lpsc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Lab_Problem_Submission.created_at"`)}
	}
	if _, ok := lpsc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Lab_Problem_Submission.updated_at"`)}
	}
	if _, ok := lpsc.mutation.OwnerID(); !ok {
		return &ValidationError{Name: "owner", err: errors.New(`ent: missing required edge "Lab_Problem_Submission.owner"`)}
	}
	return nil
}

func (lpsc *LabProblemSubmissionCreate) sqlSave(ctx context.Context) (*Lab_Problem_Submission, error) {
	if err := lpsc.check(); err != nil {
		return nil, err
	}
	_node, _spec := lpsc.createSpec()
	if err := sqlgraph.CreateNode(ctx, lpsc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	lpsc.mutation.id = &_node.ID
	lpsc.mutation.done = true
	return _node, nil
}

func (lpsc *LabProblemSubmissionCreate) createSpec() (*Lab_Problem_Submission, *sqlgraph.CreateSpec) {
	var (
		_node = &Lab_Problem_Submission{config: lpsc.config}
		_spec = sqlgraph.NewCreateSpec(lab_problem_submission.Table, sqlgraph.NewFieldSpec(lab_problem_submission.FieldID, field.TypeInt))
	)
	if value, ok := lpsc.mutation.LabProblemID(); ok {
		_spec.SetField(lab_problem_submission.FieldLabProblemID, field.TypeInt, value)
		_node.LabProblemID = value
	}
	if value, ok := lpsc.mutation.Code(); ok {
		_spec.SetField(lab_problem_submission.FieldCode, field.TypeString, value)
		_node.Code = value
	}
	if value, ok := lpsc.mutation.Score(); ok {
		_spec.SetField(lab_problem_submission.FieldScore, field.TypeFloat64, value)
		_node.Score = value
	}
	if value, ok := lpsc.mutation.Feedback(); ok {
		_spec.SetField(lab_problem_submission.FieldFeedback, field.TypeString, value)
		_node.Feedback = value
	}
	if value, ok := lpsc.mutation.InstructorScore(); ok {
		_spec.SetField(lab_problem_submission.FieldInstructorScore, field.TypeFloat64, value)
		_node.InstructorScore = value
	}
	if value, ok := lpsc.mutation.CreatedAt(); ok {
		_spec.SetField(lab_problem_submission.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := lpsc.mutation.UpdatedAt(); ok {
		_spec.SetField(lab_problem_submission.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := lpsc.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   lab_problem_submission.OwnerTable,
			Columns: []string{lab_problem_submission.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.OwnerID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := lpsc.mutation.TestcaseSubmissionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   lab_problem_submission.TestcaseSubmissionsTable,
			Columns: []string{lab_problem_submission.TestcaseSubmissionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(testcase_submission.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// LabProblemSubmissionCreateBulk is the builder for creating many Lab_Problem_Submission entities in bulk.
type LabProblemSubmissionCreateBulk struct {
	config
	builders []*LabProblemSubmissionCreate
}

// Save creates the Lab_Problem_Submission entities in the database.
func (lpscb *LabProblemSubmissionCreateBulk) Save(ctx context.Context) ([]*Lab_Problem_Submission, error) {
	specs := make([]*sqlgraph.CreateSpec, len(lpscb.builders))
	nodes := make([]*Lab_Problem_Submission, len(lpscb.builders))
	mutators := make([]Mutator, len(lpscb.builders))
	for i := range lpscb.builders {
		func(i int, root context.Context) {
			builder := lpscb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*LabProblemSubmissionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, lpscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, lpscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, lpscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (lpscb *LabProblemSubmissionCreateBulk) SaveX(ctx context.Context) []*Lab_Problem_Submission {
	v, err := lpscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (lpscb *LabProblemSubmissionCreateBulk) Exec(ctx context.Context) error {
	_, err := lpscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lpscb *LabProblemSubmissionCreateBulk) ExecX(ctx context.Context) {
	if err := lpscb.Exec(ctx); err != nil {
		panic(err)
	}
}
