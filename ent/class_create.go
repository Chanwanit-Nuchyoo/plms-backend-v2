// Code generated by ent, DO NOT EDIT.

package ent

import (
	"plms-backend/ent/class"
	"plms-backend/ent/class_lab_status"
	"plms-backend/ent/class_user_role"
	"plms-backend/ent/course"
	"plms-backend/ent/post"
	"plms-backend/ent/user"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ClassCreate is the builder for creating a Class entity.
type ClassCreate struct {
	config
	mutation *ClassMutation
	hooks    []Hook
}

// SetOwnerID sets the "owner_id" field.
func (cc *ClassCreate) SetOwnerID(i int) *ClassCreate {
	cc.mutation.SetOwnerID(i)
	return cc
}

// SetCourseID sets the "course_id" field.
func (cc *ClassCreate) SetCourseID(i int) *ClassCreate {
	cc.mutation.SetCourseID(i)
	return cc
}

// SetName sets the "name" field.
func (cc *ClassCreate) SetName(s string) *ClassCreate {
	cc.mutation.SetName(s)
	return cc
}

// SetDescription sets the "description" field.
func (cc *ClassCreate) SetDescription(s string) *ClassCreate {
	cc.mutation.SetDescription(s)
	return cc
}

// SetDefaultLang sets the "default_lang" field.
func (cc *ClassCreate) SetDefaultLang(cl class.DefaultLang) *ClassCreate {
	cc.mutation.SetDefaultLang(cl)
	return cc
}

// SetDotw sets the "dotw" field.
func (cc *ClassCreate) SetDotw(c class.Dotw) *ClassCreate {
	cc.mutation.SetDotw(c)
	return cc
}

// SetStartTime sets the "start_time" field.
func (cc *ClassCreate) SetStartTime(t time.Time) *ClassCreate {
	cc.mutation.SetStartTime(t)
	return cc
}

// SetEndTime sets the "end_time" field.
func (cc *ClassCreate) SetEndTime(t time.Time) *ClassCreate {
	cc.mutation.SetEndTime(t)
	return cc
}

// SetCreatedAt sets the "created_at" field.
func (cc *ClassCreate) SetCreatedAt(t time.Time) *ClassCreate {
	cc.mutation.SetCreatedAt(t)
	return cc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cc *ClassCreate) SetNillableCreatedAt(t *time.Time) *ClassCreate {
	if t != nil {
		cc.SetCreatedAt(*t)
	}
	return cc
}

// SetUpdatedAt sets the "updated_at" field.
func (cc *ClassCreate) SetUpdatedAt(t time.Time) *ClassCreate {
	cc.mutation.SetUpdatedAt(t)
	return cc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (cc *ClassCreate) SetNillableUpdatedAt(t *time.Time) *ClassCreate {
	if t != nil {
		cc.SetUpdatedAt(*t)
	}
	return cc
}

// SetOwner sets the "owner" edge to the User entity.
func (cc *ClassCreate) SetOwner(u *User) *ClassCreate {
	return cc.SetOwnerID(u.ID)
}

// SetCourse sets the "course" edge to the Course entity.
func (cc *ClassCreate) SetCourse(c *Course) *ClassCreate {
	return cc.SetCourseID(c.ID)
}

// AddMemberIDs adds the "members" edge to the Class_User_Role entity by IDs.
func (cc *ClassCreate) AddMemberIDs(ids ...int) *ClassCreate {
	cc.mutation.AddMemberIDs(ids...)
	return cc
}

// AddMembers adds the "members" edges to the Class_User_Role entity.
func (cc *ClassCreate) AddMembers(c ...*Class_User_Role) *ClassCreate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cc.AddMemberIDs(ids...)
}

// AddPostIDs adds the "posts" edge to the Post entity by IDs.
func (cc *ClassCreate) AddPostIDs(ids ...int) *ClassCreate {
	cc.mutation.AddPostIDs(ids...)
	return cc
}

// AddPosts adds the "posts" edges to the Post entity.
func (cc *ClassCreate) AddPosts(p ...*Post) *ClassCreate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return cc.AddPostIDs(ids...)
}

// AddClassLabStatusIDs adds the "class_lab_statuses" edge to the Class_Lab_Status entity by IDs.
func (cc *ClassCreate) AddClassLabStatusIDs(ids ...int) *ClassCreate {
	cc.mutation.AddClassLabStatusIDs(ids...)
	return cc
}

// AddClassLabStatuses adds the "class_lab_statuses" edges to the Class_Lab_Status entity.
func (cc *ClassCreate) AddClassLabStatuses(c ...*Class_Lab_Status) *ClassCreate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cc.AddClassLabStatusIDs(ids...)
}

// Mutation returns the ClassMutation object of the builder.
func (cc *ClassCreate) Mutation() *ClassMutation {
	return cc.mutation
}

// Save creates the Class in the database.
func (cc *ClassCreate) Save(ctx context.Context) (*Class, error) {
	cc.defaults()
	return withHooks(ctx, cc.sqlSave, cc.mutation, cc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (cc *ClassCreate) SaveX(ctx context.Context) *Class {
	v, err := cc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cc *ClassCreate) Exec(ctx context.Context) error {
	_, err := cc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cc *ClassCreate) ExecX(ctx context.Context) {
	if err := cc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cc *ClassCreate) defaults() {
	if _, ok := cc.mutation.CreatedAt(); !ok {
		v := class.DefaultCreatedAt
		cc.mutation.SetCreatedAt(v)
	}
	if _, ok := cc.mutation.UpdatedAt(); !ok {
		v := class.DefaultUpdatedAt
		cc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cc *ClassCreate) check() error {
	if _, ok := cc.mutation.OwnerID(); !ok {
		return &ValidationError{Name: "owner_id", err: errors.New(`ent: missing required field "Class.owner_id"`)}
	}
	if _, ok := cc.mutation.CourseID(); !ok {
		return &ValidationError{Name: "course_id", err: errors.New(`ent: missing required field "Class.course_id"`)}
	}
	if _, ok := cc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Class.name"`)}
	}
	if v, ok := cc.mutation.Name(); ok {
		if err := class.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Class.name": %w`, err)}
		}
	}
	if _, ok := cc.mutation.Description(); !ok {
		return &ValidationError{Name: "description", err: errors.New(`ent: missing required field "Class.description"`)}
	}
	if _, ok := cc.mutation.DefaultLang(); !ok {
		return &ValidationError{Name: "default_lang", err: errors.New(`ent: missing required field "Class.default_lang"`)}
	}
	if v, ok := cc.mutation.DefaultLang(); ok {
		if err := class.DefaultLangValidator(v); err != nil {
			return &ValidationError{Name: "default_lang", err: fmt.Errorf(`ent: validator failed for field "Class.default_lang": %w`, err)}
		}
	}
	if _, ok := cc.mutation.Dotw(); !ok {
		return &ValidationError{Name: "dotw", err: errors.New(`ent: missing required field "Class.dotw"`)}
	}
	if v, ok := cc.mutation.Dotw(); ok {
		if err := class.DotwValidator(v); err != nil {
			return &ValidationError{Name: "dotw", err: fmt.Errorf(`ent: validator failed for field "Class.dotw": %w`, err)}
		}
	}
	if _, ok := cc.mutation.StartTime(); !ok {
		return &ValidationError{Name: "start_time", err: errors.New(`ent: missing required field "Class.start_time"`)}
	}
	if _, ok := cc.mutation.EndTime(); !ok {
		return &ValidationError{Name: "end_time", err: errors.New(`ent: missing required field "Class.end_time"`)}
	}
	if _, ok := cc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Class.created_at"`)}
	}
	if _, ok := cc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Class.updated_at"`)}
	}
	if _, ok := cc.mutation.OwnerID(); !ok {
		return &ValidationError{Name: "owner", err: errors.New(`ent: missing required edge "Class.owner"`)}
	}
	if _, ok := cc.mutation.CourseID(); !ok {
		return &ValidationError{Name: "course", err: errors.New(`ent: missing required edge "Class.course"`)}
	}
	return nil
}

func (cc *ClassCreate) sqlSave(ctx context.Context) (*Class, error) {
	if err := cc.check(); err != nil {
		return nil, err
	}
	_node, _spec := cc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	cc.mutation.id = &_node.ID
	cc.mutation.done = true
	return _node, nil
}

func (cc *ClassCreate) createSpec() (*Class, *sqlgraph.CreateSpec) {
	var (
		_node = &Class{config: cc.config}
		_spec = sqlgraph.NewCreateSpec(class.Table, sqlgraph.NewFieldSpec(class.FieldID, field.TypeInt))
	)
	if value, ok := cc.mutation.Name(); ok {
		_spec.SetField(class.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := cc.mutation.Description(); ok {
		_spec.SetField(class.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := cc.mutation.DefaultLang(); ok {
		_spec.SetField(class.FieldDefaultLang, field.TypeEnum, value)
		_node.DefaultLang = value
	}
	if value, ok := cc.mutation.Dotw(); ok {
		_spec.SetField(class.FieldDotw, field.TypeEnum, value)
		_node.Dotw = value
	}
	if value, ok := cc.mutation.StartTime(); ok {
		_spec.SetField(class.FieldStartTime, field.TypeTime, value)
		_node.StartTime = value
	}
	if value, ok := cc.mutation.EndTime(); ok {
		_spec.SetField(class.FieldEndTime, field.TypeTime, value)
		_node.EndTime = value
	}
	if value, ok := cc.mutation.CreatedAt(); ok {
		_spec.SetField(class.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := cc.mutation.UpdatedAt(); ok {
		_spec.SetField(class.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := cc.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   class.OwnerTable,
			Columns: []string{class.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.OwnerID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.CourseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   class.CourseTable,
			Columns: []string{class.CourseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(course.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.CourseID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.MembersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   class.MembersTable,
			Columns: []string{class.MembersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(class_user_role.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.PostsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   class.PostsTable,
			Columns: []string{class.PostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.ClassLabStatusesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   class.ClassLabStatusesTable,
			Columns: []string{class.ClassLabStatusesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(class_lab_status.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ClassCreateBulk is the builder for creating many Class entities in bulk.
type ClassCreateBulk struct {
	config
	builders []*ClassCreate
}

// Save creates the Class entities in the database.
func (ccb *ClassCreateBulk) Save(ctx context.Context) ([]*Class, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ccb.builders))
	nodes := make([]*Class, len(ccb.builders))
	mutators := make([]Mutator, len(ccb.builders))
	for i := range ccb.builders {
		func(i int, root context.Context) {
			builder := ccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ClassMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ccb *ClassCreateBulk) SaveX(ctx context.Context) []*Class {
	v, err := ccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ccb *ClassCreateBulk) Exec(ctx context.Context) error {
	_, err := ccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccb *ClassCreateBulk) ExecX(ctx context.Context) {
	if err := ccb.Exec(ctx); err != nil {
		panic(err)
	}
}
