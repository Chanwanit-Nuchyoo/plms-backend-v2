// Code generated by ent, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// ClassesColumns holds the columns for the "classes" table.
	ClassesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "name", Type: field.TypeString},
		{Name: "description", Type: field.TypeString, SchemaType: map[string]string{"mysql": "text"}},
		{Name: "default_lang", Type: field.TypeEnum, Enums: []string{"c_cpp", "python"}},
		{Name: "dotw", Type: field.TypeEnum, Enums: []string{"sunday", "monday", "tuesday", "wednesday", "thursday", "friday"}},
		{Name: "start_time", Type: field.TypeTime, SchemaType: map[string]string{"mysql": "time"}},
		{Name: "end_time", Type: field.TypeTime, SchemaType: map[string]string{"mysql": "time"}},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "course_id", Type: field.TypeInt},
		{Name: "owner_id", Type: field.TypeInt},
	}
	// ClassesTable holds the schema information for the "classes" table.
	ClassesTable = &schema.Table{
		Name:       "classes",
		Columns:    ClassesColumns,
		PrimaryKey: []*schema.Column{ClassesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "classes_courses_classes",
				Columns:    []*schema.Column{ClassesColumns[9]},
				RefColumns: []*schema.Column{CoursesColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "classes_users_owned_classes",
				Columns:    []*schema.Column{ClassesColumns[10]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// ClassLabStatusColumns holds the columns for the "class_lab_status" table.
	ClassLabStatusColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "is_open", Type: field.TypeBool, Default: false},
		{Name: "class_id", Type: field.TypeInt},
		{Name: "course_id", Type: field.TypeInt},
		{Name: "lab_id", Type: field.TypeInt},
	}
	// ClassLabStatusTable holds the schema information for the "class_lab_status" table.
	ClassLabStatusTable = &schema.Table{
		Name:       "class_lab_status",
		Columns:    ClassLabStatusColumns,
		PrimaryKey: []*schema.Column{ClassLabStatusColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "class_lab_status_classes_class_lab_statuses",
				Columns:    []*schema.Column{ClassLabStatusColumns[2]},
				RefColumns: []*schema.Column{ClassesColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "class_lab_status_courses_course_lab_statuses",
				Columns:    []*schema.Column{ClassLabStatusColumns[3]},
				RefColumns: []*schema.Column{CoursesColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "class_lab_status_labs_lab_statuses",
				Columns:    []*schema.Column{ClassLabStatusColumns[4]},
				RefColumns: []*schema.Column{LabsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// ClassUserRolesColumns holds the columns for the "class_user_roles" table.
	ClassUserRolesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "role", Type: field.TypeEnum, Enums: []string{"student", "ta", "instructor"}},
		{Name: "class_id", Type: field.TypeInt},
		{Name: "user_id", Type: field.TypeInt},
	}
	// ClassUserRolesTable holds the schema information for the "class_user_roles" table.
	ClassUserRolesTable = &schema.Table{
		Name:       "class_user_roles",
		Columns:    ClassUserRolesColumns,
		PrimaryKey: []*schema.Column{ClassUserRolesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "class_user_roles_classes_members",
				Columns:    []*schema.Column{ClassUserRolesColumns[2]},
				RefColumns: []*schema.Column{ClassesColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "class_user_roles_users_joined_classes",
				Columns:    []*schema.Column{ClassUserRolesColumns[3]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// CoursesColumns holds the columns for the "courses" table.
	CoursesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "name", Type: field.TypeString},
		{Name: "description", Type: field.TypeString, Nullable: true},
		{Name: "created_at", Type: field.TypeTime, Nullable: true},
		{Name: "updated_at", Type: field.TypeTime, Nullable: true},
		{Name: "owner_id", Type: field.TypeInt},
	}
	// CoursesTable holds the schema information for the "courses" table.
	CoursesTable = &schema.Table{
		Name:       "courses",
		Columns:    CoursesColumns,
		PrimaryKey: []*schema.Column{CoursesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "courses_users_courses",
				Columns:    []*schema.Column{CoursesColumns[5]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// LabsColumns holds the columns for the "labs" table.
	LabsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "name", Type: field.TypeString},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "course_id", Type: field.TypeInt},
	}
	// LabsTable holds the schema information for the "labs" table.
	LabsTable = &schema.Table{
		Name:       "labs",
		Columns:    LabsColumns,
		PrimaryKey: []*schema.Column{LabsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "labs_courses_labs",
				Columns:    []*schema.Column{LabsColumns[4]},
				RefColumns: []*schema.Column{CoursesColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// LabProblemsColumns holds the columns for the "lab_problems" table.
	LabProblemsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "name", Type: field.TypeString},
		{Name: "prompt", Type: field.TypeString, SchemaType: map[string]string{"mysql": "text"}},
		{Name: "full_score", Type: field.TypeFloat64, Nullable: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "lab_id", Type: field.TypeInt},
	}
	// LabProblemsTable holds the schema information for the "lab_problems" table.
	LabProblemsTable = &schema.Table{
		Name:       "lab_problems",
		Columns:    LabProblemsColumns,
		PrimaryKey: []*schema.Column{LabProblemsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "lab_problems_labs_lab_problems",
				Columns:    []*schema.Column{LabProblemsColumns[6]},
				RefColumns: []*schema.Column{LabsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// LabProblemSubmissionsColumns holds the columns for the "lab_problem_submissions" table.
	LabProblemSubmissionsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "lab_problem_id", Type: field.TypeInt},
		{Name: "code", Type: field.TypeString, SchemaType: map[string]string{"mysql": "text"}},
		{Name: "score", Type: field.TypeFloat64},
		{Name: "feedback", Type: field.TypeString, Nullable: true, SchemaType: map[string]string{"mysql": "text"}},
		{Name: "instructor_score", Type: field.TypeFloat64},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "owner_id", Type: field.TypeInt},
	}
	// LabProblemSubmissionsTable holds the schema information for the "lab_problem_submissions" table.
	LabProblemSubmissionsTable = &schema.Table{
		Name:       "lab_problem_submissions",
		Columns:    LabProblemSubmissionsColumns,
		PrimaryKey: []*schema.Column{LabProblemSubmissionsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "lab_problem_submissions_users_lab_problem_submissions",
				Columns:    []*schema.Column{LabProblemSubmissionsColumns[8]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// PostsColumns holds the columns for the "posts" table.
	PostsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "content", Type: field.TypeString, SchemaType: map[string]string{"mysql": "text"}},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "class_id", Type: field.TypeInt},
		{Name: "author_id", Type: field.TypeInt},
	}
	// PostsTable holds the schema information for the "posts" table.
	PostsTable = &schema.Table{
		Name:       "posts",
		Columns:    PostsColumns,
		PrimaryKey: []*schema.Column{PostsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "posts_classes_posts",
				Columns:    []*schema.Column{PostsColumns[4]},
				RefColumns: []*schema.Column{ClassesColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "posts_users_owned_posts",
				Columns:    []*schema.Column{PostsColumns[5]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// TestcasesColumns holds the columns for the "testcases" table.
	TestcasesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "input", Type: field.TypeString, SchemaType: map[string]string{"mysql": "text"}},
		{Name: "output", Type: field.TypeString, SchemaType: map[string]string{"mysql": "text"}},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "lab_problem_id", Type: field.TypeInt},
	}
	// TestcasesTable holds the schema information for the "testcases" table.
	TestcasesTable = &schema.Table{
		Name:       "testcases",
		Columns:    TestcasesColumns,
		PrimaryKey: []*schema.Column{TestcasesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "testcases_lab_problems_testcases",
				Columns:    []*schema.Column{TestcasesColumns[5]},
				RefColumns: []*schema.Column{LabProblemsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// TestcaseSubmissionsColumns holds the columns for the "testcase_submissions" table.
	TestcaseSubmissionsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "input", Type: field.TypeString, SchemaType: map[string]string{"mysql": "text"}},
		{Name: "expected_output", Type: field.TypeString, SchemaType: map[string]string{"mysql": "text"}},
		{Name: "actual_output", Type: field.TypeString, SchemaType: map[string]string{"mysql": "text"}},
		{Name: "is_passed", Type: field.TypeBool},
		{Name: "score", Type: field.TypeFloat64},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "submission_id", Type: field.TypeInt},
		{Name: "testcase_id", Type: field.TypeInt},
	}
	// TestcaseSubmissionsTable holds the schema information for the "testcase_submissions" table.
	TestcaseSubmissionsTable = &schema.Table{
		Name:       "testcase_submissions",
		Columns:    TestcaseSubmissionsColumns,
		PrimaryKey: []*schema.Column{TestcaseSubmissionsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "testcase_submissions_lab_problem_submissions_testcase_submissions",
				Columns:    []*schema.Column{TestcaseSubmissionsColumns[8]},
				RefColumns: []*schema.Column{LabProblemSubmissionsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "testcase_submissions_testcases_testcase_submissions",
				Columns:    []*schema.Column{TestcaseSubmissionsColumns[9]},
				RefColumns: []*schema.Column{TestcasesColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// TopicsColumns holds the columns for the "topics" table.
	TopicsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "name", Type: field.TypeString},
		{Name: "description", Type: field.TypeString, SchemaType: map[string]string{"mysql": "text"}},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "course_id", Type: field.TypeInt},
	}
	// TopicsTable holds the schema information for the "topics" table.
	TopicsTable = &schema.Table{
		Name:       "topics",
		Columns:    TopicsColumns,
		PrimaryKey: []*schema.Column{TopicsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "topics_courses_topics",
				Columns:    []*schema.Column{TopicsColumns[5]},
				RefColumns: []*schema.Column{CoursesColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// TopicFileMatsColumns holds the columns for the "topic_file_mats" table.
	TopicFileMatsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "name", Type: field.TypeString},
		{Name: "file_path", Type: field.TypeString},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "topic_id", Type: field.TypeInt},
	}
	// TopicFileMatsTable holds the schema information for the "topic_file_mats" table.
	TopicFileMatsTable = &schema.Table{
		Name:       "topic_file_mats",
		Columns:    TopicFileMatsColumns,
		PrimaryKey: []*schema.Column{TopicFileMatsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "topic_file_mats_topics_files",
				Columns:    []*schema.Column{TopicFileMatsColumns[4]},
				RefColumns: []*schema.Column{TopicsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// UsersColumns holds the columns for the "users" table.
	UsersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "username", Type: field.TypeString, Unique: true, Size: 16},
		{Name: "email", Type: field.TypeString, Unique: true},
		{Name: "password", Type: field.TypeString, Size: 16},
		{Name: "name", Type: field.TypeString},
		{Name: "image_path", Type: field.TypeString, Nullable: true},
		{Name: "last_online", Type: field.TypeTime, Nullable: true},
		{Name: "created_at", Type: field.TypeTime, Nullable: true},
		{Name: "updated_at", Type: field.TypeTime, Nullable: true},
		{Name: "is_admin", Type: field.TypeBool, Default: false},
	}
	// UsersTable holds the schema information for the "users" table.
	UsersTable = &schema.Table{
		Name:       "users",
		Columns:    UsersColumns,
		PrimaryKey: []*schema.Column{UsersColumns[0]},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		ClassesTable,
		ClassLabStatusTable,
		ClassUserRolesTable,
		CoursesTable,
		LabsTable,
		LabProblemsTable,
		LabProblemSubmissionsTable,
		PostsTable,
		TestcasesTable,
		TestcaseSubmissionsTable,
		TopicsTable,
		TopicFileMatsTable,
		UsersTable,
	}
)

func init() {
	ClassesTable.ForeignKeys[0].RefTable = CoursesTable
	ClassesTable.ForeignKeys[1].RefTable = UsersTable
	ClassLabStatusTable.ForeignKeys[0].RefTable = ClassesTable
	ClassLabStatusTable.ForeignKeys[1].RefTable = CoursesTable
	ClassLabStatusTable.ForeignKeys[2].RefTable = LabsTable
	ClassUserRolesTable.ForeignKeys[0].RefTable = ClassesTable
	ClassUserRolesTable.ForeignKeys[1].RefTable = UsersTable
	CoursesTable.ForeignKeys[0].RefTable = UsersTable
	LabsTable.ForeignKeys[0].RefTable = CoursesTable
	LabProblemsTable.ForeignKeys[0].RefTable = LabsTable
	LabProblemSubmissionsTable.ForeignKeys[0].RefTable = UsersTable
	PostsTable.ForeignKeys[0].RefTable = ClassesTable
	PostsTable.ForeignKeys[1].RefTable = UsersTable
	TestcasesTable.ForeignKeys[0].RefTable = LabProblemsTable
	TestcaseSubmissionsTable.ForeignKeys[0].RefTable = LabProblemSubmissionsTable
	TestcaseSubmissionsTable.ForeignKeys[1].RefTable = TestcasesTable
	TopicsTable.ForeignKeys[0].RefTable = CoursesTable
	TopicFileMatsTable.ForeignKeys[0].RefTable = TopicsTable
}
