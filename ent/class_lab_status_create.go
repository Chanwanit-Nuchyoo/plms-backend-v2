// Code generated by ent, DO NOT EDIT.

package ent

import (
	"plms-backend/ent/class"
	"plms-backend/ent/class_lab_status"
	"plms-backend/ent/course"
	"plms-backend/ent/lab"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ClassLabStatusCreate is the builder for creating a Class_Lab_Status entity.
type ClassLabStatusCreate struct {
	config
	mutation *ClassLabStatusMutation
	hooks    []Hook
}

// SetCourseID sets the "course_id" field.
func (clsc *ClassLabStatusCreate) SetCourseID(i int) *ClassLabStatusCreate {
	clsc.mutation.SetCourseID(i)
	return clsc
}

// SetClassID sets the "class_id" field.
func (clsc *ClassLabStatusCreate) SetClassID(i int) *ClassLabStatusCreate {
	clsc.mutation.SetClassID(i)
	return clsc
}

// SetLabID sets the "lab_id" field.
func (clsc *ClassLabStatusCreate) SetLabID(i int) *ClassLabStatusCreate {
	clsc.mutation.SetLabID(i)
	return clsc
}

// SetIsOpen sets the "is_open" field.
func (clsc *ClassLabStatusCreate) SetIsOpen(b bool) *ClassLabStatusCreate {
	clsc.mutation.SetIsOpen(b)
	return clsc
}

// SetNillableIsOpen sets the "is_open" field if the given value is not nil.
func (clsc *ClassLabStatusCreate) SetNillableIsOpen(b *bool) *ClassLabStatusCreate {
	if b != nil {
		clsc.SetIsOpen(*b)
	}
	return clsc
}

// SetCourse sets the "course" edge to the Course entity.
func (clsc *ClassLabStatusCreate) SetCourse(c *Course) *ClassLabStatusCreate {
	return clsc.SetCourseID(c.ID)
}

// SetClass sets the "class" edge to the Class entity.
func (clsc *ClassLabStatusCreate) SetClass(c *Class) *ClassLabStatusCreate {
	return clsc.SetClassID(c.ID)
}

// SetLab sets the "lab" edge to the Lab entity.
func (clsc *ClassLabStatusCreate) SetLab(l *Lab) *ClassLabStatusCreate {
	return clsc.SetLabID(l.ID)
}

// Mutation returns the ClassLabStatusMutation object of the builder.
func (clsc *ClassLabStatusCreate) Mutation() *ClassLabStatusMutation {
	return clsc.mutation
}

// Save creates the Class_Lab_Status in the database.
func (clsc *ClassLabStatusCreate) Save(ctx context.Context) (*Class_Lab_Status, error) {
	clsc.defaults()
	return withHooks(ctx, clsc.sqlSave, clsc.mutation, clsc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (clsc *ClassLabStatusCreate) SaveX(ctx context.Context) *Class_Lab_Status {
	v, err := clsc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (clsc *ClassLabStatusCreate) Exec(ctx context.Context) error {
	_, err := clsc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (clsc *ClassLabStatusCreate) ExecX(ctx context.Context) {
	if err := clsc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (clsc *ClassLabStatusCreate) defaults() {
	if _, ok := clsc.mutation.IsOpen(); !ok {
		v := class_lab_status.DefaultIsOpen
		clsc.mutation.SetIsOpen(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (clsc *ClassLabStatusCreate) check() error {
	if _, ok := clsc.mutation.CourseID(); !ok {
		return &ValidationError{Name: "course_id", err: errors.New(`ent: missing required field "Class_Lab_Status.course_id"`)}
	}
	if _, ok := clsc.mutation.ClassID(); !ok {
		return &ValidationError{Name: "class_id", err: errors.New(`ent: missing required field "Class_Lab_Status.class_id"`)}
	}
	if _, ok := clsc.mutation.LabID(); !ok {
		return &ValidationError{Name: "lab_id", err: errors.New(`ent: missing required field "Class_Lab_Status.lab_id"`)}
	}
	if _, ok := clsc.mutation.IsOpen(); !ok {
		return &ValidationError{Name: "is_open", err: errors.New(`ent: missing required field "Class_Lab_Status.is_open"`)}
	}
	if _, ok := clsc.mutation.CourseID(); !ok {
		return &ValidationError{Name: "course", err: errors.New(`ent: missing required edge "Class_Lab_Status.course"`)}
	}
	if _, ok := clsc.mutation.ClassID(); !ok {
		return &ValidationError{Name: "class", err: errors.New(`ent: missing required edge "Class_Lab_Status.class"`)}
	}
	if _, ok := clsc.mutation.LabID(); !ok {
		return &ValidationError{Name: "lab", err: errors.New(`ent: missing required edge "Class_Lab_Status.lab"`)}
	}
	return nil
}

func (clsc *ClassLabStatusCreate) sqlSave(ctx context.Context) (*Class_Lab_Status, error) {
	if err := clsc.check(); err != nil {
		return nil, err
	}
	_node, _spec := clsc.createSpec()
	if err := sqlgraph.CreateNode(ctx, clsc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	clsc.mutation.id = &_node.ID
	clsc.mutation.done = true
	return _node, nil
}

func (clsc *ClassLabStatusCreate) createSpec() (*Class_Lab_Status, *sqlgraph.CreateSpec) {
	var (
		_node = &Class_Lab_Status{config: clsc.config}
		_spec = sqlgraph.NewCreateSpec(class_lab_status.Table, sqlgraph.NewFieldSpec(class_lab_status.FieldID, field.TypeInt))
	)
	if value, ok := clsc.mutation.IsOpen(); ok {
		_spec.SetField(class_lab_status.FieldIsOpen, field.TypeBool, value)
		_node.IsOpen = value
	}
	if nodes := clsc.mutation.CourseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   class_lab_status.CourseTable,
			Columns: []string{class_lab_status.CourseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(course.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.CourseID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := clsc.mutation.ClassIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   class_lab_status.ClassTable,
			Columns: []string{class_lab_status.ClassColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(class.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ClassID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := clsc.mutation.LabIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   class_lab_status.LabTable,
			Columns: []string{class_lab_status.LabColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(lab.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.LabID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ClassLabStatusCreateBulk is the builder for creating many Class_Lab_Status entities in bulk.
type ClassLabStatusCreateBulk struct {
	config
	builders []*ClassLabStatusCreate
}

// Save creates the Class_Lab_Status entities in the database.
func (clscb *ClassLabStatusCreateBulk) Save(ctx context.Context) ([]*Class_Lab_Status, error) {
	specs := make([]*sqlgraph.CreateSpec, len(clscb.builders))
	nodes := make([]*Class_Lab_Status, len(clscb.builders))
	mutators := make([]Mutator, len(clscb.builders))
	for i := range clscb.builders {
		func(i int, root context.Context) {
			builder := clscb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ClassLabStatusMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, clscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, clscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, clscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (clscb *ClassLabStatusCreateBulk) SaveX(ctx context.Context) []*Class_Lab_Status {
	v, err := clscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (clscb *ClassLabStatusCreateBulk) Exec(ctx context.Context) error {
	_, err := clscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (clscb *ClassLabStatusCreateBulk) ExecX(ctx context.Context) {
	if err := clscb.Exec(ctx); err != nil {
		panic(err)
	}
}
