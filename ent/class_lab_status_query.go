// Code generated by ent, DO NOT EDIT.

package ent

import (
	"plms-backend/ent/class"
	"plms-backend/ent/class_lab_status"
	"plms-backend/ent/course"
	"plms-backend/ent/lab"
	"plms-backend/ent/predicate"
	"context"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ClassLabStatusQuery is the builder for querying Class_Lab_Status entities.
type ClassLabStatusQuery struct {
	config
	ctx        *QueryContext
	order      []class_lab_status.OrderOption
	inters     []Interceptor
	predicates []predicate.Class_Lab_Status
	withCourse *CourseQuery
	withClass  *ClassQuery
	withLab    *LabQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the ClassLabStatusQuery builder.
func (clsq *ClassLabStatusQuery) Where(ps ...predicate.Class_Lab_Status) *ClassLabStatusQuery {
	clsq.predicates = append(clsq.predicates, ps...)
	return clsq
}

// Limit the number of records to be returned by this query.
func (clsq *ClassLabStatusQuery) Limit(limit int) *ClassLabStatusQuery {
	clsq.ctx.Limit = &limit
	return clsq
}

// Offset to start from.
func (clsq *ClassLabStatusQuery) Offset(offset int) *ClassLabStatusQuery {
	clsq.ctx.Offset = &offset
	return clsq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (clsq *ClassLabStatusQuery) Unique(unique bool) *ClassLabStatusQuery {
	clsq.ctx.Unique = &unique
	return clsq
}

// Order specifies how the records should be ordered.
func (clsq *ClassLabStatusQuery) Order(o ...class_lab_status.OrderOption) *ClassLabStatusQuery {
	clsq.order = append(clsq.order, o...)
	return clsq
}

// QueryCourse chains the current query on the "course" edge.
func (clsq *ClassLabStatusQuery) QueryCourse() *CourseQuery {
	query := (&CourseClient{config: clsq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := clsq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := clsq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(class_lab_status.Table, class_lab_status.FieldID, selector),
			sqlgraph.To(course.Table, course.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, class_lab_status.CourseTable, class_lab_status.CourseColumn),
		)
		fromU = sqlgraph.SetNeighbors(clsq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryClass chains the current query on the "class" edge.
func (clsq *ClassLabStatusQuery) QueryClass() *ClassQuery {
	query := (&ClassClient{config: clsq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := clsq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := clsq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(class_lab_status.Table, class_lab_status.FieldID, selector),
			sqlgraph.To(class.Table, class.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, class_lab_status.ClassTable, class_lab_status.ClassColumn),
		)
		fromU = sqlgraph.SetNeighbors(clsq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryLab chains the current query on the "lab" edge.
func (clsq *ClassLabStatusQuery) QueryLab() *LabQuery {
	query := (&LabClient{config: clsq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := clsq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := clsq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(class_lab_status.Table, class_lab_status.FieldID, selector),
			sqlgraph.To(lab.Table, lab.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, class_lab_status.LabTable, class_lab_status.LabColumn),
		)
		fromU = sqlgraph.SetNeighbors(clsq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first Class_Lab_Status entity from the query.
// Returns a *NotFoundError when no Class_Lab_Status was found.
func (clsq *ClassLabStatusQuery) First(ctx context.Context) (*Class_Lab_Status, error) {
	nodes, err := clsq.Limit(1).All(setContextOp(ctx, clsq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{class_lab_status.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (clsq *ClassLabStatusQuery) FirstX(ctx context.Context) *Class_Lab_Status {
	node, err := clsq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first Class_Lab_Status ID from the query.
// Returns a *NotFoundError when no Class_Lab_Status ID was found.
func (clsq *ClassLabStatusQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = clsq.Limit(1).IDs(setContextOp(ctx, clsq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{class_lab_status.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (clsq *ClassLabStatusQuery) FirstIDX(ctx context.Context) int {
	id, err := clsq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single Class_Lab_Status entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one Class_Lab_Status entity is found.
// Returns a *NotFoundError when no Class_Lab_Status entities are found.
func (clsq *ClassLabStatusQuery) Only(ctx context.Context) (*Class_Lab_Status, error) {
	nodes, err := clsq.Limit(2).All(setContextOp(ctx, clsq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{class_lab_status.Label}
	default:
		return nil, &NotSingularError{class_lab_status.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (clsq *ClassLabStatusQuery) OnlyX(ctx context.Context) *Class_Lab_Status {
	node, err := clsq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only Class_Lab_Status ID in the query.
// Returns a *NotSingularError when more than one Class_Lab_Status ID is found.
// Returns a *NotFoundError when no entities are found.
func (clsq *ClassLabStatusQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = clsq.Limit(2).IDs(setContextOp(ctx, clsq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{class_lab_status.Label}
	default:
		err = &NotSingularError{class_lab_status.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (clsq *ClassLabStatusQuery) OnlyIDX(ctx context.Context) int {
	id, err := clsq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of Class_Lab_StatusSlice.
func (clsq *ClassLabStatusQuery) All(ctx context.Context) ([]*Class_Lab_Status, error) {
	ctx = setContextOp(ctx, clsq.ctx, "All")
	if err := clsq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*Class_Lab_Status, *ClassLabStatusQuery]()
	return withInterceptors[[]*Class_Lab_Status](ctx, clsq, qr, clsq.inters)
}

// AllX is like All, but panics if an error occurs.
func (clsq *ClassLabStatusQuery) AllX(ctx context.Context) []*Class_Lab_Status {
	nodes, err := clsq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of Class_Lab_Status IDs.
func (clsq *ClassLabStatusQuery) IDs(ctx context.Context) (ids []int, err error) {
	if clsq.ctx.Unique == nil && clsq.path != nil {
		clsq.Unique(true)
	}
	ctx = setContextOp(ctx, clsq.ctx, "IDs")
	if err = clsq.Select(class_lab_status.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (clsq *ClassLabStatusQuery) IDsX(ctx context.Context) []int {
	ids, err := clsq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (clsq *ClassLabStatusQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, clsq.ctx, "Count")
	if err := clsq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, clsq, querierCount[*ClassLabStatusQuery](), clsq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (clsq *ClassLabStatusQuery) CountX(ctx context.Context) int {
	count, err := clsq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (clsq *ClassLabStatusQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, clsq.ctx, "Exist")
	switch _, err := clsq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (clsq *ClassLabStatusQuery) ExistX(ctx context.Context) bool {
	exist, err := clsq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the ClassLabStatusQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (clsq *ClassLabStatusQuery) Clone() *ClassLabStatusQuery {
	if clsq == nil {
		return nil
	}
	return &ClassLabStatusQuery{
		config:     clsq.config,
		ctx:        clsq.ctx.Clone(),
		order:      append([]class_lab_status.OrderOption{}, clsq.order...),
		inters:     append([]Interceptor{}, clsq.inters...),
		predicates: append([]predicate.Class_Lab_Status{}, clsq.predicates...),
		withCourse: clsq.withCourse.Clone(),
		withClass:  clsq.withClass.Clone(),
		withLab:    clsq.withLab.Clone(),
		// clone intermediate query.
		sql:  clsq.sql.Clone(),
		path: clsq.path,
	}
}

// WithCourse tells the query-builder to eager-load the nodes that are connected to
// the "course" edge. The optional arguments are used to configure the query builder of the edge.
func (clsq *ClassLabStatusQuery) WithCourse(opts ...func(*CourseQuery)) *ClassLabStatusQuery {
	query := (&CourseClient{config: clsq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	clsq.withCourse = query
	return clsq
}

// WithClass tells the query-builder to eager-load the nodes that are connected to
// the "class" edge. The optional arguments are used to configure the query builder of the edge.
func (clsq *ClassLabStatusQuery) WithClass(opts ...func(*ClassQuery)) *ClassLabStatusQuery {
	query := (&ClassClient{config: clsq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	clsq.withClass = query
	return clsq
}

// WithLab tells the query-builder to eager-load the nodes that are connected to
// the "lab" edge. The optional arguments are used to configure the query builder of the edge.
func (clsq *ClassLabStatusQuery) WithLab(opts ...func(*LabQuery)) *ClassLabStatusQuery {
	query := (&LabClient{config: clsq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	clsq.withLab = query
	return clsq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CourseID int `json:"course_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.ClassLabStatus.Query().
//		GroupBy(class_lab_status.FieldCourseID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (clsq *ClassLabStatusQuery) GroupBy(field string, fields ...string) *ClassLabStatusGroupBy {
	clsq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &ClassLabStatusGroupBy{build: clsq}
	grbuild.flds = &clsq.ctx.Fields
	grbuild.label = class_lab_status.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CourseID int `json:"course_id,omitempty"`
//	}
//
//	client.ClassLabStatus.Query().
//		Select(class_lab_status.FieldCourseID).
//		Scan(ctx, &v)
func (clsq *ClassLabStatusQuery) Select(fields ...string) *ClassLabStatusSelect {
	clsq.ctx.Fields = append(clsq.ctx.Fields, fields...)
	sbuild := &ClassLabStatusSelect{ClassLabStatusQuery: clsq}
	sbuild.label = class_lab_status.Label
	sbuild.flds, sbuild.scan = &clsq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a ClassLabStatusSelect configured with the given aggregations.
func (clsq *ClassLabStatusQuery) Aggregate(fns ...AggregateFunc) *ClassLabStatusSelect {
	return clsq.Select().Aggregate(fns...)
}

func (clsq *ClassLabStatusQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range clsq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, clsq); err != nil {
				return err
			}
		}
	}
	for _, f := range clsq.ctx.Fields {
		if !class_lab_status.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if clsq.path != nil {
		prev, err := clsq.path(ctx)
		if err != nil {
			return err
		}
		clsq.sql = prev
	}
	return nil
}

func (clsq *ClassLabStatusQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*Class_Lab_Status, error) {
	var (
		nodes       = []*Class_Lab_Status{}
		_spec       = clsq.querySpec()
		loadedTypes = [3]bool{
			clsq.withCourse != nil,
			clsq.withClass != nil,
			clsq.withLab != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*Class_Lab_Status).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &Class_Lab_Status{config: clsq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, clsq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := clsq.withCourse; query != nil {
		if err := clsq.loadCourse(ctx, query, nodes, nil,
			func(n *Class_Lab_Status, e *Course) { n.Edges.Course = e }); err != nil {
			return nil, err
		}
	}
	if query := clsq.withClass; query != nil {
		if err := clsq.loadClass(ctx, query, nodes, nil,
			func(n *Class_Lab_Status, e *Class) { n.Edges.Class = e }); err != nil {
			return nil, err
		}
	}
	if query := clsq.withLab; query != nil {
		if err := clsq.loadLab(ctx, query, nodes, nil,
			func(n *Class_Lab_Status, e *Lab) { n.Edges.Lab = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (clsq *ClassLabStatusQuery) loadCourse(ctx context.Context, query *CourseQuery, nodes []*Class_Lab_Status, init func(*Class_Lab_Status), assign func(*Class_Lab_Status, *Course)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*Class_Lab_Status)
	for i := range nodes {
		fk := nodes[i].CourseID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(course.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "course_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (clsq *ClassLabStatusQuery) loadClass(ctx context.Context, query *ClassQuery, nodes []*Class_Lab_Status, init func(*Class_Lab_Status), assign func(*Class_Lab_Status, *Class)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*Class_Lab_Status)
	for i := range nodes {
		fk := nodes[i].ClassID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(class.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "class_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (clsq *ClassLabStatusQuery) loadLab(ctx context.Context, query *LabQuery, nodes []*Class_Lab_Status, init func(*Class_Lab_Status), assign func(*Class_Lab_Status, *Lab)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*Class_Lab_Status)
	for i := range nodes {
		fk := nodes[i].LabID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(lab.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "lab_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (clsq *ClassLabStatusQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := clsq.querySpec()
	_spec.Node.Columns = clsq.ctx.Fields
	if len(clsq.ctx.Fields) > 0 {
		_spec.Unique = clsq.ctx.Unique != nil && *clsq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, clsq.driver, _spec)
}

func (clsq *ClassLabStatusQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(class_lab_status.Table, class_lab_status.Columns, sqlgraph.NewFieldSpec(class_lab_status.FieldID, field.TypeInt))
	_spec.From = clsq.sql
	if unique := clsq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if clsq.path != nil {
		_spec.Unique = true
	}
	if fields := clsq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, class_lab_status.FieldID)
		for i := range fields {
			if fields[i] != class_lab_status.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if clsq.withCourse != nil {
			_spec.Node.AddColumnOnce(class_lab_status.FieldCourseID)
		}
		if clsq.withClass != nil {
			_spec.Node.AddColumnOnce(class_lab_status.FieldClassID)
		}
		if clsq.withLab != nil {
			_spec.Node.AddColumnOnce(class_lab_status.FieldLabID)
		}
	}
	if ps := clsq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := clsq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := clsq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := clsq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (clsq *ClassLabStatusQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(clsq.driver.Dialect())
	t1 := builder.Table(class_lab_status.Table)
	columns := clsq.ctx.Fields
	if len(columns) == 0 {
		columns = class_lab_status.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if clsq.sql != nil {
		selector = clsq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if clsq.ctx.Unique != nil && *clsq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range clsq.predicates {
		p(selector)
	}
	for _, p := range clsq.order {
		p(selector)
	}
	if offset := clsq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := clsq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// ClassLabStatusGroupBy is the group-by builder for Class_Lab_Status entities.
type ClassLabStatusGroupBy struct {
	selector
	build *ClassLabStatusQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (clsgb *ClassLabStatusGroupBy) Aggregate(fns ...AggregateFunc) *ClassLabStatusGroupBy {
	clsgb.fns = append(clsgb.fns, fns...)
	return clsgb
}

// Scan applies the selector query and scans the result into the given value.
func (clsgb *ClassLabStatusGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, clsgb.build.ctx, "GroupBy")
	if err := clsgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ClassLabStatusQuery, *ClassLabStatusGroupBy](ctx, clsgb.build, clsgb, clsgb.build.inters, v)
}

func (clsgb *ClassLabStatusGroupBy) sqlScan(ctx context.Context, root *ClassLabStatusQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(clsgb.fns))
	for _, fn := range clsgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*clsgb.flds)+len(clsgb.fns))
		for _, f := range *clsgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*clsgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := clsgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// ClassLabStatusSelect is the builder for selecting fields of ClassLabStatus entities.
type ClassLabStatusSelect struct {
	*ClassLabStatusQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (clss *ClassLabStatusSelect) Aggregate(fns ...AggregateFunc) *ClassLabStatusSelect {
	clss.fns = append(clss.fns, fns...)
	return clss
}

// Scan applies the selector query and scans the result into the given value.
func (clss *ClassLabStatusSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, clss.ctx, "Select")
	if err := clss.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ClassLabStatusQuery, *ClassLabStatusSelect](ctx, clss.ClassLabStatusQuery, clss, clss.inters, v)
}

func (clss *ClassLabStatusSelect) sqlScan(ctx context.Context, root *ClassLabStatusQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(clss.fns))
	for _, fn := range clss.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*clss.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := clss.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
