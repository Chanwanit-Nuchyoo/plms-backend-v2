// Code generated by ent, DO NOT EDIT.

package ent

import (
	"plms-backend/ent/class"
	"plms-backend/ent/class_user_role"
	"plms-backend/ent/user"
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Class_User_Role is the model entity for the Class_User_Role schema.
type Class_User_Role struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID int `json:"user_id,omitempty"`
	// ClassID holds the value of the "class_id" field.
	ClassID int `json:"class_id,omitempty"`
	// Role holds the value of the "role" field.
	Role class_user_role.Role `json:"role,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the Class_User_RoleQuery when eager-loading is set.
	Edges        Class_User_RoleEdges `json:"edges"`
	selectValues sql.SelectValues
}

// Class_User_RoleEdges holds the relations/edges for other nodes in the graph.
type Class_User_RoleEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// Class holds the value of the class edge.
	Class *Class `json:"class,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e Class_User_RoleEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.User == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// ClassOrErr returns the Class value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e Class_User_RoleEdges) ClassOrErr() (*Class, error) {
	if e.loadedTypes[1] {
		if e.Class == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: class.Label}
		}
		return e.Class, nil
	}
	return nil, &NotLoadedError{edge: "class"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Class_User_Role) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case class_user_role.FieldID, class_user_role.FieldUserID, class_user_role.FieldClassID:
			values[i] = new(sql.NullInt64)
		case class_user_role.FieldRole:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Class_User_Role fields.
func (cur *Class_User_Role) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case class_user_role.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			cur.ID = int(value.Int64)
		case class_user_role.FieldUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				cur.UserID = int(value.Int64)
			}
		case class_user_role.FieldClassID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field class_id", values[i])
			} else if value.Valid {
				cur.ClassID = int(value.Int64)
			}
		case class_user_role.FieldRole:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field role", values[i])
			} else if value.Valid {
				cur.Role = class_user_role.Role(value.String)
			}
		default:
			cur.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Class_User_Role.
// This includes values selected through modifiers, order, etc.
func (cur *Class_User_Role) Value(name string) (ent.Value, error) {
	return cur.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the Class_User_Role entity.
func (cur *Class_User_Role) QueryUser() *UserQuery {
	return NewClassUserRoleClient(cur.config).QueryUser(cur)
}

// QueryClass queries the "class" edge of the Class_User_Role entity.
func (cur *Class_User_Role) QueryClass() *ClassQuery {
	return NewClassUserRoleClient(cur.config).QueryClass(cur)
}

// Update returns a builder for updating this Class_User_Role.
// Note that you need to call Class_User_Role.Unwrap() before calling this method if this Class_User_Role
// was returned from a transaction, and the transaction was committed or rolled back.
func (cur *Class_User_Role) Update() *ClassUserRoleUpdateOne {
	return NewClassUserRoleClient(cur.config).UpdateOne(cur)
}

// Unwrap unwraps the Class_User_Role entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (cur *Class_User_Role) Unwrap() *Class_User_Role {
	_tx, ok := cur.config.driver.(*txDriver)
	if !ok {
		panic("ent: Class_User_Role is not a transactional entity")
	}
	cur.config.driver = _tx.drv
	return cur
}

// String implements the fmt.Stringer.
func (cur *Class_User_Role) String() string {
	var builder strings.Builder
	builder.WriteString("Class_User_Role(")
	builder.WriteString(fmt.Sprintf("id=%v, ", cur.ID))
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", cur.UserID))
	builder.WriteString(", ")
	builder.WriteString("class_id=")
	builder.WriteString(fmt.Sprintf("%v", cur.ClassID))
	builder.WriteString(", ")
	builder.WriteString("role=")
	builder.WriteString(fmt.Sprintf("%v", cur.Role))
	builder.WriteByte(')')
	return builder.String()
}

// Class_User_Roles is a parsable slice of Class_User_Role.
type Class_User_Roles []*Class_User_Role
