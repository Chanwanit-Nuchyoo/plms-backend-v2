// Code generated by ent, DO NOT EDIT.

package ent

import (
	"plms-backend/ent/lab_problem_submission"
	"plms-backend/ent/predicate"
	"plms-backend/ent/testcase_submission"
	"plms-backend/ent/user"
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// LabProblemSubmissionQuery is the builder for querying Lab_Problem_Submission entities.
type LabProblemSubmissionQuery struct {
	config
	ctx                     *QueryContext
	order                   []lab_problem_submission.OrderOption
	inters                  []Interceptor
	predicates              []predicate.Lab_Problem_Submission
	withOwner               *UserQuery
	withTestcaseSubmissions *TestcaseSubmissionQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the LabProblemSubmissionQuery builder.
func (lpsq *LabProblemSubmissionQuery) Where(ps ...predicate.Lab_Problem_Submission) *LabProblemSubmissionQuery {
	lpsq.predicates = append(lpsq.predicates, ps...)
	return lpsq
}

// Limit the number of records to be returned by this query.
func (lpsq *LabProblemSubmissionQuery) Limit(limit int) *LabProblemSubmissionQuery {
	lpsq.ctx.Limit = &limit
	return lpsq
}

// Offset to start from.
func (lpsq *LabProblemSubmissionQuery) Offset(offset int) *LabProblemSubmissionQuery {
	lpsq.ctx.Offset = &offset
	return lpsq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (lpsq *LabProblemSubmissionQuery) Unique(unique bool) *LabProblemSubmissionQuery {
	lpsq.ctx.Unique = &unique
	return lpsq
}

// Order specifies how the records should be ordered.
func (lpsq *LabProblemSubmissionQuery) Order(o ...lab_problem_submission.OrderOption) *LabProblemSubmissionQuery {
	lpsq.order = append(lpsq.order, o...)
	return lpsq
}

// QueryOwner chains the current query on the "owner" edge.
func (lpsq *LabProblemSubmissionQuery) QueryOwner() *UserQuery {
	query := (&UserClient{config: lpsq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := lpsq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := lpsq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(lab_problem_submission.Table, lab_problem_submission.FieldID, selector),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, lab_problem_submission.OwnerTable, lab_problem_submission.OwnerColumn),
		)
		fromU = sqlgraph.SetNeighbors(lpsq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryTestcaseSubmissions chains the current query on the "testcase_submissions" edge.
func (lpsq *LabProblemSubmissionQuery) QueryTestcaseSubmissions() *TestcaseSubmissionQuery {
	query := (&TestcaseSubmissionClient{config: lpsq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := lpsq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := lpsq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(lab_problem_submission.Table, lab_problem_submission.FieldID, selector),
			sqlgraph.To(testcase_submission.Table, testcase_submission.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, lab_problem_submission.TestcaseSubmissionsTable, lab_problem_submission.TestcaseSubmissionsColumn),
		)
		fromU = sqlgraph.SetNeighbors(lpsq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first Lab_Problem_Submission entity from the query.
// Returns a *NotFoundError when no Lab_Problem_Submission was found.
func (lpsq *LabProblemSubmissionQuery) First(ctx context.Context) (*Lab_Problem_Submission, error) {
	nodes, err := lpsq.Limit(1).All(setContextOp(ctx, lpsq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{lab_problem_submission.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (lpsq *LabProblemSubmissionQuery) FirstX(ctx context.Context) *Lab_Problem_Submission {
	node, err := lpsq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first Lab_Problem_Submission ID from the query.
// Returns a *NotFoundError when no Lab_Problem_Submission ID was found.
func (lpsq *LabProblemSubmissionQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = lpsq.Limit(1).IDs(setContextOp(ctx, lpsq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{lab_problem_submission.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (lpsq *LabProblemSubmissionQuery) FirstIDX(ctx context.Context) int {
	id, err := lpsq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single Lab_Problem_Submission entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one Lab_Problem_Submission entity is found.
// Returns a *NotFoundError when no Lab_Problem_Submission entities are found.
func (lpsq *LabProblemSubmissionQuery) Only(ctx context.Context) (*Lab_Problem_Submission, error) {
	nodes, err := lpsq.Limit(2).All(setContextOp(ctx, lpsq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{lab_problem_submission.Label}
	default:
		return nil, &NotSingularError{lab_problem_submission.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (lpsq *LabProblemSubmissionQuery) OnlyX(ctx context.Context) *Lab_Problem_Submission {
	node, err := lpsq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only Lab_Problem_Submission ID in the query.
// Returns a *NotSingularError when more than one Lab_Problem_Submission ID is found.
// Returns a *NotFoundError when no entities are found.
func (lpsq *LabProblemSubmissionQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = lpsq.Limit(2).IDs(setContextOp(ctx, lpsq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{lab_problem_submission.Label}
	default:
		err = &NotSingularError{lab_problem_submission.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (lpsq *LabProblemSubmissionQuery) OnlyIDX(ctx context.Context) int {
	id, err := lpsq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of Lab_Problem_Submissions.
func (lpsq *LabProblemSubmissionQuery) All(ctx context.Context) ([]*Lab_Problem_Submission, error) {
	ctx = setContextOp(ctx, lpsq.ctx, "All")
	if err := lpsq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*Lab_Problem_Submission, *LabProblemSubmissionQuery]()
	return withInterceptors[[]*Lab_Problem_Submission](ctx, lpsq, qr, lpsq.inters)
}

// AllX is like All, but panics if an error occurs.
func (lpsq *LabProblemSubmissionQuery) AllX(ctx context.Context) []*Lab_Problem_Submission {
	nodes, err := lpsq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of Lab_Problem_Submission IDs.
func (lpsq *LabProblemSubmissionQuery) IDs(ctx context.Context) (ids []int, err error) {
	if lpsq.ctx.Unique == nil && lpsq.path != nil {
		lpsq.Unique(true)
	}
	ctx = setContextOp(ctx, lpsq.ctx, "IDs")
	if err = lpsq.Select(lab_problem_submission.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (lpsq *LabProblemSubmissionQuery) IDsX(ctx context.Context) []int {
	ids, err := lpsq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (lpsq *LabProblemSubmissionQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, lpsq.ctx, "Count")
	if err := lpsq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, lpsq, querierCount[*LabProblemSubmissionQuery](), lpsq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (lpsq *LabProblemSubmissionQuery) CountX(ctx context.Context) int {
	count, err := lpsq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (lpsq *LabProblemSubmissionQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, lpsq.ctx, "Exist")
	switch _, err := lpsq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (lpsq *LabProblemSubmissionQuery) ExistX(ctx context.Context) bool {
	exist, err := lpsq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the LabProblemSubmissionQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (lpsq *LabProblemSubmissionQuery) Clone() *LabProblemSubmissionQuery {
	if lpsq == nil {
		return nil
	}
	return &LabProblemSubmissionQuery{
		config:                  lpsq.config,
		ctx:                     lpsq.ctx.Clone(),
		order:                   append([]lab_problem_submission.OrderOption{}, lpsq.order...),
		inters:                  append([]Interceptor{}, lpsq.inters...),
		predicates:              append([]predicate.Lab_Problem_Submission{}, lpsq.predicates...),
		withOwner:               lpsq.withOwner.Clone(),
		withTestcaseSubmissions: lpsq.withTestcaseSubmissions.Clone(),
		// clone intermediate query.
		sql:  lpsq.sql.Clone(),
		path: lpsq.path,
	}
}

// WithOwner tells the query-builder to eager-load the nodes that are connected to
// the "owner" edge. The optional arguments are used to configure the query builder of the edge.
func (lpsq *LabProblemSubmissionQuery) WithOwner(opts ...func(*UserQuery)) *LabProblemSubmissionQuery {
	query := (&UserClient{config: lpsq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	lpsq.withOwner = query
	return lpsq
}

// WithTestcaseSubmissions tells the query-builder to eager-load the nodes that are connected to
// the "testcase_submissions" edge. The optional arguments are used to configure the query builder of the edge.
func (lpsq *LabProblemSubmissionQuery) WithTestcaseSubmissions(opts ...func(*TestcaseSubmissionQuery)) *LabProblemSubmissionQuery {
	query := (&TestcaseSubmissionClient{config: lpsq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	lpsq.withTestcaseSubmissions = query
	return lpsq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		OwnerID int `json:"owner_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.LabProblemSubmission.Query().
//		GroupBy(lab_problem_submission.FieldOwnerID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (lpsq *LabProblemSubmissionQuery) GroupBy(field string, fields ...string) *LabProblemSubmissionGroupBy {
	lpsq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &LabProblemSubmissionGroupBy{build: lpsq}
	grbuild.flds = &lpsq.ctx.Fields
	grbuild.label = lab_problem_submission.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		OwnerID int `json:"owner_id,omitempty"`
//	}
//
//	client.LabProblemSubmission.Query().
//		Select(lab_problem_submission.FieldOwnerID).
//		Scan(ctx, &v)
func (lpsq *LabProblemSubmissionQuery) Select(fields ...string) *LabProblemSubmissionSelect {
	lpsq.ctx.Fields = append(lpsq.ctx.Fields, fields...)
	sbuild := &LabProblemSubmissionSelect{LabProblemSubmissionQuery: lpsq}
	sbuild.label = lab_problem_submission.Label
	sbuild.flds, sbuild.scan = &lpsq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a LabProblemSubmissionSelect configured with the given aggregations.
func (lpsq *LabProblemSubmissionQuery) Aggregate(fns ...AggregateFunc) *LabProblemSubmissionSelect {
	return lpsq.Select().Aggregate(fns...)
}

func (lpsq *LabProblemSubmissionQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range lpsq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, lpsq); err != nil {
				return err
			}
		}
	}
	for _, f := range lpsq.ctx.Fields {
		if !lab_problem_submission.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if lpsq.path != nil {
		prev, err := lpsq.path(ctx)
		if err != nil {
			return err
		}
		lpsq.sql = prev
	}
	return nil
}

func (lpsq *LabProblemSubmissionQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*Lab_Problem_Submission, error) {
	var (
		nodes       = []*Lab_Problem_Submission{}
		_spec       = lpsq.querySpec()
		loadedTypes = [2]bool{
			lpsq.withOwner != nil,
			lpsq.withTestcaseSubmissions != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*Lab_Problem_Submission).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &Lab_Problem_Submission{config: lpsq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, lpsq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := lpsq.withOwner; query != nil {
		if err := lpsq.loadOwner(ctx, query, nodes, nil,
			func(n *Lab_Problem_Submission, e *User) { n.Edges.Owner = e }); err != nil {
			return nil, err
		}
	}
	if query := lpsq.withTestcaseSubmissions; query != nil {
		if err := lpsq.loadTestcaseSubmissions(ctx, query, nodes,
			func(n *Lab_Problem_Submission) { n.Edges.TestcaseSubmissions = []*Testcase_Submission{} },
			func(n *Lab_Problem_Submission, e *Testcase_Submission) {
				n.Edges.TestcaseSubmissions = append(n.Edges.TestcaseSubmissions, e)
			}); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (lpsq *LabProblemSubmissionQuery) loadOwner(ctx context.Context, query *UserQuery, nodes []*Lab_Problem_Submission, init func(*Lab_Problem_Submission), assign func(*Lab_Problem_Submission, *User)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*Lab_Problem_Submission)
	for i := range nodes {
		fk := nodes[i].OwnerID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(user.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "owner_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (lpsq *LabProblemSubmissionQuery) loadTestcaseSubmissions(ctx context.Context, query *TestcaseSubmissionQuery, nodes []*Lab_Problem_Submission, init func(*Lab_Problem_Submission), assign func(*Lab_Problem_Submission, *Testcase_Submission)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*Lab_Problem_Submission)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(testcase_submission.FieldSubmissionID)
	}
	query.Where(predicate.Testcase_Submission(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(lab_problem_submission.TestcaseSubmissionsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.SubmissionID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "submission_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (lpsq *LabProblemSubmissionQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := lpsq.querySpec()
	_spec.Node.Columns = lpsq.ctx.Fields
	if len(lpsq.ctx.Fields) > 0 {
		_spec.Unique = lpsq.ctx.Unique != nil && *lpsq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, lpsq.driver, _spec)
}

func (lpsq *LabProblemSubmissionQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(lab_problem_submission.Table, lab_problem_submission.Columns, sqlgraph.NewFieldSpec(lab_problem_submission.FieldID, field.TypeInt))
	_spec.From = lpsq.sql
	if unique := lpsq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if lpsq.path != nil {
		_spec.Unique = true
	}
	if fields := lpsq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, lab_problem_submission.FieldID)
		for i := range fields {
			if fields[i] != lab_problem_submission.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if lpsq.withOwner != nil {
			_spec.Node.AddColumnOnce(lab_problem_submission.FieldOwnerID)
		}
	}
	if ps := lpsq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := lpsq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := lpsq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := lpsq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (lpsq *LabProblemSubmissionQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(lpsq.driver.Dialect())
	t1 := builder.Table(lab_problem_submission.Table)
	columns := lpsq.ctx.Fields
	if len(columns) == 0 {
		columns = lab_problem_submission.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if lpsq.sql != nil {
		selector = lpsq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if lpsq.ctx.Unique != nil && *lpsq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range lpsq.predicates {
		p(selector)
	}
	for _, p := range lpsq.order {
		p(selector)
	}
	if offset := lpsq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := lpsq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// LabProblemSubmissionGroupBy is the group-by builder for Lab_Problem_Submission entities.
type LabProblemSubmissionGroupBy struct {
	selector
	build *LabProblemSubmissionQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (lpsgb *LabProblemSubmissionGroupBy) Aggregate(fns ...AggregateFunc) *LabProblemSubmissionGroupBy {
	lpsgb.fns = append(lpsgb.fns, fns...)
	return lpsgb
}

// Scan applies the selector query and scans the result into the given value.
func (lpsgb *LabProblemSubmissionGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, lpsgb.build.ctx, "GroupBy")
	if err := lpsgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*LabProblemSubmissionQuery, *LabProblemSubmissionGroupBy](ctx, lpsgb.build, lpsgb, lpsgb.build.inters, v)
}

func (lpsgb *LabProblemSubmissionGroupBy) sqlScan(ctx context.Context, root *LabProblemSubmissionQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(lpsgb.fns))
	for _, fn := range lpsgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*lpsgb.flds)+len(lpsgb.fns))
		for _, f := range *lpsgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*lpsgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := lpsgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// LabProblemSubmissionSelect is the builder for selecting fields of LabProblemSubmission entities.
type LabProblemSubmissionSelect struct {
	*LabProblemSubmissionQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (lpss *LabProblemSubmissionSelect) Aggregate(fns ...AggregateFunc) *LabProblemSubmissionSelect {
	lpss.fns = append(lpss.fns, fns...)
	return lpss
}

// Scan applies the selector query and scans the result into the given value.
func (lpss *LabProblemSubmissionSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, lpss.ctx, "Select")
	if err := lpss.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*LabProblemSubmissionQuery, *LabProblemSubmissionSelect](ctx, lpss.LabProblemSubmissionQuery, lpss, lpss.inters, v)
}

func (lpss *LabProblemSubmissionSelect) sqlScan(ctx context.Context, root *LabProblemSubmissionQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(lpss.fns))
	for _, fn := range lpss.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*lpss.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := lpss.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
