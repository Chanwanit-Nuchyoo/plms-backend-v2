// Code generated by ent, DO NOT EDIT.

package ent

import (
	"plms-backend/ent/class_user_role"
	"plms-backend/ent/predicate"
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ClassUserRoleDelete is the builder for deleting a Class_User_Role entity.
type ClassUserRoleDelete struct {
	config
	hooks    []Hook
	mutation *ClassUserRoleMutation
}

// Where appends a list predicates to the ClassUserRoleDelete builder.
func (curd *ClassUserRoleDelete) Where(ps ...predicate.Class_User_Role) *ClassUserRoleDelete {
	curd.mutation.Where(ps...)
	return curd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (curd *ClassUserRoleDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, curd.sqlExec, curd.mutation, curd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (curd *ClassUserRoleDelete) ExecX(ctx context.Context) int {
	n, err := curd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (curd *ClassUserRoleDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(class_user_role.Table, sqlgraph.NewFieldSpec(class_user_role.FieldID, field.TypeInt))
	if ps := curd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, curd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	curd.mutation.done = true
	return affected, err
}

// ClassUserRoleDeleteOne is the builder for deleting a single Class_User_Role entity.
type ClassUserRoleDeleteOne struct {
	curd *ClassUserRoleDelete
}

// Where appends a list predicates to the ClassUserRoleDelete builder.
func (curdo *ClassUserRoleDeleteOne) Where(ps ...predicate.Class_User_Role) *ClassUserRoleDeleteOne {
	curdo.curd.mutation.Where(ps...)
	return curdo
}

// Exec executes the deletion query.
func (curdo *ClassUserRoleDeleteOne) Exec(ctx context.Context) error {
	n, err := curdo.curd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{class_user_role.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (curdo *ClassUserRoleDeleteOne) ExecX(ctx context.Context) {
	if err := curdo.Exec(ctx); err != nil {
		panic(err)
	}
}
